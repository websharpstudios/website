/*
 * PropertyRadar API
 *
 * # PropertyRadar API Reference PropertyRadar offers the most powerful property and owner data API ever. Access our full 250+ property search criteria, build lists, get owner information, append phones & emails, set up automations, and much more. While the API does not yet offer the full power of the PropertyRadar web and mobile applications, we are excited to make it available and see what you build!    Note that the PropertyRadar API is intended for end-users only - you can not use it to build applications you sell to others.  That said, we offer OAuth, so partner applications can access the API on behalf of our shared customers. Please <a href='https://www.propertyradar.com/support' target='_blank'>contact us</a> to learn more about our partner programs.    The PropertyRadar API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded data, and uses standard HTTP response codes, authentication, and verbs.    To begin using the PropertyRadar API, you can activate a <a href='https://help.propertyradar.com/en/articles/8309200-how-to-activate-30-day-api-trial' target='_blank'>30-Day Free Trial</a> (note that a paid PropertyRadar subscription is required). To do so, <a href='https://app.propertyradar.com/' target='_blank'>login</a>, click the profile icon, and choose Account Settings.    <image src='https://files.propertyradar.com/service/api-docs/Account_Settings_highlighted.png'>  Then click the \"Get API Free Trial\" link at the bottom to begin the trial.    <image src='https://files.propertyradar.com/service/api-docs/Get_API_Free_Trail.png'>  Once you complete that, go back into Account Settings and scroll to the bottom where you will find your API key. Click on its Integration Name to reveal your actual key to use.    <image src='https://files.propertyradar.com/service/api-docs/Integrations_Dialog.png'>  Then when you have your API token, click \"Try It\" next to any of the REST endpoints below. Paste your API token into the \"Bearer Token\" field under Security. Set your Parameters and/or Body in the fields provided.  If you've chosen a pay-per-record endpoint, each result returned will count as one export record or phone/email purchase or unlock against your monthly included items. Any overages will cost the same as any other export would.    As such, test with Purchase=0 as that will tell you how many records will be returned with no deduction. When you are ready to purchase the records, set Purchase=1, and be sure you request the return fields you want.   For exports, whether you request 1 field of data for that record, or 50, it will still count as an export. Again, It's important to test first because all purchases are non-refundable, and even during the API trial, each record will be deducted from your monthly included items.   Finally please note that this API is intended for experienced software developers as it requires custom code on your end. If you do not have a developer on your team and want to access the power of PropertyRadar, please consider using our <a href='https://help.propertyradar.com/en/articles/3314775-using-zapier-with-propertyradar' target='_blank'>Zapier integration</a> instead as no coding is required.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GETPropertiesRadarIDPersons200ResponseResultsInner : IEquatable<GETPropertiesRadarIDPersons200ResponseResultsInner>
    {
        /// <summary>
        /// Unique ID for locating properties within PropertyRadar. 
        /// </summary>
        /// <value>Unique ID for locating properties within PropertyRadar. </value>
        [DataMember(Name="RadarID", EmitDefaultValue=false)]
        public string RadarID { get; set; }

        /// <summary>
        /// A unique identifier for the person.
        /// </summary>
        /// <value>A unique identifier for the person.</value>
        [DataMember(Name="PersonKey", EmitDefaultValue=false)]
        public string PersonKey { get; set; }


        /// <summary>
        /// This is a value indicating if the person is the primary contact for a property.
        /// </summary>
        /// <value>This is a value indicating if the person is the primary contact for a property.</value>
        
        public enum IsPrimaryContactEnum
        {
            
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            
            _0Enum = 0,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            
            _1Enum = 1
        }

        /// <summary>
        /// This is a value indicating if the person is the primary contact for a property.
        /// </summary>
        /// <value>This is a value indicating if the person is the primary contact for a property.</value>
        [DataMember(Name="isPrimaryContact", EmitDefaultValue=false)]
        public IsPrimaryContactEnum IsPrimaryContact { get; set; }


        /// <summary>
        /// This attribute specifies the role of the person in relation to the property
        /// </summary>
        /// <value>This attribute specifies the role of the person in relation to the property</value>
        [TypeConverter(typeof(CustomEnumConverter<OwnershipRoleEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OwnershipRoleEnum
        {
            
            /// <summary>
            /// Enum OwnerEnum for Owner
            /// </summary>
            [EnumMember(Value = "Owner")]
            OwnerEnum = 1,
            
            /// <summary>
            /// Enum PrincipalEnum for Principal
            /// </summary>
            [EnumMember(Value = "Principal")]
            PrincipalEnum = 2,
            
            /// <summary>
            /// Enum TrusteeEnum for Trustee
            /// </summary>
            [EnumMember(Value = "Trustee")]
            TrusteeEnum = 3
        }

        /// <summary>
        /// This attribute specifies the role of the person in relation to the property
        /// </summary>
        /// <value>This attribute specifies the role of the person in relation to the property</value>
        [DataMember(Name="OwnershipRole", EmitDefaultValue=false)]
        public OwnershipRoleEnum OwnershipRole { get; set; }

        /// <summary>
        /// Array that contains the person&#39;s primary residence address in the form of a link text and a links object with a single link to Google Maps
        /// </summary>
        /// <value>Array that contains the person&#39;s primary residence address in the form of a link text and a links object with a single link to Google Maps</value>
        [DataMember(Name="PrimaryResidence", EmitDefaultValue=false)]
        public List<Object> PrimaryResidence { get; set; }

        /// <summary>
        /// Array of objects that contain information about a property, including its address and links to the property details and directions
        /// </summary>
        /// <value>Array of objects that contain information about a property, including its address and links to the property details and directions</value>
        [DataMember(Name="OtherProperties", EmitDefaultValue=false)]
        public List<Object> OtherProperties { get; set; }


        /// <summary>
        /// The user-edited status of the contact as a whole.  (See also FieldStatus) So far only \"added\" is supported
        /// </summary>
        /// <value>The user-edited status of the contact as a whole.  (See also FieldStatus) So far only \"added\" is supported</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AddedEnum for added
            /// </summary>
            [EnumMember(Value = "added")]
            AddedEnum = 1
        }

        /// <summary>
        /// The user-edited status of the contact as a whole.  (See also FieldStatus) So far only \&quot;added\&quot; is supported
        /// </summary>
        /// <value>The user-edited status of the contact as a whole.  (See also FieldStatus) So far only \&quot;added\&quot; is supported</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }


        /// <summary>
        /// The type of the person
        /// </summary>
        /// <value>The type of the person</value>
        [TypeConverter(typeof(CustomEnumConverter<PersonTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PersonTypeEnum
        {
            
            /// <summary>
            /// Enum PersonEnum for Person
            /// </summary>
            [EnumMember(Value = "Person")]
            PersonEnum = 1,
            
            /// <summary>
            /// Enum CompanyEnum for Company
            /// </summary>
            [EnumMember(Value = "Company")]
            CompanyEnum = 2,
            
            /// <summary>
            /// Enum EntityEnum for Entity
            /// </summary>
            [EnumMember(Value = "Entity")]
            EntityEnum = 3,
            
            /// <summary>
            /// Enum TrustEnum for Trust
            /// </summary>
            [EnumMember(Value = "Trust")]
            TrustEnum = 4
        }

        /// <summary>
        /// The type of the person
        /// </summary>
        /// <value>The type of the person</value>
        [DataMember(Name="PersonType", EmitDefaultValue=false)]
        public PersonTypeEnum PersonType { get; set; }

        /// <summary>
        /// The first name of the person
        /// </summary>
        /// <value>The first name of the person</value>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The middle name of the person
        /// </summary>
        /// <value>The middle name of the person</value>
        [DataMember(Name="MiddleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The last name of the person
        /// </summary>
        /// <value>The last name of the person</value>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The suffix of the person
        /// </summary>
        /// <value>The suffix of the person</value>
        [DataMember(Name="Suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Name of the entity, when the person type is Trust, Company or Entity
        /// </summary>
        /// <value>Name of the entity, when the person type is Trust, Company or Entity</value>
        [DataMember(Name="EntityName", EmitDefaultValue=false)]
        public string EntityName { get; set; }

        /// <summary>
        /// The age of the personThe age of the personThe age of any owner of the property. 
        /// </summary>
        /// <value>The age of the personThe age of the personThe age of any owner of the property. </value>
        [DataMember(Name="Age", EmitDefaultValue=false)]
        public string Age { get; set; }

        /// <summary>
        /// The gender of the personThe gender of the personThe gender of any owner of the property. 
        /// </summary>
        /// <value>The gender of the personThe gender of the personThe gender of any owner of the property. </value>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public string Gender { get; set; }

        /// <summary>
        /// Array that contains the person&#39;s mailing address in the form of a link text and a links object with a single link to Google Maps
        /// </summary>
        /// <value>Array that contains the person&#39;s mailing address in the form of a link text and a links object with a single link to Google Maps</value>
        [DataMember(Name="MailAddress", EmitDefaultValue=false)]
        public List<Object> MailAddress { get; set; }

        /// <summary>
        /// The occupation of the personThe occupation of the personThe likely occupation of the property owner based on public and self reported data. 
        /// </summary>
        /// <value>The occupation of the personThe occupation of the personThe likely occupation of the property owner based on public and self reported data. </value>
        [DataMember(Name="Occupation", EmitDefaultValue=false)]
        public string Occupation { get; set; }

        /// <summary>
        /// Phone numbers for the person,                                          along with other information about the phone numbers such as type (mobile or landline), status and source
        /// </summary>
        /// <value>Phone numbers for the person,                                          along with other information about the phone numbers such as type (mobile or landline), status and source</value>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public List<GETPropertiesRadarIDPersons200ResponseResultsInnerPhoneInner> Phone { get; set; }

        /// <summary>
        /// Email addresses for the person along with information about the email such as status and source
        /// </summary>
        /// <value>Email addresses for the person along with information about the email such as status and source</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public List<GETPropertiesRadarIDPersons200ResponseResultsInnerEmailInner> Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GETPropertiesRadarIDPersons200ResponseResultsInner {\n");
            sb.Append("  RadarID: ").Append(RadarID).Append("\n");
            sb.Append("  PersonKey: ").Append(PersonKey).Append("\n");
            sb.Append("  IsPrimaryContact: ").Append(IsPrimaryContact).Append("\n");
            sb.Append("  OwnershipRole: ").Append(OwnershipRole).Append("\n");
            sb.Append("  PrimaryResidence: ").Append(PrimaryResidence).Append("\n");
            sb.Append("  OtherProperties: ").Append(OtherProperties).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PersonType: ").Append(PersonType).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  Occupation: ").Append(Occupation).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GETPropertiesRadarIDPersons200ResponseResultsInner)obj);
        }

        /// <summary>
        /// Returns true if GETPropertiesRadarIDPersons200ResponseResultsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GETPropertiesRadarIDPersons200ResponseResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GETPropertiesRadarIDPersons200ResponseResultsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RadarID == other.RadarID ||
                    RadarID != null &&
                    RadarID.Equals(other.RadarID)
                ) && 
                (
                    PersonKey == other.PersonKey ||
                    PersonKey != null &&
                    PersonKey.Equals(other.PersonKey)
                ) && 
                (
                    IsPrimaryContact == other.IsPrimaryContact ||
                    
                    IsPrimaryContact.Equals(other.IsPrimaryContact)
                ) && 
                (
                    OwnershipRole == other.OwnershipRole ||
                    
                    OwnershipRole.Equals(other.OwnershipRole)
                ) && 
                (
                    PrimaryResidence == other.PrimaryResidence ||
                    PrimaryResidence != null &&
                    other.PrimaryResidence != null &&
                    PrimaryResidence.SequenceEqual(other.PrimaryResidence)
                ) && 
                (
                    OtherProperties == other.OtherProperties ||
                    OtherProperties != null &&
                    other.OtherProperties != null &&
                    OtherProperties.SequenceEqual(other.OtherProperties)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    PersonType == other.PersonType ||
                    
                    PersonType.Equals(other.PersonType)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    MiddleName == other.MiddleName ||
                    MiddleName != null &&
                    MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Suffix == other.Suffix ||
                    Suffix != null &&
                    Suffix.Equals(other.Suffix)
                ) && 
                (
                    EntityName == other.EntityName ||
                    EntityName != null &&
                    EntityName.Equals(other.EntityName)
                ) && 
                (
                    Age == other.Age ||
                    Age != null &&
                    Age.Equals(other.Age)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    MailAddress == other.MailAddress ||
                    MailAddress != null &&
                    other.MailAddress != null &&
                    MailAddress.SequenceEqual(other.MailAddress)
                ) && 
                (
                    Occupation == other.Occupation ||
                    Occupation != null &&
                    Occupation.Equals(other.Occupation)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    other.Phone != null &&
                    Phone.SequenceEqual(other.Phone)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    other.Email != null &&
                    Email.SequenceEqual(other.Email)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RadarID != null)
                    hashCode = hashCode * 59 + RadarID.GetHashCode();
                    if (PersonKey != null)
                    hashCode = hashCode * 59 + PersonKey.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPrimaryContact.GetHashCode();
                    
                    hashCode = hashCode * 59 + OwnershipRole.GetHashCode();
                    if (PrimaryResidence != null)
                    hashCode = hashCode * 59 + PrimaryResidence.GetHashCode();
                    if (OtherProperties != null)
                    hashCode = hashCode * 59 + OtherProperties.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + PersonType.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (MiddleName != null)
                    hashCode = hashCode * 59 + MiddleName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Suffix != null)
                    hashCode = hashCode * 59 + Suffix.GetHashCode();
                    if (EntityName != null)
                    hashCode = hashCode * 59 + EntityName.GetHashCode();
                    if (Age != null)
                    hashCode = hashCode * 59 + Age.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (MailAddress != null)
                    hashCode = hashCode * 59 + MailAddress.GetHashCode();
                    if (Occupation != null)
                    hashCode = hashCode * 59 + Occupation.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GETPropertiesRadarIDPersons200ResponseResultsInner left, GETPropertiesRadarIDPersons200ResponseResultsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GETPropertiesRadarIDPersons200ResponseResultsInner left, GETPropertiesRadarIDPersons200ResponseResultsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
