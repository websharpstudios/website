/*
 * PropertyRadar API
 *
 * # PropertyRadar API Reference PropertyRadar offers the most powerful property and owner data API ever. Access our full 250+ property search criteria, build lists, get owner information, append phones & emails, set up automations, and much more. While the API does not yet offer the full power of the PropertyRadar web and mobile applications, we are excited to make it available and see what you build!    Note that the PropertyRadar API is intended for end-users only - you can not use it to build applications you sell to others.  That said, we offer OAuth, so partner applications can access the API on behalf of our shared customers. Please <a href='https://www.propertyradar.com/support' target='_blank'>contact us</a> to learn more about our partner programs.    The PropertyRadar API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded data, and uses standard HTTP response codes, authentication, and verbs.    To begin using the PropertyRadar API, you can activate a <a href='https://help.propertyradar.com/en/articles/8309200-how-to-activate-30-day-api-trial' target='_blank'>30-Day Free Trial</a> (note that a paid PropertyRadar subscription is required). To do so, <a href='https://app.propertyradar.com/' target='_blank'>login</a>, click the profile icon, and choose Account Settings.    <image src='https://files.propertyradar.com/service/api-docs/Account_Settings_highlighted.png'>  Then click the \"Get API Free Trial\" link at the bottom to begin the trial.    <image src='https://files.propertyradar.com/service/api-docs/Get_API_Free_Trail.png'>  Once you complete that, go back into Account Settings and scroll to the bottom where you will find your API key. Click on its Integration Name to reveal your actual key to use.    <image src='https://files.propertyradar.com/service/api-docs/Integrations_Dialog.png'>  Then when you have your API token, click \"Try It\" next to any of the REST endpoints below. Paste your API token into the \"Bearer Token\" field under Security. Set your Parameters and/or Body in the fields provided.  If you've chosen a pay-per-record endpoint, each result returned will count as one export record or phone/email purchase or unlock against your monthly included items. Any overages will cost the same as any other export would.    As such, test with Purchase=0 as that will tell you how many records will be returned with no deduction. When you are ready to purchase the records, set Purchase=1, and be sure you request the return fields you want.   For exports, whether you request 1 field of data for that record, or 50, it will still count as an export. Again, It's important to test first because all purchases are non-refundable, and even during the API trial, each record will be deducted from your monthly included items.   Finally please note that this API is intended for experienced software developers as it requires custom code on your end. If you do not have a developer on your team and want to access the power of PropertyRadar, please consider using our <a href='https://help.propertyradar.com/en/articles/3314775-using-zapier-with-propertyradar' target='_blank'>Zapier integration</a> instead as no coding is required.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{
  /// <summary>
  ///
  /// </summary>
  [DataContract]
  public partial class GETPropertiesRadarID200ResponseResultsInner : IEquatable<GETPropertiesRadarID200ResponseResultsInner>
  {
    /// <summary>
    /// Internal unique identifier for properties.  Used during inter-service communication only.Internal unique identifier for properties.  Used during inter-service communication only.C
    /// </summary>
    /// <value>Internal unique identifier for properties.  Used during inter-service communication only.Internal unique identifier for properties.  Used during inter-service communication only.C </value>
    [DataMember(Name = "PropertyKey", EmitDefaultValue = false)]
    public int PropertyKey { get; set; }

    /// <summary>
    /// The geographic coordinate in decimal degrees that specifies the east-west position of the center of the property.
    /// </summary>
    /// <value>The geographic coordinate in decimal degrees that specifies the east-west position of the center of the property. </value>
    [DataMember(Name = "Longitude", EmitDefaultValue = false)]
    public decimal Longitude { get; set; }

    /// <summary>
    /// The geographic coordinate in decimal degrees that specifies the north-south position of the center of the property.
    /// </summary>
    /// <value>The geographic coordinate in decimal degrees that specifies the north-south position of the center of the property. </value>
    [DataMember(Name = "Latitude", EmitDefaultValue = false)]
    public decimal Latitude { get; set; }


    /// <summary>
    /// State in which the property is located.
    /// </summary>
    /// <value>State in which the property is located. </value>
    [TypeConverter(typeof(CustomEnumConverter<StateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum StateEnum
    {

      /// <summary>
      /// Enum AlabamaEnum for Alabama
      /// </summary>
      [EnumMember(Value = "Alabama")]
      AlabamaEnum = 1,

      /// <summary>
      /// Enum AlaskaEnum for Alaska
      /// </summary>
      [EnumMember(Value = "Alaska")]
      AlaskaEnum = 2,

      /// <summary>
      /// Enum ArizonaEnum for Arizona
      /// </summary>
      [EnumMember(Value = "Arizona")]
      ArizonaEnum = 3,

      /// <summary>
      /// Enum ArkansasEnum for Arkansas
      /// </summary>
      [EnumMember(Value = "Arkansas")]
      ArkansasEnum = 4,

      /// <summary>
      /// Enum CaliforniaEnum for California
      /// </summary>
      [EnumMember(Value = "California")]
      CaliforniaEnum = 5,

      /// <summary>
      /// Enum ColoradoEnum for Colorado
      /// </summary>
      [EnumMember(Value = "Colorado")]
      ColoradoEnum = 6,

      /// <summary>
      /// Enum ConnecticutEnum for Connecticut
      /// </summary>
      [EnumMember(Value = "Connecticut")]
      ConnecticutEnum = 7,

      /// <summary>
      /// Enum DelawareEnum for Delaware
      /// </summary>
      [EnumMember(Value = "Delaware")]
      DelawareEnum = 8,

      /// <summary>
      /// Enum DistrictOfColumbiaEnum for District of Columbia
      /// </summary>
      [EnumMember(Value = "District of Columbia")]
      DistrictOfColumbiaEnum = 9,

      /// <summary>
      /// Enum FloridaEnum for Florida
      /// </summary>
      [EnumMember(Value = "Florida")]
      FloridaEnum = 10,

      /// <summary>
      /// Enum GeorgiaEnum for Georgia
      /// </summary>
      [EnumMember(Value = "Georgia")]
      GeorgiaEnum = 11,

      /// <summary>
      /// Enum HawaiiEnum for Hawaii
      /// </summary>
      [EnumMember(Value = "Hawaii")]
      HawaiiEnum = 12,

      /// <summary>
      /// Enum IdahoEnum for Idaho
      /// </summary>
      [EnumMember(Value = "Idaho")]
      IdahoEnum = 13,

      /// <summary>
      /// Enum IllinoisEnum for Illinois
      /// </summary>
      [EnumMember(Value = "Illinois")]
      IllinoisEnum = 14,

      /// <summary>
      /// Enum IndianaEnum for Indiana
      /// </summary>
      [EnumMember(Value = "Indiana")]
      IndianaEnum = 15,

      /// <summary>
      /// Enum IowaEnum for Iowa
      /// </summary>
      [EnumMember(Value = "Iowa")]
      IowaEnum = 16,

      /// <summary>
      /// Enum KansasEnum for Kansas
      /// </summary>
      [EnumMember(Value = "Kansas")]
      KansasEnum = 17,

      /// <summary>
      /// Enum KentuckyEnum for Kentucky
      /// </summary>
      [EnumMember(Value = "Kentucky")]
      KentuckyEnum = 18,

      /// <summary>
      /// Enum LouisianaEnum for Louisiana
      /// </summary>
      [EnumMember(Value = "Louisiana")]
      LouisianaEnum = 19,

      /// <summary>
      /// Enum MaineEnum for Maine
      /// </summary>
      [EnumMember(Value = "Maine")]
      MaineEnum = 20,

      /// <summary>
      /// Enum MarylandEnum for Maryland
      /// </summary>
      [EnumMember(Value = "Maryland")]
      MarylandEnum = 21,

      /// <summary>
      /// Enum MassachusettsEnum for Massachusetts
      /// </summary>
      [EnumMember(Value = "Massachusetts")]
      MassachusettsEnum = 22,

      /// <summary>
      /// Enum MichiganEnum for Michigan
      /// </summary>
      [EnumMember(Value = "Michigan")]
      MichiganEnum = 23,

      /// <summary>
      /// Enum MinnesotaEnum for Minnesota
      /// </summary>
      [EnumMember(Value = "Minnesota")]
      MinnesotaEnum = 24,

      /// <summary>
      /// Enum MississippiEnum for Mississippi
      /// </summary>
      [EnumMember(Value = "Mississippi")]
      MississippiEnum = 25,

      /// <summary>
      /// Enum MissouriEnum for Missouri
      /// </summary>
      [EnumMember(Value = "Missouri")]
      MissouriEnum = 26,

      /// <summary>
      /// Enum MontanaEnum for Montana
      /// </summary>
      [EnumMember(Value = "Montana")]
      MontanaEnum = 27,

      /// <summary>
      /// Enum NebraskaEnum for Nebraska
      /// </summary>
      [EnumMember(Value = "Nebraska")]
      NebraskaEnum = 28,

      /// <summary>
      /// Enum NevadaEnum for Nevada
      /// </summary>
      [EnumMember(Value = "Nevada")]
      NevadaEnum = 29,

      /// <summary>
      /// Enum NewHampshireEnum for New Hampshire
      /// </summary>
      [EnumMember(Value = "New Hampshire")]
      NewHampshireEnum = 30,

      /// <summary>
      /// Enum NewJerseyEnum for New Jersey
      /// </summary>
      [EnumMember(Value = "New Jersey")]
      NewJerseyEnum = 31,

      /// <summary>
      /// Enum NewMexicoEnum for New Mexico
      /// </summary>
      [EnumMember(Value = "New Mexico")]
      NewMexicoEnum = 32,

      /// <summary>
      /// Enum NewYorkEnum for New York
      /// </summary>
      [EnumMember(Value = "New York")]
      NewYorkEnum = 33,

      /// <summary>
      /// Enum NorthCarolinaEnum for North Carolina
      /// </summary>
      [EnumMember(Value = "North Carolina")]
      NorthCarolinaEnum = 34,

      /// <summary>
      /// Enum NorthDakotaEnum for North Dakota
      /// </summary>
      [EnumMember(Value = "North Dakota")]
      NorthDakotaEnum = 35,

      /// <summary>
      /// Enum OhioEnum for Ohio
      /// </summary>
      [EnumMember(Value = "Ohio")]
      OhioEnum = 36,

      /// <summary>
      /// Enum OklahomaEnum for Oklahoma
      /// </summary>
      [EnumMember(Value = "Oklahoma")]
      OklahomaEnum = 37,

      /// <summary>
      /// Enum OregonEnum for Oregon
      /// </summary>
      [EnumMember(Value = "Oregon")]
      OregonEnum = 38,

      /// <summary>
      /// Enum PennsylvaniaEnum for Pennsylvania
      /// </summary>
      [EnumMember(Value = "Pennsylvania")]
      PennsylvaniaEnum = 39,

      /// <summary>
      /// Enum RhodeIslandEnum for Rhode Island
      /// </summary>
      [EnumMember(Value = "Rhode Island")]
      RhodeIslandEnum = 40,

      /// <summary>
      /// Enum SouthCarolinaEnum for South Carolina
      /// </summary>
      [EnumMember(Value = "South Carolina")]
      SouthCarolinaEnum = 41,

      /// <summary>
      /// Enum SouthDakotaEnum for South Dakota
      /// </summary>
      [EnumMember(Value = "South Dakota")]
      SouthDakotaEnum = 42,

      /// <summary>
      /// Enum TennesseeEnum for Tennessee
      /// </summary>
      [EnumMember(Value = "Tennessee")]
      TennesseeEnum = 43,

      /// <summary>
      /// Enum TexasEnum for Texas
      /// </summary>
      [EnumMember(Value = "Texas")]
      TexasEnum = 44,

      /// <summary>
      /// Enum UtahEnum for Utah
      /// </summary>
      [EnumMember(Value = "Utah")]
      UtahEnum = 45,

      /// <summary>
      /// Enum VirginiaEnum for Virginia
      /// </summary>
      [EnumMember(Value = "Virginia")]
      VirginiaEnum = 46,

      /// <summary>
      /// Enum VermontEnum for Vermont
      /// </summary>
      [EnumMember(Value = "Vermont")]
      VermontEnum = 47,

      /// <summary>
      /// Enum WashingtonEnum for Washington
      /// </summary>
      [EnumMember(Value = "Washington")]
      WashingtonEnum = 48,

      /// <summary>
      /// Enum WestVirginiaEnum for West Virginia
      /// </summary>
      [EnumMember(Value = "West Virginia")]
      WestVirginiaEnum = 49,

      /// <summary>
      /// Enum WisconsinEnum for Wisconsin
      /// </summary>
      [EnumMember(Value = "Wisconsin")]
      WisconsinEnum = 50,

      /// <summary>
      /// Enum WyomingEnum for Wyoming
      /// </summary>
      [EnumMember(Value = "Wyoming")]
      WyomingEnum = 51
    }

    /// <summary>
    /// State in which the property is located.
    /// </summary>
    /// <value>State in which the property is located. </value>
    [DataMember(Name = "State", EmitDefaultValue = false)]
    public StateEnum State { get; set; }

    /// <summary>
    /// The 4 or 5 digit code assigned to the state (1 or 2 digits) and county (3 digits) under the Federal Information Processing Standards.
    /// </summary>
    /// <value>The 4 or 5 digit code assigned to the state (1 or 2 digits) and county (3 digits) under the Federal Information Processing Standards. </value>
    [DataMember(Name = "FIPS", EmitDefaultValue = false)]
    public string FIPS { get; set; }

    /// <summary>
    /// In Criteria, County is expressed as a 4 or 5 digit FIPS code, a unique code assigned by the federal government                                          to every county in the US.  To find the FIPS code for a county, use the [View FIPS and Counties](#operation/POST/suggestions/County) Suggestions endpoint.  Provide the county name in the SuggestionInput parameter and optionally the state in the Criteria object.In Criteria, County is expressed as a 4 or 5 digit FIPS code, a unique code assigned by the federal government                                          to every county in the US.  To find the FIPS code for a county, use the [View FIPS and Counties](#operation/POST/suggestions/County) Suggestions endpoint.  Provide the county name in the SuggestionInput parameter and optionally the state in the Criteria object.County in which the property is located.
    /// </summary>
    /// <value>In Criteria, County is expressed as a 4 or 5 digit FIPS code, a unique code assigned by the federal government                                          to every county in the US.  To find the FIPS code for a county, use the [View FIPS and Counties](#operation/POST/suggestions/County) Suggestions endpoint.  Provide the county name in the SuggestionInput parameter and optionally the state in the Criteria object.In Criteria, County is expressed as a 4 or 5 digit FIPS code, a unique code assigned by the federal government                                          to every county in the US.  To find the FIPS code for a county, use the [View FIPS and Counties](#operation/POST/suggestions/County) Suggestions endpoint.  Provide the county name in the SuggestionInput parameter and optionally the state in the Criteria object.County in which the property is located. </value>
    [DataMember(Name = "County", EmitDefaultValue = false)]
    public string County { get; set; }

    /// <summary>
    /// City in which the property is located.
    /// </summary>
    /// <value>City in which the property is located. </value>
    [DataMember(Name = "City", EmitDefaultValue = false)]
    public string City { get; set; }

    /// <summary>
    /// ZIP Code in which the property is located.
    /// </summary>
    /// <value>ZIP Code in which the property is located. </value>
    [DataMember(Name = "ZipFive", EmitDefaultValue = false)]
    public int ZipFive { get; set; }

    /// <summary>
    /// The 4-character USPS delivery route code in which the property is located. The carrier route code begins with a letter to designate the type of carrier route and 3 digits identifying the route, e.g. R001.
    /// </summary>
    /// <value>The 4-character USPS delivery route code in which the property is located. The carrier route code begins with a letter to designate the type of carrier route and 3 digits identifying the route, e.g. R001. </value>
    [DataMember(Name = "CarrierRoute", EmitDefaultValue = false)]
    public string CarrierRoute { get; set; }


    /// <summary>
    /// The number of the property's congressional district within the state, between 1st and 53rd.
    /// </summary>
    /// <value>The number of the property's congressional district within the state, between 1st and 53rd. </value>
    [TypeConverter(typeof(CustomEnumConverter<SiteCongressionalDistrictEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SiteCongressionalDistrictEnum
    {

      /// <summary>
      /// Enum _1stEnum for 1st
      /// </summary>
      [EnumMember(Value = "1st")]
      _1stEnum = 1,

      /// <summary>
      /// Enum _2ndEnum for 2nd
      /// </summary>
      [EnumMember(Value = "2nd")]
      _2ndEnum = 2,

      /// <summary>
      /// Enum _3rdEnum for 3rd
      /// </summary>
      [EnumMember(Value = "3rd")]
      _3rdEnum = 3,

      /// <summary>
      /// Enum _4thEnum for 4th
      /// </summary>
      [EnumMember(Value = "4th")]
      _4thEnum = 4,

      /// <summary>
      /// Enum _5thEnum for 5th
      /// </summary>
      [EnumMember(Value = "5th")]
      _5thEnum = 5,

      /// <summary>
      /// Enum _6thEnum for 6th
      /// </summary>
      [EnumMember(Value = "6th")]
      _6thEnum = 6,

      /// <summary>
      /// Enum _7thEnum for 7th
      /// </summary>
      [EnumMember(Value = "7th")]
      _7thEnum = 7,

      /// <summary>
      /// Enum _8thEnum for 8th
      /// </summary>
      [EnumMember(Value = "8th")]
      _8thEnum = 8,

      /// <summary>
      /// Enum _9thEnum for 9th
      /// </summary>
      [EnumMember(Value = "9th")]
      _9thEnum = 9,

      /// <summary>
      /// Enum _10thEnum for 10th
      /// </summary>
      [EnumMember(Value = "10th")]
      _10thEnum = 10,

      /// <summary>
      /// Enum _11thEnum for 11th
      /// </summary>
      [EnumMember(Value = "11th")]
      _11thEnum = 11,

      /// <summary>
      /// Enum _12thEnum for 12th
      /// </summary>
      [EnumMember(Value = "12th")]
      _12thEnum = 12,

      /// <summary>
      /// Enum _13thEnum for 13th
      /// </summary>
      [EnumMember(Value = "13th")]
      _13thEnum = 13,

      /// <summary>
      /// Enum _14thEnum for 14th
      /// </summary>
      [EnumMember(Value = "14th")]
      _14thEnum = 14,

      /// <summary>
      /// Enum _15thEnum for 15th
      /// </summary>
      [EnumMember(Value = "15th")]
      _15thEnum = 15,

      /// <summary>
      /// Enum _16thEnum for 16th
      /// </summary>
      [EnumMember(Value = "16th")]
      _16thEnum = 16,

      /// <summary>
      /// Enum _17thEnum for 17th
      /// </summary>
      [EnumMember(Value = "17th")]
      _17thEnum = 17,

      /// <summary>
      /// Enum _18thEnum for 18th
      /// </summary>
      [EnumMember(Value = "18th")]
      _18thEnum = 18,

      /// <summary>
      /// Enum _19thEnum for 19th
      /// </summary>
      [EnumMember(Value = "19th")]
      _19thEnum = 19,

      /// <summary>
      /// Enum _20thEnum for 20th
      /// </summary>
      [EnumMember(Value = "20th")]
      _20thEnum = 20,

      /// <summary>
      /// Enum _21stEnum for 21st
      /// </summary>
      [EnumMember(Value = "21st")]
      _21stEnum = 21,

      /// <summary>
      /// Enum _22ndEnum for 22nd
      /// </summary>
      [EnumMember(Value = "22nd")]
      _22ndEnum = 22,

      /// <summary>
      /// Enum _23rdEnum for 23rd
      /// </summary>
      [EnumMember(Value = "23rd")]
      _23rdEnum = 23,

      /// <summary>
      /// Enum _24thEnum for 24th
      /// </summary>
      [EnumMember(Value = "24th")]
      _24thEnum = 24,

      /// <summary>
      /// Enum _25thEnum for 25th
      /// </summary>
      [EnumMember(Value = "25th")]
      _25thEnum = 25,

      /// <summary>
      /// Enum _26thEnum for 26th
      /// </summary>
      [EnumMember(Value = "26th")]
      _26thEnum = 26,

      /// <summary>
      /// Enum _27thEnum for 27th
      /// </summary>
      [EnumMember(Value = "27th")]
      _27thEnum = 27,

      /// <summary>
      /// Enum _28thEnum for 28th
      /// </summary>
      [EnumMember(Value = "28th")]
      _28thEnum = 28,

      /// <summary>
      /// Enum _29thEnum for 29th
      /// </summary>
      [EnumMember(Value = "29th")]
      _29thEnum = 29,

      /// <summary>
      /// Enum _30thEnum for 30th
      /// </summary>
      [EnumMember(Value = "30th")]
      _30thEnum = 30,

      /// <summary>
      /// Enum _31stEnum for 31st
      /// </summary>
      [EnumMember(Value = "31st")]
      _31stEnum = 31,

      /// <summary>
      /// Enum _32ndEnum for 32nd
      /// </summary>
      [EnumMember(Value = "32nd")]
      _32ndEnum = 32,

      /// <summary>
      /// Enum _33rdEnum for 33rd
      /// </summary>
      [EnumMember(Value = "33rd")]
      _33rdEnum = 33,

      /// <summary>
      /// Enum _34thEnum for 34th
      /// </summary>
      [EnumMember(Value = "34th")]
      _34thEnum = 34,

      /// <summary>
      /// Enum _35thEnum for 35th
      /// </summary>
      [EnumMember(Value = "35th")]
      _35thEnum = 35,

      /// <summary>
      /// Enum _36thEnum for 36th
      /// </summary>
      [EnumMember(Value = "36th")]
      _36thEnum = 36,

      /// <summary>
      /// Enum _37thEnum for 37th
      /// </summary>
      [EnumMember(Value = "37th")]
      _37thEnum = 37,

      /// <summary>
      /// Enum _38thEnum for 38th
      /// </summary>
      [EnumMember(Value = "38th")]
      _38thEnum = 38,

      /// <summary>
      /// Enum _39thEnum for 39th
      /// </summary>
      [EnumMember(Value = "39th")]
      _39thEnum = 39,

      /// <summary>
      /// Enum _40thEnum for 40th
      /// </summary>
      [EnumMember(Value = "40th")]
      _40thEnum = 40,

      /// <summary>
      /// Enum _41stEnum for 41st
      /// </summary>
      [EnumMember(Value = "41st")]
      _41stEnum = 41,

      /// <summary>
      /// Enum _42ndEnum for 42nd
      /// </summary>
      [EnumMember(Value = "42nd")]
      _42ndEnum = 42,

      /// <summary>
      /// Enum _43rdEnum for 43rd
      /// </summary>
      [EnumMember(Value = "43rd")]
      _43rdEnum = 43,

      /// <summary>
      /// Enum _44thEnum for 44th
      /// </summary>
      [EnumMember(Value = "44th")]
      _44thEnum = 44,

      /// <summary>
      /// Enum _45thEnum for 45th
      /// </summary>
      [EnumMember(Value = "45th")]
      _45thEnum = 45,

      /// <summary>
      /// Enum _46thEnum for 46th
      /// </summary>
      [EnumMember(Value = "46th")]
      _46thEnum = 46,

      /// <summary>
      /// Enum _47thEnum for 47th
      /// </summary>
      [EnumMember(Value = "47th")]
      _47thEnum = 47,

      /// <summary>
      /// Enum _48thEnum for 48th
      /// </summary>
      [EnumMember(Value = "48th")]
      _48thEnum = 48,

      /// <summary>
      /// Enum _49thEnum for 49th
      /// </summary>
      [EnumMember(Value = "49th")]
      _49thEnum = 49,

      /// <summary>
      /// Enum _50thEnum for 50th
      /// </summary>
      [EnumMember(Value = "50th")]
      _50thEnum = 50,

      /// <summary>
      /// Enum _51stEnum for 51st
      /// </summary>
      [EnumMember(Value = "51st")]
      _51stEnum = 51,

      /// <summary>
      /// Enum _52ndEnum for 52nd
      /// </summary>
      [EnumMember(Value = "52nd")]
      _52ndEnum = 52,

      /// <summary>
      /// Enum _53rdEnum for 53rd
      /// </summary>
      [EnumMember(Value = "53rd")]
      _53rdEnum = 53,

      /// <summary>
      /// Enum AtLargeEnum for At-Large
      /// </summary>
      [EnumMember(Value = "At-Large")]
      AtLargeEnum = 54
    }

    /// <summary>
    /// The number of the property&#39;s congressional district within the state, between 1st and 53rd.
    /// </summary>
    /// <value>The number of the property&#39;s congressional district within the state, between 1st and 53rd. </value>
    [DataMember(Name = "SiteCongressionalDistrict", EmitDefaultValue = false)]
    public SiteCongressionalDistrictEnum SiteCongressionalDistrict { get; set; }

    /// <summary>
    /// Identifies the special school tax district where the property is located.
    /// </summary>
    /// <value>Identifies the special school tax district where the property is located. </value>
    [DataMember(Name = "SchoolDistrict", EmitDefaultValue = false)]
    public string SchoolDistrict { get; set; }

    /// <summary>
    /// Gets or Sets FullAddress
    /// </summary>
    [DataMember(Name = "FullAddress", EmitDefaultValue = false)]
    public string FullAddress { get; set; }

    /// <summary>
    /// Street address at which the property is located.
    /// </summary>
    /// <value>Street address at which the property is located. </value>
    [DataMember(Name = "Address", EmitDefaultValue = false)]
    public string Address { get; set; }


    /// <summary>
    /// Is the property street number odd or even.
    /// </summary>
    /// <value>Is the property street number odd or even. </value>
    [TypeConverter(typeof(CustomEnumConverter<IsStreetNumberOddEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum IsStreetNumberOddEnum
    {

      /// <summary>
      /// Enum OddEnum for Odd
      /// </summary>
      [EnumMember(Value = "Odd")]
      OddEnum = 1,

      /// <summary>
      /// Enum EvenEnum for Even
      /// </summary>
      [EnumMember(Value = "Even")]
      EvenEnum = 2,

      /// <summary>
      /// Enum AnyEnum for Any
      /// </summary>
      [EnumMember(Value = "Any")]
      AnyEnum = 3
    }

    /// <summary>
    /// Is the property street number odd or even.
    /// </summary>
    /// <value>Is the property street number odd or even. </value>
    [DataMember(Name = "isStreetNumberOdd", EmitDefaultValue = false)]
    public IsStreetNumberOddEnum IsStreetNumberOdd { get; set; }

    /// <summary>
    /// The name of the street without the street number, direction (N,SE) or type (Way, Rd, Lane).
    /// </summary>
    /// <value>The name of the street without the street number, direction (N,SE) or type (Way, Rd, Lane). </value>
    [DataMember(Name = "SiteStreetName", EmitDefaultValue = false)]
    public string SiteStreetName { get; set; }

    /// <summary>
    /// Unique ID for locating properties within PropertyRadar.
    /// </summary>
    /// <value>Unique ID for locating properties within PropertyRadar. </value>
    [DataMember(Name = "RadarID", EmitDefaultValue = false)]
    public string RadarID { get; set; }

    /// <summary>
    /// Assessors Parcel Number assigned by the tax assessors office to uniquely identify the property.
    /// </summary>
    /// <value>Assessors Parcel Number assigned by the tax assessors office to uniquely identify the property. </value>
    [DataMember(Name = "APN", EmitDefaultValue = false)]
    public string APN { get; set; }

    /// <summary>
    /// The name of the subdivision the property is located in as provided by the county assessor&#39;s office.
    /// </summary>
    /// <value>The name of the subdivision the property is located in as provided by the county assessor&#39;s office. </value>
    [DataMember(Name = "Subdivision", EmitDefaultValue = false)]
    public string Subdivision { get; set; }

    /// <summary>
    /// The city or county zoning code for the property.
    /// </summary>
    /// <value>The city or county zoning code for the property. </value>
    [DataMember(Name = "Zoning", EmitDefaultValue = false)]
    public string Zoning { get; set; }

    /// <summary>
    /// The tax rate area the property is located in as provided by the county assessor&#39;s office.
    /// </summary>
    /// <value>The tax rate area the property is located in as provided by the county assessor&#39;s office. </value>
    [DataMember(Name = "TaxRateArea", EmitDefaultValue = false)]
    public string TaxRateArea { get; set; }

    /// <summary>
    /// Gets or Sets TaxSearchURL
    /// </summary>
    [DataMember(Name = "TaxSearchURL", EmitDefaultValue = false)]
    public GETPropertiesRadarID200ResponseResultsInnerTaxSearchURL TaxSearchURL { get; set; }

    /// <summary>
    /// Gets or Sets AssessorURL
    /// </summary>
    [DataMember(Name = "AssessorURL", EmitDefaultValue = false)]
    public GETPropertiesRadarID200ResponseResultsInnerAssessorURL AssessorURL { get; set; }

    /// <summary>
    /// Gets or Sets RecorderSearchURL
    /// </summary>
    [DataMember(Name = "RecorderSearchURL", EmitDefaultValue = false)]
    public GETPropertiesRadarID200ResponseResultsInnerRecorderSearchURL RecorderSearchURL { get; set; }

    /// <summary>
    /// Gets or Sets Range
    /// </summary>
    [DataMember(Name = "Range", EmitDefaultValue = false)]
    public string Range { get; set; }

    /// <summary>
    /// Gets or Sets Township
    /// </summary>
    [DataMember(Name = "Township", EmitDefaultValue = false)]
    public string Township { get; set; }

    /// <summary>
    /// Gets or Sets Section
    /// </summary>
    [DataMember(Name = "Section", EmitDefaultValue = false)]
    public string Section { get; set; }

    /// <summary>
    /// Gets or Sets LegalBookPage
    /// </summary>
    [DataMember(Name = "LegalBookPage", EmitDefaultValue = false)]
    public string LegalBookPage { get; set; }

    /// <summary>
    /// Gets or Sets LegalBlock
    /// </summary>
    [DataMember(Name = "LegalBlock", EmitDefaultValue = false)]
    public string LegalBlock { get; set; }

    /// <summary>
    /// The primary or first lot number from the legal description for the property.
    /// </summary>
    /// <value>The primary or first lot number from the legal description for the property. </value>
    [DataMember(Name = "LegalLots", EmitDefaultValue = false)]
    public string LegalLots { get; set; }

    /// <summary>
    /// Gets or Sets LegalTractNumber
    /// </summary>
    [DataMember(Name = "LegalTractNumber", EmitDefaultValue = false)]
    public string LegalTractNumber { get; set; }

    /// <summary>
    /// A summary of the legal description of the property&#39;s location.
    /// </summary>
    /// <value>A summary of the legal description of the property&#39;s location. </value>
    [DataMember(Name = "FullLegal", EmitDefaultValue = false)]
    public string FullLegal { get; set; }

    /// <summary>
    /// Gets or Sets Taxpayer
    /// </summary>
    [DataMember(Name = "Taxpayer", EmitDefaultValue = false)]
    public string Taxpayer { get; set; }

    /// <summary>
    /// Gets or Sets DirectionsURL
    /// </summary>
    [DataMember(Name = "DirectionsURL", EmitDefaultValue = false)]
    public GETPropertiesRadarID200ResponseResultsInnerDirectionsURL DirectionsURL { get; set; }

    /// <summary>
    /// A geographic region defined for the purpose of taking a U.S. Census, usually coincides with city or town limits or other administrative areas.
    /// </summary>
    /// <value>A geographic region defined for the purpose of taking a U.S. Census, usually coincides with city or town limits or other administrative areas. </value>
    [DataMember(Name = "CensusTract", EmitDefaultValue = false)]
    public string CensusTract { get; set; }

    /// <summary>
    /// A census block is the smallest geographic unit used by the United States Census Bureau. Blocks typically have a four-digit number; the first number indicates which block group the block is in.
    /// </summary>
    /// <value>A census block is the smallest geographic unit used by the United States Census Bureau. Blocks typically have a four-digit number; the first number indicates which block group the block is in. </value>
    [DataMember(Name = "CensusBlock", EmitDefaultValue = false)]
    public string CensusBlock { get; set; }


    /// <summary>
    /// Basic property types, derived and standardized across counties from county Use Codes.
    /// </summary>
    /// <value>Basic property types, derived and standardized across counties from county Use Codes. </value>
    [TypeConverter(typeof(CustomEnumConverter<PTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PTypeEnum
    {

      /// <summary>
      /// Enum SingleFamilyEnum for Single Family
      /// </summary>
      [EnumMember(Value = "Single Family")]
      SingleFamilyEnum = 1,

      /// <summary>
      /// Enum CondominiumEnum for Condominium
      /// </summary>
      [EnumMember(Value = "Condominium")]
      CondominiumEnum = 2,

      /// <summary>
      /// Enum MultiFamily24Enum for Multi-Family 2-4
      /// </summary>
      [EnumMember(Value = "Multi-Family 2-4")]
      MultiFamily24Enum = 3,

      /// <summary>
      /// Enum MultiFamily5Enum for Multi-Family 5+
      /// </summary>
      [EnumMember(Value = "Multi-Family 5+")]
      MultiFamily5Enum = 4,

      /// <summary>
      /// Enum OtherResEnum for Other Res.
      /// </summary>
      [EnumMember(Value = "Other Res.")]
      OtherResEnum = 5,

      /// <summary>
      /// Enum CommercialEnum for Commercial
      /// </summary>
      [EnumMember(Value = "Commercial")]
      CommercialEnum = 6,

      /// <summary>
      /// Enum IndustrialEnum for Industrial
      /// </summary>
      [EnumMember(Value = "Industrial")]
      IndustrialEnum = 7,

      /// <summary>
      /// Enum AgriculturalEnum for Agricultural
      /// </summary>
      [EnumMember(Value = "Agricultural")]
      AgriculturalEnum = 8,

      /// <summary>
      /// Enum LandEnum for Land
      /// </summary>
      [EnumMember(Value = "Land")]
      LandEnum = 9,

      /// <summary>
      /// Enum GovernmentEnum for Government
      /// </summary>
      [EnumMember(Value = "Government")]
      GovernmentEnum = 10,

      /// <summary>
      /// Enum RecreationEnum for Recreation
      /// </summary>
      [EnumMember(Value = "Recreation")]
      RecreationEnum = 11,

      /// <summary>
      /// Enum TransportEnum for Transport
      /// </summary>
      [EnumMember(Value = "Transport")]
      TransportEnum = 12,

      /// <summary>
      /// Enum UtilityEnum for Utility
      /// </summary>
      [EnumMember(Value = "Utility")]
      UtilityEnum = 13,

      /// <summary>
      /// Enum OtherEnum for Other
      /// </summary>
      [EnumMember(Value = "Other")]
      OtherEnum = 14,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 15
    }

    /// <summary>
    /// Basic property types, derived and standardized across counties from county Use Codes.
    /// </summary>
    /// <value>Basic property types, derived and standardized across counties from county Use Codes. </value>
    [DataMember(Name = "PType", EmitDefaultValue = false)]
    public PTypeEnum PType { get; set; }


    /// <summary>
    /// Advanced property types, derived and standardized across counties from county Use Codes.
    /// </summary>
    /// <value>Advanced property types, derived and standardized across counties from county Use Codes. </value>
    [TypeConverter(typeof(CustomEnumConverter<AdvancedPropertyTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AdvancedPropertyTypeEnum
    {

      /// <summary>
      /// Enum SingleFamilyResidenceEnum for Single Family Residence
      /// </summary>
      [EnumMember(Value = "Single Family Residence")]
      SingleFamilyResidenceEnum = 1,

      /// <summary>
      /// Enum PUDEnum for PUD
      /// </summary>
      [EnumMember(Value = "PUD")]
      PUDEnum = 2,

      /// <summary>
      /// Enum TownhouseRowhouseEnum for Townhouse/Rowhouse
      /// </summary>
      [EnumMember(Value = "Townhouse/Rowhouse")]
      TownhouseRowhouseEnum = 3,

      /// <summary>
      /// Enum ManufacturedHomeEnum for Manufactured Home
      /// </summary>
      [EnumMember(Value = "Manufactured Home")]
      ManufacturedHomeEnum = 4,

      /// <summary>
      /// Enum MobileHomeEnum for Mobile Home
      /// </summary>
      [EnumMember(Value = "Mobile Home")]
      MobileHomeEnum = 5,

      /// <summary>
      /// Enum CabinEnum for Cabin
      /// </summary>
      [EnumMember(Value = "Cabin")]
      CabinEnum = 6,

      /// <summary>
      /// Enum CondominiumEnum for Condominium
      /// </summary>
      [EnumMember(Value = "Condominium")]
      CondominiumEnum = 7,

      /// <summary>
      /// Enum CondotelEnum for Condotel
      /// </summary>
      [EnumMember(Value = "Condotel")]
      CondotelEnum = 8,

      /// <summary>
      /// Enum HighRiseCondoEnum for High Rise Condo
      /// </summary>
      [EnumMember(Value = "High Rise Condo")]
      HighRiseCondoEnum = 9,

      /// <summary>
      /// Enum MidRiseCondoEnum for Mid Rise Condo
      /// </summary>
      [EnumMember(Value = "Mid Rise Condo")]
      MidRiseCondoEnum = 10,

      /// <summary>
      /// Enum CondominiumProjectEnum for Condominium Project
      /// </summary>
      [EnumMember(Value = "Condominium Project")]
      CondominiumProjectEnum = 11,

      /// <summary>
      /// Enum CommonAreaEnum for Common Area
      /// </summary>
      [EnumMember(Value = "Common Area")]
      CommonAreaEnum = 12,

      /// <summary>
      /// Enum DuplexEnum for Duplex
      /// </summary>
      [EnumMember(Value = "Duplex")]
      DuplexEnum = 13,

      /// <summary>
      /// Enum TriplexEnum for Triplex
      /// </summary>
      [EnumMember(Value = "Triplex")]
      TriplexEnum = 14,

      /// <summary>
      /// Enum QuadruplexEnum for Quadruplex
      /// </summary>
      [EnumMember(Value = "Quadruplex")]
      QuadruplexEnum = 15,

      /// <summary>
      /// Enum MultiFamilyDwellingEnum for Multi Family Dwelling
      /// </summary>
      [EnumMember(Value = "Multi Family Dwelling")]
      MultiFamilyDwellingEnum = 16,

      /// <summary>
      /// Enum ApartmentEnum for Apartment
      /// </summary>
      [EnumMember(Value = "Apartment")]
      ApartmentEnum = 17,

      /// <summary>
      /// Enum MultiFamily10UnitsLessEnum for Multi Family 10 Units Less
      /// </summary>
      [EnumMember(Value = "Multi Family 10 Units Less")]
      MultiFamily10UnitsLessEnum = 18,

      /// <summary>
      /// Enum MultiFamily10UnitsPlusEnum for Multi Family 10 Units Plus
      /// </summary>
      [EnumMember(Value = "Multi Family 10 Units Plus")]
      MultiFamily10UnitsPlusEnum = 19,

      /// <summary>
      /// Enum MixedComplexEnum for Mixed Complex
      /// </summary>
      [EnumMember(Value = "Mixed Complex")]
      MixedComplexEnum = 20,

      /// <summary>
      /// Enum ResidenceHallDormitoriesEnum for Residence Hall/Dormitories
      /// </summary>
      [EnumMember(Value = "Residence Hall/Dormitories")]
      ResidenceHallDormitoriesEnum = 21,

      /// <summary>
      /// Enum GroupQuartersEnum for Group Quarters
      /// </summary>
      [EnumMember(Value = "Group Quarters")]
      GroupQuartersEnum = 22,

      /// <summary>
      /// Enum CooperativeEnum for Cooperative
      /// </summary>
      [EnumMember(Value = "Cooperative")]
      CooperativeEnum = 23,

      /// <summary>
      /// Enum MiscellaneousResidentialEnum for Miscellaneous Residential
      /// </summary>
      [EnumMember(Value = "Miscellaneous Residential")]
      MiscellaneousResidentialEnum = 24,

      /// <summary>
      /// Enum TimeShareEnum for Time Share
      /// </summary>
      [EnumMember(Value = "Time Share")]
      TimeShareEnum = 25,

      /// <summary>
      /// Enum TimeShareCondoEnum for Time Share Condo
      /// </summary>
      [EnumMember(Value = "Time Share Condo")]
      TimeShareCondoEnum = 26,

      /// <summary>
      /// Enum AirRightsEnum for Air Rights
      /// </summary>
      [EnumMember(Value = "Air Rights")]
      AirRightsEnum = 27,

      /// <summary>
      /// Enum AnimalHospitalVetEnum for Animal Hospital/Vet
      /// </summary>
      [EnumMember(Value = "Animal Hospital/Vet")]
      AnimalHospitalVetEnum = 28,

      /// <summary>
      /// Enum ApartmentHotelEnum for Apartment/Hotel
      /// </summary>
      [EnumMember(Value = "Apartment/Hotel")]
      ApartmentHotelEnum = 29,

      /// <summary>
      /// Enum ApparelEnum for Apparel
      /// </summary>
      [EnumMember(Value = "Apparel")]
      ApparelEnum = 30,

      /// <summary>
      /// Enum AutoEquipmentEnum for Auto Equipment
      /// </summary>
      [EnumMember(Value = "Auto Equipment")]
      AutoEquipmentEnum = 31,

      /// <summary>
      /// Enum AutoRepairEnum for Auto Repair
      /// </summary>
      [EnumMember(Value = "Auto Repair")]
      AutoRepairEnum = 32,

      /// <summary>
      /// Enum AutoSalesEnum for Auto Sales
      /// </summary>
      [EnumMember(Value = "Auto Sales")]
      AutoSalesEnum = 33,

      /// <summary>
      /// Enum AutoWreckingEnum for Auto Wrecking
      /// </summary>
      [EnumMember(Value = "Auto Wrecking")]
      AutoWreckingEnum = 34,

      /// <summary>
      /// Enum BarEnum for Bar
      /// </summary>
      [EnumMember(Value = "Bar")]
      BarEnum = 35,

      /// <summary>
      /// Enum BusinessParkEnum for Business Park
      /// </summary>
      [EnumMember(Value = "Business Park")]
      BusinessParkEnum = 36,

      /// <summary>
      /// Enum CarwashEnum for Carwash
      /// </summary>
      [EnumMember(Value = "Carwash")]
      CarwashEnum = 37,

      /// <summary>
      /// Enum CemeteryEnum for Cemetery
      /// </summary>
      [EnumMember(Value = "Cemetery")]
      CemeteryEnum = 38,

      /// <summary>
      /// Enum CommercialBuildingEnum for Commercial Building
      /// </summary>
      [EnumMember(Value = "Commercial Building")]
      CommercialBuildingEnum = 39,

      /// <summary>
      /// Enum CommercialCondominiumEnum for Commercial Condominium
      /// </summary>
      [EnumMember(Value = "Commercial Condominium")]
      CommercialCondominiumEnum = 40,

      /// <summary>
      /// Enum ConvalescentHospitalEnum for Convalescent Hospital
      /// </summary>
      [EnumMember(Value = "Convalescent Hospital")]
      ConvalescentHospitalEnum = 41,

      /// <summary>
      /// Enum ConventionCenterEnum for Convention Center
      /// </summary>
      [EnumMember(Value = "Convention Center")]
      ConventionCenterEnum = 42,

      /// <summary>
      /// Enum ConvertedResidenceEnum for Converted Residence
      /// </summary>
      [EnumMember(Value = "Converted Residence")]
      ConvertedResidenceEnum = 43,

      /// <summary>
      /// Enum DepartmentStoreEnum for Department Store
      /// </summary>
      [EnumMember(Value = "Department Store")]
      DepartmentStoreEnum = 44,

      /// <summary>
      /// Enum FacilitiesEnum for Facilities
      /// </summary>
      [EnumMember(Value = "Facilities")]
      FacilitiesEnum = 45,

      /// <summary>
      /// Enum FastFoodFranchiseEnum for Fast Food Franchise
      /// </summary>
      [EnumMember(Value = "Fast Food Franchise")]
      FastFoodFranchiseEnum = 46,

      /// <summary>
      /// Enum FinInsuranceRealEstateEnum for Fin/Insurance/Real Estate
      /// </summary>
      [EnumMember(Value = "Fin/Insurance/Real Estate")]
      FinInsuranceRealEstateEnum = 47,

      /// <summary>
      /// Enum FinancialBuildingEnum for Financial Building
      /// </summary>
      [EnumMember(Value = "Financial Building")]
      FinancialBuildingEnum = 48,

      /// <summary>
      /// Enum FoodStoresEnum for Food Stores
      /// </summary>
      [EnumMember(Value = "Food Stores")]
      FoodStoresEnum = 49,

      /// <summary>
      /// Enum FuneralHomeEnum for Funeral Home
      /// </summary>
      [EnumMember(Value = "Funeral Home")]
      FuneralHomeEnum = 50,

      /// <summary>
      /// Enum GarageEnum for Garage
      /// </summary>
      [EnumMember(Value = "Garage")]
      GarageEnum = 51,

      /// <summary>
      /// Enum HospitalEnum for Hospital
      /// </summary>
      [EnumMember(Value = "Hospital")]
      HospitalEnum = 52,

      /// <summary>
      /// Enum HotelEnum for Hotel
      /// </summary>
      [EnumMember(Value = "Hotel")]
      HotelEnum = 53,

      /// <summary>
      /// Enum KennelEnum for Kennel
      /// </summary>
      [EnumMember(Value = "Kennel")]
      KennelEnum = 54,

      /// <summary>
      /// Enum LaboratoryEnum for Laboratory
      /// </summary>
      [EnumMember(Value = "Laboratory")]
      LaboratoryEnum = 55,

      /// <summary>
      /// Enum LaundromatEnum for Laundromat
      /// </summary>
      [EnumMember(Value = "Laundromat")]
      LaundromatEnum = 56,

      /// <summary>
      /// Enum LeasedLandBldgEnum for Leased Land/Bldg
      /// </summary>
      [EnumMember(Value = "Leased Land/Bldg")]
      LeasedLandBldgEnum = 57,

      /// <summary>
      /// Enum MedicalBuildingEnum for Medical Building
      /// </summary>
      [EnumMember(Value = "Medical Building")]
      MedicalBuildingEnum = 58,

      /// <summary>
      /// Enum MedicalCondoEnum for Medical Condo
      /// </summary>
      [EnumMember(Value = "Medical Condo")]
      MedicalCondoEnum = 59,

      /// <summary>
      /// Enum MiscBuildingEnum for Misc Building
      /// </summary>
      [EnumMember(Value = "Misc Building")]
      MiscBuildingEnum = 60,

      /// <summary>
      /// Enum MiscellaneousCommercialEnum for Miscellaneous Commercial
      /// </summary>
      [EnumMember(Value = "Miscellaneous Commercial")]
      MiscellaneousCommercialEnum = 61,

      /// <summary>
      /// Enum MiscCommercialServicesEnum for Misc Commercial Services
      /// </summary>
      [EnumMember(Value = "Misc Commercial Services")]
      MiscCommercialServicesEnum = 62,

      /// <summary>
      /// Enum MiscImprovementsEnum for Misc Improvements
      /// </summary>
      [EnumMember(Value = "Misc Improvements")]
      MiscImprovementsEnum = 63,

      /// <summary>
      /// Enum MobileHomeParkEnum for Mobile Home Park
      /// </summary>
      [EnumMember(Value = "Mobile Home Park")]
      MobileHomeParkEnum = 64,

      /// <summary>
      /// Enum MotelEnum for Motel
      /// </summary>
      [EnumMember(Value = "Motel")]
      MotelEnum = 65,

      /// <summary>
      /// Enum MultipleUsesEnum for Multiple Uses
      /// </summary>
      [EnumMember(Value = "Multiple Uses")]
      MultipleUsesEnum = 66,

      /// <summary>
      /// Enum NightclubEnum for Nightclub
      /// </summary>
      [EnumMember(Value = "Nightclub")]
      NightclubEnum = 67,

      /// <summary>
      /// Enum NursingHomeEnum for Nursing Home
      /// </summary>
      [EnumMember(Value = "Nursing Home")]
      NursingHomeEnum = 68,

      /// <summary>
      /// Enum OfficeResidentialEnum for Office & Residential
      /// </summary>
      [EnumMember(Value = "Office & Residential")]
      OfficeResidentialEnum = 69,

      /// <summary>
      /// Enum OfficeShowroomEnum for Office & Showroom
      /// </summary>
      [EnumMember(Value = "Office & Showroom")]
      OfficeShowroomEnum = 70,

      /// <summary>
      /// Enum OfficeBuildingEnum for Office Building
      /// </summary>
      [EnumMember(Value = "Office Building")]
      OfficeBuildingEnum = 71,

      /// <summary>
      /// Enum OfficeCondoEnum for Office Condo
      /// </summary>
      [EnumMember(Value = "Office Condo")]
      OfficeCondoEnum = 72,

      /// <summary>
      /// Enum OrphanageEnum for Orphanage
      /// </summary>
      [EnumMember(Value = "Orphanage")]
      OrphanageEnum = 73,

      /// <summary>
      /// Enum ParkingLotEnum for Parking Lot
      /// </summary>
      [EnumMember(Value = "Parking Lot")]
      ParkingLotEnum = 74,

      /// <summary>
      /// Enum ParkingStructureEnum for Parking Structure
      /// </summary>
      [EnumMember(Value = "Parking Structure")]
      ParkingStructureEnum = 75,

      /// <summary>
      /// Enum PreFabricatedBldgEnum for Pre Fabricated Bldg
      /// </summary>
      [EnumMember(Value = "Pre Fabricated Bldg")]
      PreFabricatedBldgEnum = 76,

      /// <summary>
      /// Enum ProduceMarketEnum for Produce Market
      /// </summary>
      [EnumMember(Value = "Produce Market")]
      ProduceMarketEnum = 77,

      /// <summary>
      /// Enum RadioFacilityEnum for Radio Facility
      /// </summary>
      [EnumMember(Value = "Radio Facility")]
      RadioFacilityEnum = 78,

      /// <summary>
      /// Enum RecordingStudioEnum for Recording Studio
      /// </summary>
      [EnumMember(Value = "Recording Studio")]
      RecordingStudioEnum = 79,

      /// <summary>
      /// Enum ResortHotelEnum for Resort Hotel
      /// </summary>
      [EnumMember(Value = "Resort Hotel")]
      ResortHotelEnum = 80,

      /// <summary>
      /// Enum RestaurantBuildingEnum for Restaurant Building
      /// </summary>
      [EnumMember(Value = "Restaurant Building")]
      RestaurantBuildingEnum = 81,

      /// <summary>
      /// Enum RestaurantDriveInEnum for Restaurant Drive In
      /// </summary>
      [EnumMember(Value = "Restaurant Drive In")]
      RestaurantDriveInEnum = 82,

      /// <summary>
      /// Enum RetailTradeEnum for Retail Trade
      /// </summary>
      [EnumMember(Value = "Retail Trade")]
      RetailTradeEnum = 83,

      /// <summary>
      /// Enum SalvageImprvEnum for Salvage Imprv
      /// </summary>
      [EnumMember(Value = "Salvage Imprv")]
      SalvageImprvEnum = 84,

      /// <summary>
      /// Enum ServiceStationEnum for Service Station
      /// </summary>
      [EnumMember(Value = "Service Station")]
      ServiceStationEnum = 85,

      /// <summary>
      /// Enum ServiceStationMarketEnum for Service Station/Market
      /// </summary>
      [EnumMember(Value = "Service Station/Market")]
      ServiceStationMarketEnum = 86,

      /// <summary>
      /// Enum ShoppingCenterEnum for Shopping Center
      /// </summary>
      [EnumMember(Value = "Shopping Center")]
      ShoppingCenterEnum = 87,

      /// <summary>
      /// Enum StoreBuildingEnum for Store Building
      /// </summary>
      [EnumMember(Value = "Store Building")]
      StoreBuildingEnum = 88,

      /// <summary>
      /// Enum StoreFranchiseEnum for Store Franchise
      /// </summary>
      [EnumMember(Value = "Store Franchise")]
      StoreFranchiseEnum = 89,

      /// <summary>
      /// Enum StoresOfficesEnum for Stores & Offices
      /// </summary>
      [EnumMember(Value = "Stores & Offices")]
      StoresOfficesEnum = 90,

      /// <summary>
      /// Enum StoresResidentialEnum for Stores & Residential
      /// </summary>
      [EnumMember(Value = "Stores & Residential")]
      StoresResidentialEnum = 91,

      /// <summary>
      /// Enum StripCommercialCenterEnum for Strip Commercial Center
      /// </summary>
      [EnumMember(Value = "Strip Commercial Center")]
      StripCommercialCenterEnum = 92,

      /// <summary>
      /// Enum SupermarketEnum for Supermarket
      /// </summary>
      [EnumMember(Value = "Supermarket")]
      SupermarketEnum = 93,

      /// <summary>
      /// Enum TavernEnum for Tavern
      /// </summary>
      [EnumMember(Value = "Tavern")]
      TavernEnum = 94,

      /// <summary>
      /// Enum TransientLodgingEnum for Transient Lodging
      /// </summary>
      [EnumMember(Value = "Transient Lodging")]
      TransientLodgingEnum = 95,

      /// <summary>
      /// Enum WholesaleEnum for Wholesale
      /// </summary>
      [EnumMember(Value = "Wholesale")]
      WholesaleEnum = 96,

      /// <summary>
      /// Enum BreweryEnum for Brewery
      /// </summary>
      [EnumMember(Value = "Brewery")]
      BreweryEnum = 97,

      /// <summary>
      /// Enum BulkPlantEnum for Bulk Plant
      /// </summary>
      [EnumMember(Value = "Bulk Plant")]
      BulkPlantEnum = 98,

      /// <summary>
      /// Enum CanneryEnum for Cannery
      /// </summary>
      [EnumMember(Value = "Cannery")]
      CanneryEnum = 99,

      /// <summary>
      /// Enum ChemicalEnum for Chemical
      /// </summary>
      [EnumMember(Value = "Chemical")]
      ChemicalEnum = 100,

      /// <summary>
      /// Enum CommercialIndustrialEnum for Commercial/Industrial
      /// </summary>
      [EnumMember(Value = "Commercial/Industrial")]
      CommercialIndustrialEnum = 101,

      /// <summary>
      /// Enum DumpSiteEnum for Dump Site
      /// </summary>
      [EnumMember(Value = "Dump Site")]
      DumpSiteEnum = 102,

      /// <summary>
      /// Enum DurableGoodsEnum for Durable Goods
      /// </summary>
      [EnumMember(Value = "Durable Goods")]
      DurableGoodsEnum = 103,

      /// <summary>
      /// Enum FoodProcessingEnum for Food Processing
      /// </summary>
      [EnumMember(Value = "Food Processing")]
      FoodProcessingEnum = 104,

      /// <summary>
      /// Enum GrainElevatorEnum for Grain Elevator
      /// </summary>
      [EnumMember(Value = "Grain Elevator")]
      GrainElevatorEnum = 105,

      /// <summary>
      /// Enum HeavyIndustrialEnum for Heavy Industrial
      /// </summary>
      [EnumMember(Value = "Heavy Industrial")]
      HeavyIndustrialEnum = 106,

      /// <summary>
      /// Enum IndustrialCondominiumEnum for Industrial Condominium
      /// </summary>
      [EnumMember(Value = "Industrial Condominium")]
      IndustrialCondominiumEnum = 107,

      /// <summary>
      /// Enum IndustrialParkEnum for Industrial Park
      /// </summary>
      [EnumMember(Value = "Industrial Park")]
      IndustrialParkEnum = 108,

      /// <summary>
      /// Enum IndustrialPlantEnum for Industrial Plant
      /// </summary>
      [EnumMember(Value = "Industrial Plant")]
      IndustrialPlantEnum = 109,

      /// <summary>
      /// Enum LightIndustrialEnum for Light Industrial
      /// </summary>
      [EnumMember(Value = "Light Industrial")]
      LightIndustrialEnum = 110,

      /// <summary>
      /// Enum LoftBuildingEnum for Loft Building
      /// </summary>
      [EnumMember(Value = "Loft Building")]
      LoftBuildingEnum = 111,

      /// <summary>
      /// Enum LumberMillEnum for Lumber Mill
      /// </summary>
      [EnumMember(Value = "Lumber Mill")]
      LumberMillEnum = 112,

      /// <summary>
      /// Enum LumberYardEnum for Lumber Yard
      /// </summary>
      [EnumMember(Value = "Lumber Yard")]
      LumberYardEnum = 113,

      /// <summary>
      /// Enum MetalProductEnum for Metal Product
      /// </summary>
      [EnumMember(Value = "Metal Product")]
      MetalProductEnum = 114,

      /// <summary>
      /// Enum MineQuarryEnum for Mine/Quarry
      /// </summary>
      [EnumMember(Value = "Mine/Quarry")]
      MineQuarryEnum = 115,

      /// <summary>
      /// Enum MineralProcessingEnum for Mineral Processing
      /// </summary>
      [EnumMember(Value = "Mineral Processing")]
      MineralProcessingEnum = 116,

      /// <summary>
      /// Enum MineralRightsEnum for Mineral Rights
      /// </summary>
      [EnumMember(Value = "Mineral Rights")]
      MineralRightsEnum = 117,

      /// <summary>
      /// Enum MiniWarehouseEnum for Mini Warehouse
      /// </summary>
      [EnumMember(Value = "Mini Warehouse")]
      MiniWarehouseEnum = 118,

      /// <summary>
      /// Enum MiscellaneousIndustrialEnum for Miscellaneous Industrial
      /// </summary>
      [EnumMember(Value = "Miscellaneous Industrial")]
      MiscellaneousIndustrialEnum = 119,

      /// <summary>
      /// Enum MultiTenantIndustrialEnum for Multi Tenant Industrial
      /// </summary>
      [EnumMember(Value = "Multi Tenant Industrial")]
      MultiTenantIndustrialEnum = 120,

      /// <summary>
      /// Enum NonDurableGoodsEnum for Non Durable Goods
      /// </summary>
      [EnumMember(Value = "Non Durable Goods")]
      NonDurableGoodsEnum = 121,

      /// <summary>
      /// Enum PackingEnum for Packing
      /// </summary>
      [EnumMember(Value = "Packing")]
      PackingEnum = 122,

      /// <summary>
      /// Enum PaperAlliedIndustryEnum for Paper & Allied Industry
      /// </summary>
      [EnumMember(Value = "Paper & Allied Industry")]
      PaperAlliedIndustryEnum = 123,

      /// <summary>
      /// Enum PetroleumEnum for Petroleum
      /// </summary>
      [EnumMember(Value = "Petroleum")]
      PetroleumEnum = 124,

      /// <summary>
      /// Enum PublicStorageEnum for Public Storage
      /// </summary>
      [EnumMember(Value = "Public Storage")]
      PublicStorageEnum = 125,

      /// <summary>
      /// Enum RDFacilityEnum for R&D Facility
      /// </summary>
      [EnumMember(Value = "R&D Facility")]
      RDFacilityEnum = 126,

      /// <summary>
      /// Enum ShipyardEnum for Shipyard
      /// </summary>
      [EnumMember(Value = "Shipyard")]
      ShipyardEnum = 127,

      /// <summary>
      /// Enum StockyardEnum for Stockyard
      /// </summary>
      [EnumMember(Value = "Stockyard")]
      StockyardEnum = 128,

      /// <summary>
      /// Enum StorageEnum for Storage
      /// </summary>
      [EnumMember(Value = "Storage")]
      StorageEnum = 129,

      /// <summary>
      /// Enum StorageTanksEnum for Storage Tanks
      /// </summary>
      [EnumMember(Value = "Storage Tanks")]
      StorageTanksEnum = 130,

      /// <summary>
      /// Enum TechnologicalIndustryEnum for Technological Industry
      /// </summary>
      [EnumMember(Value = "Technological Industry")]
      TechnologicalIndustryEnum = 131,

      /// <summary>
      /// Enum TextileClothesCarpetIndustEnum for Textile/Clothes/Carpet Indust
      /// </summary>
      [EnumMember(Value = "Textile/Clothes/Carpet Indust")]
      TextileClothesCarpetIndustEnum = 132,

      /// <summary>
      /// Enum WarehouseEnum for Warehouse
      /// </summary>
      [EnumMember(Value = "Warehouse")]
      WarehouseEnum = 133,

      /// <summary>
      /// Enum WellGasOilEnum for Well/Gas/Oil
      /// </summary>
      [EnumMember(Value = "Well/Gas/Oil")]
      WellGasOilEnum = 134,

      /// <summary>
      /// Enum WineryEnum for Winery
      /// </summary>
      [EnumMember(Value = "Winery")]
      WineryEnum = 135,

      /// <summary>
      /// Enum AgriculturalPlantEnum for Agricultural Plant
      /// </summary>
      [EnumMember(Value = "Agricultural Plant")]
      AgriculturalPlantEnum = 136,

      /// <summary>
      /// Enum AnimalFarmEnum for Animal Farm
      /// </summary>
      [EnumMember(Value = "Animal Farm")]
      AnimalFarmEnum = 137,

      /// <summary>
      /// Enum AvocadoGroveEnum for Avocado Grove
      /// </summary>
      [EnumMember(Value = "Avocado Grove")]
      AvocadoGroveEnum = 138,

      /// <summary>
      /// Enum CitrusGroveEnum for Citrus Grove
      /// </summary>
      [EnumMember(Value = "Citrus Grove")]
      CitrusGroveEnum = 139,

      /// <summary>
      /// Enum DairyFarmEnum for Dairy Farm
      /// </summary>
      [EnumMember(Value = "Dairy Farm")]
      DairyFarmEnum = 140,

      /// <summary>
      /// Enum FallowLandEnum for Fallow Land
      /// </summary>
      [EnumMember(Value = "Fallow Land")]
      FallowLandEnum = 141,

      /// <summary>
      /// Enum FarmsEnum for Farms
      /// </summary>
      [EnumMember(Value = "Farms")]
      FarmsEnum = 142,

      /// <summary>
      /// Enum FieldSeedEnum for Field & Seed
      /// </summary>
      [EnumMember(Value = "Field & Seed")]
      FieldSeedEnum = 143,

      /// <summary>
      /// Enum FisheriesEnum for Fisheries
      /// </summary>
      [EnumMember(Value = "Fisheries")]
      FisheriesEnum = 144,

      /// <summary>
      /// Enum ForestEnum for Forest
      /// </summary>
      [EnumMember(Value = "Forest")]
      ForestEnum = 145,

      /// <summary>
      /// Enum GreenhouseEnum for Greenhouse
      /// </summary>
      [EnumMember(Value = "Greenhouse")]
      GreenhouseEnum = 146,

      /// <summary>
      /// Enum LivestockEnum for Livestock
      /// </summary>
      [EnumMember(Value = "Livestock")]
      LivestockEnum = 147,

      /// <summary>
      /// Enum MiscellaneousAgriculturalEnum for Miscellaneous Agricultural
      /// </summary>
      [EnumMember(Value = "Miscellaneous Agricultural")]
      MiscellaneousAgriculturalEnum = 148,

      /// <summary>
      /// Enum NurseryHorticultureEnum for Nursery/Horticulture
      /// </summary>
      [EnumMember(Value = "Nursery/Horticulture")]
      NurseryHorticultureEnum = 149,

      /// <summary>
      /// Enum OrchardEnum for Orchard
      /// </summary>
      [EnumMember(Value = "Orchard")]
      OrchardEnum = 150,

      /// <summary>
      /// Enum PastureEnum for Pasture
      /// </summary>
      [EnumMember(Value = "Pasture")]
      PastureEnum = 151,

      /// <summary>
      /// Enum PoultryRanchEnum for Poultry Ranch
      /// </summary>
      [EnumMember(Value = "Poultry Ranch")]
      PoultryRanchEnum = 152,

      /// <summary>
      /// Enum RanchEnum for Ranch
      /// </summary>
      [EnumMember(Value = "Ranch")]
      RanchEnum = 153,

      /// <summary>
      /// Enum TruckCropsEnum for Truck Crops
      /// </summary>
      [EnumMember(Value = "Truck Crops")]
      TruckCropsEnum = 154,

      /// <summary>
      /// Enum VineyardEnum for Vineyard
      /// </summary>
      [EnumMember(Value = "Vineyard")]
      VineyardEnum = 155,

      /// <summary>
      /// Enum CommunityCenterEnum for Community Center
      /// </summary>
      [EnumMember(Value = "Community Center")]
      CommunityCenterEnum = 156,

      /// <summary>
      /// Enum CorrectionalFacilityEnum for Correctional Facility
      /// </summary>
      [EnumMember(Value = "Correctional Facility")]
      CorrectionalFacilityEnum = 157,

      /// <summary>
      /// Enum CountyPropertyEnum for County Property
      /// </summary>
      [EnumMember(Value = "County Property")]
      CountyPropertyEnum = 158,

      /// <summary>
      /// Enum EmbassiesChanceriesEnum for Embassies/Chanceries
      /// </summary>
      [EnumMember(Value = "Embassies/Chanceries")]
      EmbassiesChanceriesEnum = 159,

      /// <summary>
      /// Enum EnterpriseZoneEnum for Enterprise Zone
      /// </summary>
      [EnumMember(Value = "Enterprise Zone")]
      EnterpriseZoneEnum = 160,

      /// <summary>
      /// Enum FederalBuildingEnum for Federal Building
      /// </summary>
      [EnumMember(Value = "Federal Building")]
      FederalBuildingEnum = 161,

      /// <summary>
      /// Enum FederalPropertyEnum for Federal Property
      /// </summary>
      [EnumMember(Value = "Federal Property")]
      FederalPropertyEnum = 162,

      /// <summary>
      /// Enum HistoricalDistrictEnum for Historical District
      /// </summary>
      [EnumMember(Value = "Historical District")]
      HistoricalDistrictEnum = 163,

      /// <summary>
      /// Enum MilitaryBuildingEnum for Military Building
      /// </summary>
      [EnumMember(Value = "Military Building")]
      MilitaryBuildingEnum = 164,

      /// <summary>
      /// Enum MiscellaneousPublicEnum for Miscellaneous Public
      /// </summary>
      [EnumMember(Value = "Miscellaneous Public")]
      MiscellaneousPublicEnum = 165,

      /// <summary>
      /// Enum MunicipalPropertyEnum for Municipal Property
      /// </summary>
      [EnumMember(Value = "Municipal Property")]
      MunicipalPropertyEnum = 166,

      /// <summary>
      /// Enum PoliceFireCivilDefenseEnum for Police/Fire/Civil Defense
      /// </summary>
      [EnumMember(Value = "Police/Fire/Civil Defense")]
      PoliceFireCivilDefenseEnum = 167,

      /// <summary>
      /// Enum PossessoryInterestEnum for Possessory Interest
      /// </summary>
      [EnumMember(Value = "Possessory Interest")]
      PossessoryInterestEnum = 168,

      /// <summary>
      /// Enum StatePropertyEnum for State Property
      /// </summary>
      [EnumMember(Value = "State Property")]
      StatePropertyEnum = 169,

      /// <summary>
      /// Enum TaxAbatementEnum for Tax Abatement
      /// </summary>
      [EnumMember(Value = "Tax Abatement")]
      TaxAbatementEnum = 170,

      /// <summary>
      /// Enum TaxExemptEnum for Tax Exempt
      /// </summary>
      [EnumMember(Value = "Tax Exempt")]
      TaxExemptEnum = 171,

      /// <summary>
      /// Enum UsPostalServiceEnum for Us Postal Service
      /// </summary>
      [EnumMember(Value = "Us Postal Service")]
      UsPostalServiceEnum = 172,

      /// <summary>
      /// Enum AmphitheatreEnum for Amphitheatre
      /// </summary>
      [EnumMember(Value = "Amphitheatre")]
      AmphitheatreEnum = 173,

      /// <summary>
      /// Enum AmusementArcadeEnum for Amusement Arcade
      /// </summary>
      [EnumMember(Value = "Amusement Arcade")]
      AmusementArcadeEnum = 174,

      /// <summary>
      /// Enum AmusementParkEnum for Amusement Park
      /// </summary>
      [EnumMember(Value = "Amusement Park")]
      AmusementParkEnum = 175,

      /// <summary>
      /// Enum AuditoriumEnum for Auditorium
      /// </summary>
      [EnumMember(Value = "Auditorium")]
      AuditoriumEnum = 176,

      /// <summary>
      /// Enum BilliardHallEnum for Billiard Hall
      /// </summary>
      [EnumMember(Value = "Billiard Hall")]
      BilliardHallEnum = 177,

      /// <summary>
      /// Enum BowlingAlleyEnum for Bowling Alley
      /// </summary>
      [EnumMember(Value = "Bowling Alley")]
      BowlingAlleyEnum = 178,

      /// <summary>
      /// Enum CasinoEnum for Casino
      /// </summary>
      [EnumMember(Value = "Casino")]
      CasinoEnum = 179,

      /// <summary>
      /// Enum ClubEnum for Club
      /// </summary>
      [EnumMember(Value = "Club")]
      ClubEnum = 180,

      /// <summary>
      /// Enum CountryClubEnum for Country Club
      /// </summary>
      [EnumMember(Value = "Country Club")]
      CountryClubEnum = 181,

      /// <summary>
      /// Enum DanceHallEnum for Dance Hall
      /// </summary>
      [EnumMember(Value = "Dance Hall")]
      DanceHallEnum = 182,

      /// <summary>
      /// Enum DriveInTheaterEnum for Drive In Theater
      /// </summary>
      [EnumMember(Value = "Drive In Theater")]
      DriveInTheaterEnum = 183,

      /// <summary>
      /// Enum GolfCourseEnum for Golf Course
      /// </summary>
      [EnumMember(Value = "Golf Course")]
      GolfCourseEnum = 184,

      /// <summary>
      /// Enum GolfRangeEnum for Golf Range
      /// </summary>
      [EnumMember(Value = "Golf Range")]
      GolfRangeEnum = 185,

      /// <summary>
      /// Enum GymnasiumEnum for Gymnasium
      /// </summary>
      [EnumMember(Value = "Gymnasium")]
      GymnasiumEnum = 186,

      /// <summary>
      /// Enum HealthClubEnum for Health Club
      /// </summary>
      [EnumMember(Value = "Health Club")]
      HealthClubEnum = 187,

      /// <summary>
      /// Enum LakeRiverBeachEnum for Lake/River/Beach
      /// </summary>
      [EnumMember(Value = "Lake/River/Beach")]
      LakeRiverBeachEnum = 188,

      /// <summary>
      /// Enum LibraryMuseumEnum for Library/Museum
      /// </summary>
      [EnumMember(Value = "Library/Museum")]
      LibraryMuseumEnum = 189,

      /// <summary>
      /// Enum MarinaFacilityEnum for Marina Facility
      /// </summary>
      [EnumMember(Value = "Marina Facility")]
      MarinaFacilityEnum = 190,

      /// <summary>
      /// Enum MiscellaneousRecreationalEnum for Miscellaneous Recreational
      /// </summary>
      [EnumMember(Value = "Miscellaneous Recreational")]
      MiscellaneousRecreationalEnum = 191,

      /// <summary>
      /// Enum NatureFacilityEnum for Nature Facility
      /// </summary>
      [EnumMember(Value = "Nature Facility")]
      NatureFacilityEnum = 192,

      /// <summary>
      /// Enum ParkEnum for Park
      /// </summary>
      [EnumMember(Value = "Park")]
      ParkEnum = 193,

      /// <summary>
      /// Enum RaceTrackEnum for Race Track
      /// </summary>
      [EnumMember(Value = "Race Track")]
      RaceTrackEnum = 194,

      /// <summary>
      /// Enum RacquetCourtEnum for Racquet Court
      /// </summary>
      [EnumMember(Value = "Racquet Court")]
      RacquetCourtEnum = 195,

      /// <summary>
      /// Enum RvParkEnum for Rv Park
      /// </summary>
      [EnumMember(Value = "Rv Park")]
      RvParkEnum = 196,

      /// <summary>
      /// Enum SkatingRinkEnum for Skating Rink
      /// </summary>
      [EnumMember(Value = "Skating Rink")]
      SkatingRinkEnum = 197,

      /// <summary>
      /// Enum StableEnum for Stable
      /// </summary>
      [EnumMember(Value = "Stable")]
      StableEnum = 198,

      /// <summary>
      /// Enum StadiumEnum for Stadium
      /// </summary>
      [EnumMember(Value = "Stadium")]
      StadiumEnum = 199,

      /// <summary>
      /// Enum SwimmingPoolEnum for Swimming Pool
      /// </summary>
      [EnumMember(Value = "Swimming Pool")]
      SwimmingPoolEnum = 200,

      /// <summary>
      /// Enum TennisClubEnum for Tennis Club
      /// </summary>
      [EnumMember(Value = "Tennis Club")]
      TennisClubEnum = 201,

      /// <summary>
      /// Enum TheaterEnum for Theater
      /// </summary>
      [EnumMember(Value = "Theater")]
      TheaterEnum = 202,

      /// <summary>
      /// Enum TouristAttractionExhibitsEnum for Tourist Attraction/Exhibits
      /// </summary>
      [EnumMember(Value = "Tourist Attraction/Exhibits")]
      TouristAttractionExhibitsEnum = 203,

      /// <summary>
      /// Enum ZooEnum for Zoo
      /// </summary>
      [EnumMember(Value = "Zoo")]
      ZooEnum = 204,

      /// <summary>
      /// Enum AircraftFacilityEnum for Aircraft Facility
      /// </summary>
      [EnumMember(Value = "Aircraft Facility")]
      AircraftFacilityEnum = 205,

      /// <summary>
      /// Enum AirportEnum for Airport
      /// </summary>
      [EnumMember(Value = "Airport")]
      AirportEnum = 206,

      /// <summary>
      /// Enum MarineFacilityEnum for Marine Facility
      /// </summary>
      [EnumMember(Value = "Marine Facility")]
      MarineFacilityEnum = 207,

      /// <summary>
      /// Enum MiscellaneousTransportEnum for Miscellaneous Transport
      /// </summary>
      [EnumMember(Value = "Miscellaneous Transport")]
      MiscellaneousTransportEnum = 208,

      /// <summary>
      /// Enum PortHarborEnum for Port/Harbor
      /// </summary>
      [EnumMember(Value = "Port/Harbor")]
      PortHarborEnum = 209,

      /// <summary>
      /// Enum RailroadFacilityEnum for Railroad Facility
      /// </summary>
      [EnumMember(Value = "Railroad Facility")]
      RailroadFacilityEnum = 210,

      /// <summary>
      /// Enum TransportFacilityEnum for Transport Facility
      /// </summary>
      [EnumMember(Value = "Transport Facility")]
      TransportFacilityEnum = 211,

      /// <summary>
      /// Enum TruckTerminalEnum for Truck Terminal
      /// </summary>
      [EnumMember(Value = "Truck Terminal")]
      TruckTerminalEnum = 212,

      /// <summary>
      /// Enum CommunicationFacilityEnum for Communication Facility
      /// </summary>
      [EnumMember(Value = "Communication Facility")]
      CommunicationFacilityEnum = 213,

      /// <summary>
      /// Enum EasementEnum for Easement
      /// </summary>
      [EnumMember(Value = "Easement")]
      EasementEnum = 214,

      /// <summary>
      /// Enum ElectricalFacilityEnum for Electrical Facility
      /// </summary>
      [EnumMember(Value = "Electrical Facility")]
      ElectricalFacilityEnum = 215,

      /// <summary>
      /// Enum GasProductionEnum for Gas Production
      /// </summary>
      [EnumMember(Value = "Gas Production")]
      GasProductionEnum = 216,

      /// <summary>
      /// Enum TelephoneFacilityEnum for Telephone Facility
      /// </summary>
      [EnumMember(Value = "Telephone Facility")]
      TelephoneFacilityEnum = 217,

      /// <summary>
      /// Enum TVFacilityEnum for TV Facility
      /// </summary>
      [EnumMember(Value = "TV Facility")]
      TVFacilityEnum = 218,

      /// <summary>
      /// Enum UtilitiesEnum for Utilities
      /// </summary>
      [EnumMember(Value = "Utilities")]
      UtilitiesEnum = 219,

      /// <summary>
      /// Enum WasteDisposalEnum for Waste Disposal
      /// </summary>
      [EnumMember(Value = "Waste Disposal")]
      WasteDisposalEnum = 220,

      /// <summary>
      /// Enum WellWaterEnum for Well/Water
      /// </summary>
      [EnumMember(Value = "Well/Water")]
      WellWaterEnum = 221,

      /// <summary>
      /// Enum AgriculturalLandEnum for Agricultural Land
      /// </summary>
      [EnumMember(Value = "Agricultural Land")]
      AgriculturalLandEnum = 222,

      /// <summary>
      /// Enum BarrenLandEnum for Barren Land
      /// </summary>
      [EnumMember(Value = "Barren Land")]
      BarrenLandEnum = 223,

      /// <summary>
      /// Enum CommercialAcreageEnum for Commercial Acreage
      /// </summary>
      [EnumMember(Value = "Commercial Acreage")]
      CommercialAcreageEnum = 224,

      /// <summary>
      /// Enum CommercialLotEnum for Commercial Lot
      /// </summary>
      [EnumMember(Value = "Commercial Lot")]
      CommercialLotEnum = 225,

      /// <summary>
      /// Enum CommonLandEnum for Common Land
      /// </summary>
      [EnumMember(Value = "Common Land")]
      CommonLandEnum = 226,

      /// <summary>
      /// Enum DesertEnum for Desert
      /// </summary>
      [EnumMember(Value = "Desert")]
      DesertEnum = 227,

      /// <summary>
      /// Enum GreenbeltEnum for Greenbelt
      /// </summary>
      [EnumMember(Value = "Greenbelt")]
      GreenbeltEnum = 228,

      /// <summary>
      /// Enum IndustrialAcreageEnum for Industrial Acreage
      /// </summary>
      [EnumMember(Value = "Industrial Acreage")]
      IndustrialAcreageEnum = 229,

      /// <summary>
      /// Enum IndustrialLotEnum for Industrial Lot
      /// </summary>
      [EnumMember(Value = "Industrial Lot")]
      IndustrialLotEnum = 230,

      /// <summary>
      /// Enum MarshlandEnum for Marshland
      /// </summary>
      [EnumMember(Value = "Marshland")]
      MarshlandEnum = 231,

      /// <summary>
      /// Enum MiscellaneousVacantLandEnum for Miscellaneous Vacant Land
      /// </summary>
      [EnumMember(Value = "Miscellaneous Vacant Land")]
      MiscellaneousVacantLandEnum = 232,

      /// <summary>
      /// Enum MobileHomeLotEnum for Mobile Home Lot
      /// </summary>
      [EnumMember(Value = "Mobile Home Lot")]
      MobileHomeLotEnum = 233,

      /// <summary>
      /// Enum MountainousLandEnum for Mountainous Land
      /// </summary>
      [EnumMember(Value = "Mountainous Land")]
      MountainousLandEnum = 234,

      /// <summary>
      /// Enum MultiFamilyAcreageEnum for Multi Family Acreage
      /// </summary>
      [EnumMember(Value = "Multi Family Acreage")]
      MultiFamilyAcreageEnum = 235,

      /// <summary>
      /// Enum MultiFamilyLotEnum for Multi Family Lot
      /// </summary>
      [EnumMember(Value = "Multi Family Lot")]
      MultiFamilyLotEnum = 236,

      /// <summary>
      /// Enum NaturalResourcesEnum for Natural Resources
      /// </summary>
      [EnumMember(Value = "Natural Resources")]
      NaturalResourcesEnum = 237,

      /// <summary>
      /// Enum OpenSpaceEnum for Open Space
      /// </summary>
      [EnumMember(Value = "Open Space")]
      OpenSpaceEnum = 238,

      /// <summary>
      /// Enum RecreationalAcreageEnum for Recreational Acreage
      /// </summary>
      [EnumMember(Value = "Recreational Acreage")]
      RecreationalAcreageEnum = 239,

      /// <summary>
      /// Enum ResidentialAcreageEnum for Residential Acreage
      /// </summary>
      [EnumMember(Value = "Residential Acreage")]
      ResidentialAcreageEnum = 240,

      /// <summary>
      /// Enum ResidentialLotEnum for Residential Lot
      /// </summary>
      [EnumMember(Value = "Residential Lot")]
      ResidentialLotEnum = 241,

      /// <summary>
      /// Enum RuralHomesiteEnum for Rural Homesite
      /// </summary>
      [EnumMember(Value = "Rural Homesite")]
      RuralHomesiteEnum = 242,

      /// <summary>
      /// Enum VacantLmtdNoDevPotentialEnum for Vacant Lmtd/No Dev Potential
      /// </summary>
      [EnumMember(Value = "Vacant Lmtd/No Dev Potential")]
      VacantLmtdNoDevPotentialEnum = 243,

      /// <summary>
      /// Enum VacantMobileHomeEnum for Vacant Mobile Home
      /// </summary>
      [EnumMember(Value = "Vacant Mobile Home")]
      VacantMobileHomeEnum = 244,

      /// <summary>
      /// Enum WasteLandEnum for Waste Land
      /// </summary>
      [EnumMember(Value = "Waste Land")]
      WasteLandEnum = 245,

      /// <summary>
      /// Enum WildlifeRefugeEnum for Wildlife Refuge
      /// </summary>
      [EnumMember(Value = "Wildlife Refuge")]
      WildlifeRefugeEnum = 246,

      /// <summary>
      /// Enum ArtEnum for Art
      /// </summary>
      [EnumMember(Value = "Art")]
      ArtEnum = 247,

      /// <summary>
      /// Enum CharitableOrganizationEnum for Charitable Organization
      /// </summary>
      [EnumMember(Value = "Charitable Organization")]
      CharitableOrganizationEnum = 248,

      /// <summary>
      /// Enum EducationalServiceEnum for Educational Service
      /// </summary>
      [EnumMember(Value = "Educational Service")]
      EducationalServiceEnum = 249,

      /// <summary>
      /// Enum FratSororityHouseEnum for Frat/Sorority House
      /// </summary>
      [EnumMember(Value = "Frat/Sorority House")]
      FratSororityHouseEnum = 250,

      /// <summary>
      /// Enum HighSchoolEnum for High School
      /// </summary>
      [EnumMember(Value = "High School")]
      HighSchoolEnum = 251,

      /// <summary>
      /// Enum NativeAmericanPropertyEnum for Native American Property
      /// </summary>
      [EnumMember(Value = "Native American Property")]
      NativeAmericanPropertyEnum = 252,

      /// <summary>
      /// Enum NurserySchoolEnum for Nursery School
      /// </summary>
      [EnumMember(Value = "Nursery School")]
      NurserySchoolEnum = 253,

      /// <summary>
      /// Enum PrivateSchoolEnum for Private School
      /// </summary>
      [EnumMember(Value = "Private School")]
      PrivateSchoolEnum = 254,

      /// <summary>
      /// Enum PublicSchoolEnum for Public School
      /// </summary>
      [EnumMember(Value = "Public School")]
      PublicSchoolEnum = 255,

      /// <summary>
      /// Enum PublicServiceEnum for Public Service
      /// </summary>
      [EnumMember(Value = "Public Service")]
      PublicServiceEnum = 256,

      /// <summary>
      /// Enum ReligiousEnum for Religious
      /// </summary>
      [EnumMember(Value = "Religious")]
      ReligiousEnum = 257,

      /// <summary>
      /// Enum SchoolEnum for School
      /// </summary>
      [EnumMember(Value = "School")]
      SchoolEnum = 258,

      /// <summary>
      /// Enum SecEducationalSchoolEnum for Sec Educational School
      /// </summary>
      [EnumMember(Value = "Sec Educational School")]
      SecEducationalSchoolEnum = 259,

      /// <summary>
      /// Enum UniversityEnum for University
      /// </summary>
      [EnumMember(Value = "University")]
      UniversityEnum = 260,

      /// <summary>
      /// Enum VocationalTradeSchoolEnum for Vocational/Trade School
      /// </summary>
      [EnumMember(Value = "Vocational/Trade School")]
      VocationalTradeSchoolEnum = 261,

      /// <summary>
      /// Enum MiscellaneousRealPropertyEnum for Miscellaneous Real Property
      /// </summary>
      [EnumMember(Value = "Miscellaneous Real Property")]
      MiscellaneousRealPropertyEnum = 262,

      /// <summary>
      /// Enum MiscellaneousEnum for Miscellaneous
      /// </summary>
      [EnumMember(Value = "Miscellaneous")]
      MiscellaneousEnum = 263,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 264
    }

    /// <summary>
    /// Advanced property types, derived and standardized across counties from county Use Codes.
    /// </summary>
    /// <value>Advanced property types, derived and standardized across counties from county Use Codes. </value>
    [DataMember(Name = "AdvancedPropertyType", EmitDefaultValue = false)]
    public AdvancedPropertyTypeEnum AdvancedPropertyType { get; set; }

    /// <summary>
    /// Property type is a combination of two enumerations: **PType** for broad categories and **AdvancedPropertyType** for very specific property types.  You can see how the categories relate by choosing *Click for enumerated values*, below.  You can use one or the other or combine them both.  For instance if you wanted condos but also time shares, your criteria would look like the sample above.Property type is a combination of two enumerations: **PType** for broad categories and **AdvancedPropertyType** for very specific property types.  You can see how the categories relate by choosing *Click for enumerated values*, below.  You can use one or the other or combine them both.  For instance if you wanted condos but also time shares, your criteria would look like the sample above.The standardized description of the properties use or purpose. These are based on land use codes that counties use to group properties of similar types together for tax assessment purposes. These typically represent the current use of the property and may be different than zoning which specifies the allowed use(s) of the property. The actual county land use codes vary between counties and are not user friendly, so we map those codes to this standardized list for your convenience.
    /// </summary>
    /// <value>Property type is a combination of two enumerations: **PType** for broad categories and **AdvancedPropertyType** for very specific property types.  You can see how the categories relate by choosing *Click for enumerated values*, below.  You can use one or the other or combine them both.  For instance if you wanted condos but also time shares, your criteria would look like the sample above.Property type is a combination of two enumerations: **PType** for broad categories and **AdvancedPropertyType** for very specific property types.  You can see how the categories relate by choosing *Click for enumerated values*, below.  You can use one or the other or combine them both.  For instance if you wanted condos but also time shares, your criteria would look like the sample above.The standardized description of the properties use or purpose. These are based on land use codes that counties use to group properties of similar types together for tax assessment purposes. These typically represent the current use of the property and may be different than zoning which specifies the allowed use(s) of the property. The actual county land use codes vary between counties and are not user friendly, so we map those codes to this standardized list for your convenience. </value>
    [DataMember(Name = "PropertyType", EmitDefaultValue = false)]
    public List<GETPropertiesRadarID200ResponseResultsInnerPropertyTypeInner> PropertyType { get; set; }

    /// <summary>
    /// The number of bedrooms in the primary structure.
    /// </summary>
    /// <value>The number of bedrooms in the primary structure. </value>
    [DataMember(Name = "Beds", EmitDefaultValue = false)]
    public int Beds { get; set; }

    /// <summary>
    /// The number of bathrooms in the primary structure (.5 is toilet and sink only, .75 adds shower but no tub).
    /// </summary>
    /// <value>The number of bathrooms in the primary structure (.5 is toilet and sink only, .75 adds shower but no tub). </value>
    [DataMember(Name = "Baths", EmitDefaultValue = false)]
    public string Baths { get; set; }

    /// <summary>
    /// The square footage of the primary structure.
    /// </summary>
    /// <value>The square footage of the primary structure. </value>
    [DataMember(Name = "SqFt", EmitDefaultValue = false)]
    public int SqFt { get; set; }

    /// <summary>
    /// The size of the lot in square feet.
    /// </summary>
    /// <value>The size of the lot in square feet. </value>
    [DataMember(Name = "LotSize", EmitDefaultValue = false)]
    public int LotSize { get; set; }

    /// <summary>
    /// The size of the lot in acres.
    /// </summary>
    /// <value>The size of the lot in acres. </value>
    [DataMember(Name = "LotSizeAcres", EmitDefaultValue = false)]
    public decimal LotSizeAcres { get; set; }

    /// <summary>
    /// The year the property was built. Note that many counties will only have this data for newer properties after whatever date they began tracking it.
    /// </summary>
    /// <value>The year the property was built. Note that many counties will only have this data for newer properties after whatever date they began tracking it. </value>
    [DataMember(Name = "YearBuilt", EmitDefaultValue = false)]
    public string YearBuilt { get; set; }

    /// <summary>
    /// The number of units, if the property contains more than one.
    /// </summary>
    /// <value>The number of units, if the property contains more than one. </value>
    [DataMember(Name = "Units", EmitDefaultValue = false)]
    public int Units { get; set; }

    /// <summary>
    /// The number of rooms in the property.
    /// </summary>
    /// <value>The number of rooms in the property. </value>
    [DataMember(Name = "Rooms", EmitDefaultValue = false)]
    public int Rooms { get; set; }

    /// <summary>
    /// The number of stories the primary structure has.
    /// </summary>
    /// <value>The number of stories the primary structure has. </value>
    [DataMember(Name = "Stories", EmitDefaultValue = false)]
    public int Stories { get; set; }

    /// <summary>
    /// The number of garage spaces.
    /// </summary>
    /// <value>The number of garage spaces. </value>
    [DataMember(Name = "GarageSize", EmitDefaultValue = false)]
    public string GarageSize { get; set; }


    /// <summary>
    /// Whether or not the property has a heating, ventilation, or air conditioning (HVAC) system.
    /// </summary>
    /// <value>Whether or not the property has a heating, ventilation, or air conditioning (HVAC) system. </value>

    public enum HVACEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property has a heating, ventilation, or air conditioning (HVAC) system.
    /// </summary>
    /// <value>Whether or not the property has a heating, ventilation, or air conditioning (HVAC) system. </value>
    [DataMember(Name = "HVAC", EmitDefaultValue = false)]
    public HVACEnum HVAC { get; set; }


    /// <summary>
    /// Whether or not the property has an air conditioning system.
    /// </summary>
    /// <value>Whether or not the property has an air conditioning system. </value>

    public enum AirCondEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property has an air conditioning system.
    /// </summary>
    /// <value>Whether or not the property has an air conditioning system. </value>
    [DataMember(Name = "AirCond", EmitDefaultValue = false)]
    public AirCondEnum AirCond { get; set; }


    /// <summary>
    /// Whether or not the property has a heating system.
    /// </summary>
    /// <value>Whether or not the property has a heating system. </value>

    public enum HeatingEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property has a heating system.
    /// </summary>
    /// <value>Whether or not the property has a heating system. </value>
    [DataMember(Name = "Heating", EmitDefaultValue = false)]
    public HeatingEnum Heating { get; set; }


    /// <summary>
    /// Whether or not the property has a swimming pool.
    /// </summary>
    /// <value>Whether or not the property has a swimming pool. </value>

    public enum PoolEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property has a swimming pool.
    /// </summary>
    /// <value>Whether or not the property has a swimming pool. </value>
    [DataMember(Name = "Pool", EmitDefaultValue = false)]
    public PoolEnum Pool { get; set; }


    /// <summary>
    /// Whether or not the primary structure has a fireplace.
    /// </summary>
    /// <value>Whether or not the primary structure has a fireplace. </value>

    public enum FireplaceEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the primary structure has a fireplace.
    /// </summary>
    /// <value>Whether or not the primary structure has a fireplace. </value>
    [DataMember(Name = "Fireplace", EmitDefaultValue = false)]
    public FireplaceEnum Fireplace { get; set; }


    /// <summary>
    /// The standardized basement type.
    /// </summary>
    /// <value>The standardized basement type. </value>
    [TypeConverter(typeof(CustomEnumConverter<BasementTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BasementTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum ApartmentEnum for Apartment
      /// </summary>
      [EnumMember(Value = "Apartment")]
      ApartmentEnum = 4,

      /// <summary>
      /// Enum FullDaylightEnum for Full Daylight
      /// </summary>
      [EnumMember(Value = "Full Daylight")]
      FullDaylightEnum = 5,

      /// <summary>
      /// Enum FullEnum for Full
      /// </summary>
      [EnumMember(Value = "Full")]
      FullEnum = 6,

      /// <summary>
      /// Enum FullUnfinishedEnum for Full Unfinished
      /// </summary>
      [EnumMember(Value = "Full Unfinished")]
      FullUnfinishedEnum = 7,

      /// <summary>
      /// Enum GarageFinishedEnum for Garage Finished
      /// </summary>
      [EnumMember(Value = "Garage Finished")]
      GarageFinishedEnum = 8,

      /// <summary>
      /// Enum GarageUnfinishedEnum for Garage Unfinished
      /// </summary>
      [EnumMember(Value = "Garage Unfinished")]
      GarageUnfinishedEnum = 9,

      /// <summary>
      /// Enum GarageEnum for Garage
      /// </summary>
      [EnumMember(Value = "Garage")]
      GarageEnum = 10,

      /// <summary>
      /// Enum CellarEnum for Cellar
      /// </summary>
      [EnumMember(Value = "Cellar")]
      CellarEnum = 11,

      /// <summary>
      /// Enum CrawlSpaceEnum for Crawl-Space
      /// </summary>
      [EnumMember(Value = "Crawl-Space")]
      CrawlSpaceEnum = 12,

      /// <summary>
      /// Enum FinishedDaylightEnum for Finished Daylight
      /// </summary>
      [EnumMember(Value = "Finished Daylight")]
      FinishedDaylightEnum = 13,

      /// <summary>
      /// Enum DaylightEnum for Daylight
      /// </summary>
      [EnumMember(Value = "Daylight")]
      DaylightEnum = 14,

      /// <summary>
      /// Enum FinishedEnum for Finished
      /// </summary>
      [EnumMember(Value = "Finished")]
      FinishedEnum = 15,

      /// <summary>
      /// Enum MichiganEnum for Michigan
      /// </summary>
      [EnumMember(Value = "Michigan")]
      MichiganEnum = 16,

      /// <summary>
      /// Enum PartialDaylightEnum for Partial Daylight
      /// </summary>
      [EnumMember(Value = "Partial Daylight")]
      PartialDaylightEnum = 17,

      /// <summary>
      /// Enum PartialFinishedEnum for Partial Finished
      /// </summary>
      [EnumMember(Value = "Partial Finished")]
      PartialFinishedEnum = 18,

      /// <summary>
      /// Enum PartialEnum for Partial
      /// </summary>
      [EnumMember(Value = "Partial")]
      PartialEnum = 19,

      /// <summary>
      /// Enum PartialUnfinishedEnum for Partial Unfinished
      /// </summary>
      [EnumMember(Value = "Partial Unfinished")]
      PartialUnfinishedEnum = 20,

      /// <summary>
      /// Enum SlabEnum for Slab
      /// </summary>
      [EnumMember(Value = "Slab")]
      SlabEnum = 21,

      /// <summary>
      /// Enum UnfinishedDaylightEnum for Unfinished Daylight
      /// </summary>
      [EnumMember(Value = "Unfinished Daylight")]
      UnfinishedDaylightEnum = 22,

      /// <summary>
      /// Enum UnfinishedEnum for Unfinished
      /// </summary>
      [EnumMember(Value = "Unfinished")]
      UnfinishedEnum = 23,

      /// <summary>
      /// Enum WalkOutEnum for Walk Out
      /// </summary>
      [EnumMember(Value = "Walk Out")]
      WalkOutEnum = 24
    }

    /// <summary>
    /// The standardized basement type.
    /// </summary>
    /// <value>The standardized basement type. </value>
    [DataMember(Name = "BasementType", EmitDefaultValue = false)]
    public BasementTypeEnum BasementType { get; set; }


    /// <summary>
    /// The standardized code that identifies the basement's degree of completion.
    /// </summary>
    /// <value>The standardized code that identifies the basement's degree of completion. </value>
    [TypeConverter(typeof(CustomEnumConverter<BasementFinishTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BasementFinishTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum FullEnum for Full
      /// </summary>
      [EnumMember(Value = "Full")]
      FullEnum = 4,

      /// <summary>
      /// Enum CrawlSpaceEnum for Crawl-Space
      /// </summary>
      [EnumMember(Value = "Crawl-Space")]
      CrawlSpaceEnum = 5,

      /// <summary>
      /// Enum BedroomEnum for Bedroom
      /// </summary>
      [EnumMember(Value = "Bedroom")]
      BedroomEnum = 6,

      /// <summary>
      /// Enum BedroomRecreationRoomEnum for Bedroom & Recreation Room
      /// </summary>
      [EnumMember(Value = "Bedroom & Recreation Room")]
      BedroomRecreationRoomEnum = 7,

      /// <summary>
      /// Enum CompletelyFinishedEnum for Completely Finished
      /// </summary>
      [EnumMember(Value = "Completely Finished")]
      CompletelyFinishedEnum = 8,

      /// <summary>
      /// Enum FinishedWithDrywallEnum for Finished with Drywall
      /// </summary>
      [EnumMember(Value = "Finished with Drywall")]
      FinishedWithDrywallEnum = 9,

      /// <summary>
      /// Enum FinishedEnum for Finished
      /// </summary>
      [EnumMember(Value = "Finished")]
      FinishedEnum = 10,

      /// <summary>
      /// Enum FinishedWithPlasterEnum for Finished with Plaster
      /// </summary>
      [EnumMember(Value = "Finished with Plaster")]
      FinishedWithPlasterEnum = 11,

      /// <summary>
      /// Enum FinishedWithPanelEnum for Finished with Panel
      /// </summary>
      [EnumMember(Value = "Finished with Panel")]
      FinishedWithPanelEnum = 12,

      /// <summary>
      /// Enum OfficeEnum for Office
      /// </summary>
      [EnumMember(Value = "Office")]
      OfficeEnum = 13,

      /// <summary>
      /// Enum ParkingEnum for Parking
      /// </summary>
      [EnumMember(Value = "Parking")]
      ParkingEnum = 14,

      /// <summary>
      /// Enum PartiallyFinishedEnum for Partially Finished
      /// </summary>
      [EnumMember(Value = "Partially Finished")]
      PartiallyFinishedEnum = 15,

      /// <summary>
      /// Enum ResidentEnum for Resident
      /// </summary>
      [EnumMember(Value = "Resident")]
      ResidentEnum = 16,

      /// <summary>
      /// Enum RecreationRoomEnum for Recreation Room
      /// </summary>
      [EnumMember(Value = "Recreation Room")]
      RecreationRoomEnum = 17,

      /// <summary>
      /// Enum StorageEnum for Storage
      /// </summary>
      [EnumMember(Value = "Storage")]
      StorageEnum = 18,

      /// <summary>
      /// Enum UnfinishedEnum for Unfinished
      /// </summary>
      [EnumMember(Value = "Unfinished")]
      UnfinishedEnum = 19,

      /// <summary>
      /// Enum UtilityEnum for Utility
      /// </summary>
      [EnumMember(Value = "Utility")]
      UtilityEnum = 20
    }

    /// <summary>
    /// The standardized code that identifies the basement&#39;s degree of completion.
    /// </summary>
    /// <value>The standardized code that identifies the basement&#39;s degree of completion. </value>
    [DataMember(Name = "BasementFinishType", EmitDefaultValue = false)]
    public BasementFinishTypeEnum BasementFinishType { get; set; }

    /// <summary>
    /// This is the total square footage associated with the Basement portion of a building. This would include both finished and unfinished areas.
    /// </summary>
    /// <value>This is the total square footage associated with the Basement portion of a building. This would include both finished and unfinished areas. </value>
    [DataMember(Name = "BasementSqFt", EmitDefaultValue = false)]
    public int BasementSqFt { get; set; }


    /// <summary>
    /// This represents the physical condition of the main improvement (e.g., Good, Fair, Under Construction).
    /// </summary>
    /// <value>This represents the physical condition of the main improvement (e.g., Good, Fair, Under Construction). </value>
    [TypeConverter(typeof(CustomEnumConverter<ImprovementConditionEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ImprovementConditionEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AverageEnum for Average
      /// </summary>
      [EnumMember(Value = "Average")]
      AverageEnum = 4,

      /// <summary>
      /// Enum PhysicalDamageEnum for Physical Damage
      /// </summary>
      [EnumMember(Value = "Physical Damage")]
      PhysicalDamageEnum = 5,

      /// <summary>
      /// Enum ExcellentEnum for Excellent
      /// </summary>
      [EnumMember(Value = "Excellent")]
      ExcellentEnum = 6,

      /// <summary>
      /// Enum FairEnum for Fair
      /// </summary>
      [EnumMember(Value = "Fair")]
      FairEnum = 7,

      /// <summary>
      /// Enum GoodEnum for Good
      /// </summary>
      [EnumMember(Value = "Good")]
      GoodEnum = 8,

      /// <summary>
      /// Enum GoodToExcellentEnum for Good To Excellent
      /// </summary>
      [EnumMember(Value = "Good To Excellent")]
      GoodToExcellentEnum = 9,

      /// <summary>
      /// Enum PoorEnum for Poor
      /// </summary>
      [EnumMember(Value = "Poor")]
      PoorEnum = 10,

      /// <summary>
      /// Enum UnderConstructionEnum for Under Construction
      /// </summary>
      [EnumMember(Value = "Under Construction")]
      UnderConstructionEnum = 11,

      /// <summary>
      /// Enum UnsoundEnum for Unsound
      /// </summary>
      [EnumMember(Value = "Unsound")]
      UnsoundEnum = 12,

      /// <summary>
      /// Enum VeryGoodEnum for Very Good
      /// </summary>
      [EnumMember(Value = "Very Good")]
      VeryGoodEnum = 13
    }

    /// <summary>
    /// This represents the physical condition of the main improvement (e.g., Good, Fair, Under Construction).
    /// </summary>
    /// <value>This represents the physical condition of the main improvement (e.g., Good, Fair, Under Construction). </value>
    [DataMember(Name = "ImprovementCondition", EmitDefaultValue = false)]
    public ImprovementConditionEnum ImprovementCondition { get; set; }


    /// <summary>
    /// Type of construction quality of building (e.g., excellent, economical).
    /// </summary>
    /// <value>Type of construction quality of building (e.g., excellent, economical). </value>
    [TypeConverter(typeof(CustomEnumConverter<BuildingQualityEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BuildingQualityEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AverageEnum for Average
      /// </summary>
      [EnumMember(Value = "Average")]
      AverageEnum = 4,

      /// <summary>
      /// Enum BelowAverageEnum for Below Average
      /// </summary>
      [EnumMember(Value = "Below Average")]
      BelowAverageEnum = 5,

      /// <summary>
      /// Enum EconomicalEnum for Economical
      /// </summary>
      [EnumMember(Value = "Economical")]
      EconomicalEnum = 6,

      /// <summary>
      /// Enum ExcellentEnum for Excellent
      /// </summary>
      [EnumMember(Value = "Excellent")]
      ExcellentEnum = 7,

      /// <summary>
      /// Enum FairEnum for Fair
      /// </summary>
      [EnumMember(Value = "Fair")]
      FairEnum = 8,

      /// <summary>
      /// Enum GoodEnum for Good
      /// </summary>
      [EnumMember(Value = "Good")]
      GoodEnum = 9,

      /// <summary>
      /// Enum LowEnum for Low
      /// </summary>
      [EnumMember(Value = "Low")]
      LowEnum = 10,

      /// <summary>
      /// Enum LuxuryEnum for Luxury
      /// </summary>
      [EnumMember(Value = "Luxury")]
      LuxuryEnum = 11,

      /// <summary>
      /// Enum PoorEnum for Poor
      /// </summary>
      [EnumMember(Value = "Poor")]
      PoorEnum = 12,

      /// <summary>
      /// Enum AboveAverageEnum for Above Average
      /// </summary>
      [EnumMember(Value = "Above Average")]
      AboveAverageEnum = 13
    }

    /// <summary>
    /// Type of construction quality of building (e.g., excellent, economical).
    /// </summary>
    /// <value>Type of construction quality of building (e.g., excellent, economical). </value>
    [DataMember(Name = "BuildingQuality", EmitDefaultValue = false)]
    public BuildingQualityEnum BuildingQuality { get; set; }


    /// <summary>
    /// The primary method of construction (e.g., Steel / Glass, Concrete Block, Log).
    /// </summary>
    /// <value>The primary method of construction (e.g., Steel / Glass, Concrete Block, Log). </value>
    [TypeConverter(typeof(CustomEnumConverter<ConstructionTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ConstructionTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AdobeEnum for Adobe
      /// </summary>
      [EnumMember(Value = "Adobe")]
      AdobeEnum = 4,

      /// <summary>
      /// Enum AFrameEnum for A Frame
      /// </summary>
      [EnumMember(Value = "A Frame")]
      AFrameEnum = 5,

      /// <summary>
      /// Enum AluminumFrameEnum for Aluminum Frame
      /// </summary>
      [EnumMember(Value = "Aluminum Frame")]
      AluminumFrameEnum = 6,

      /// <summary>
      /// Enum AluminumSidingEnum for Aluminum Siding
      /// </summary>
      [EnumMember(Value = "Aluminum Siding")]
      AluminumSidingEnum = 7,

      /// <summary>
      /// Enum AluminumVinylEnum for Aluminum/Vinyl
      /// </summary>
      [EnumMember(Value = "Aluminum/Vinyl")]
      AluminumVinylEnum = 8,

      /// <summary>
      /// Enum ArchedDomeEnum for Arched/Dome
      /// </summary>
      [EnumMember(Value = "Arched/Dome")]
      ArchedDomeEnum = 9,

      /// <summary>
      /// Enum BrickCinderBlockEnum for Brick/Cinder Block
      /// </summary>
      [EnumMember(Value = "Brick/Cinder Block")]
      BrickCinderBlockEnum = 10,

      /// <summary>
      /// Enum BlockBrickEnum for Block/Brick
      /// </summary>
      [EnumMember(Value = "Block/Brick")]
      BlockBrickEnum = 11,

      /// <summary>
      /// Enum BlockMetalEnum for Block/Metal
      /// </summary>
      [EnumMember(Value = "Block/Metal")]
      BlockMetalEnum = 12,

      /// <summary>
      /// Enum BlockSteelEnum for Block/Steel
      /// </summary>
      [EnumMember(Value = "Block/Steel")]
      BlockSteelEnum = 13,

      /// <summary>
      /// Enum BrickConcreteEnum for Brick/Concrete
      /// </summary>
      [EnumMember(Value = "Brick/Concrete")]
      BrickConcreteEnum = 14,

      /// <summary>
      /// Enum BrickFrameEnum for Brick/Frame
      /// </summary>
      [EnumMember(Value = "Brick/Frame")]
      BrickFrameEnum = 15,

      /// <summary>
      /// Enum BrickEnum for Brick
      /// </summary>
      [EnumMember(Value = "Brick")]
      BrickEnum = 16,

      /// <summary>
      /// Enum BrickSteelEnum for Brick/Steel
      /// </summary>
      [EnumMember(Value = "Brick/Steel")]
      BrickSteelEnum = 17,

      /// <summary>
      /// Enum BrickMetalEnum for Brick/Metal
      /// </summary>
      [EnumMember(Value = "Brick/Metal")]
      BrickMetalEnum = 18,

      /// <summary>
      /// Enum BrickStuccoEnum for Brick/Stucco
      /// </summary>
      [EnumMember(Value = "Brick/Stucco")]
      BrickStuccoEnum = 19,

      /// <summary>
      /// Enum BrickStoneEnum for Brick/Stone
      /// </summary>
      [EnumMember(Value = "Brick/Stone")]
      BrickStoneEnum = 20,

      /// <summary>
      /// Enum ConcreteBlockEnum for Concrete Block
      /// </summary>
      [EnumMember(Value = "Concrete Block")]
      ConcreteBlockEnum = 21,

      /// <summary>
      /// Enum ConcreteMasonryEnum for Concrete Masonry
      /// </summary>
      [EnumMember(Value = "Concrete Masonry")]
      ConcreteMasonryEnum = 22,

      /// <summary>
      /// Enum ConcreteSteelEnum for Concrete/Steel
      /// </summary>
      [EnumMember(Value = "Concrete/Steel")]
      ConcreteSteelEnum = 23,

      /// <summary>
      /// Enum ClapboardEnum for Clapboard
      /// </summary>
      [EnumMember(Value = "Clapboard")]
      ClapboardEnum = 24,

      /// <summary>
      /// Enum CinderBlockEnum for Cinder Block
      /// </summary>
      [EnumMember(Value = "Cinder Block")]
      CinderBlockEnum = 25,

      /// <summary>
      /// Enum CombinationEnum for Combination
      /// </summary>
      [EnumMember(Value = "Combination")]
      CombinationEnum = 26,

      /// <summary>
      /// Enum ConcreteEnum for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum = 27,

      /// <summary>
      /// Enum CustomEnum for Custom
      /// </summary>
      [EnumMember(Value = "Custom")]
      CustomEnum = 28,

      /// <summary>
      /// Enum DomeEnum for Dome
      /// </summary>
      [EnumMember(Value = "Dome")]
      DomeEnum = 29,

      /// <summary>
      /// Enum FlexibleFlexicoreEnum for Flexible/Flexicore
      /// </summary>
      [EnumMember(Value = "Flexible/Flexicore")]
      FlexibleFlexicoreEnum = 30,

      /// <summary>
      /// Enum FrameEnum for Frame
      /// </summary>
      [EnumMember(Value = "Frame")]
      FrameEnum = 31,

      /// <summary>
      /// Enum FrameSteelEnum for Frame/Steel
      /// </summary>
      [EnumMember(Value = "Frame/Steel")]
      FrameSteelEnum = 32,

      /// <summary>
      /// Enum FrameMasonryEnum for Frame/Masonry
      /// </summary>
      [EnumMember(Value = "Frame/Masonry")]
      FrameMasonryEnum = 33,

      /// <summary>
      /// Enum FrameStuccoEnum for Frame/Stucco
      /// </summary>
      [EnumMember(Value = "Frame/Stucco")]
      FrameStuccoEnum = 34,

      /// <summary>
      /// Enum GlassEnum for Glass
      /// </summary>
      [EnumMember(Value = "Glass")]
      GlassEnum = 35,

      /// <summary>
      /// Enum HeavyEnum for Heavy
      /// </summary>
      [EnumMember(Value = "Heavy")]
      HeavyEnum = 36,

      /// <summary>
      /// Enum LightEnum for Light
      /// </summary>
      [EnumMember(Value = "Light")]
      LightEnum = 37,

      /// <summary>
      /// Enum LogEnum for Log
      /// </summary>
      [EnumMember(Value = "Log")]
      LogEnum = 38,

      /// <summary>
      /// Enum ManufacturedModularEnum for Manufactured/Modular
      /// </summary>
      [EnumMember(Value = "Manufactured/Modular")]
      ManufacturedModularEnum = 39,

      /// <summary>
      /// Enum MasonryEnum for Masonry
      /// </summary>
      [EnumMember(Value = "Masonry")]
      MasonryEnum = 40,

      /// <summary>
      /// Enum MetalEnum for Metal
      /// </summary>
      [EnumMember(Value = "Metal")]
      MetalEnum = 41,

      /// <summary>
      /// Enum MasonryTiltUpEnum for Masonry Tilt-Up
      /// </summary>
      [EnumMember(Value = "Masonry Tilt-Up")]
      MasonryTiltUpEnum = 42,

      /// <summary>
      /// Enum PoleFrameEnum for Pole Frame
      /// </summary>
      [EnumMember(Value = "Pole Frame")]
      PoleFrameEnum = 43,

      /// <summary>
      /// Enum PrefabMetalEnum for Prefab Metal
      /// </summary>
      [EnumMember(Value = "Prefab Metal")]
      PrefabMetalEnum = 44,

      /// <summary>
      /// Enum SteelMasonryEnum for Steel/Masonry
      /// </summary>
      [EnumMember(Value = "Steel/Masonry")]
      SteelMasonryEnum = 45,

      /// <summary>
      /// Enum StoneRockEnum for Stone/Rock
      /// </summary>
      [EnumMember(Value = "Stone/Rock")]
      StoneRockEnum = 46,

      /// <summary>
      /// Enum SteelEnum for Steel
      /// </summary>
      [EnumMember(Value = "Steel")]
      SteelEnum = 47,

      /// <summary>
      /// Enum SteelStuccoEnum for Steel/Stucco
      /// </summary>
      [EnumMember(Value = "Steel/Stucco")]
      SteelStuccoEnum = 48,

      /// <summary>
      /// Enum StuccoEnum for Stucco
      /// </summary>
      [EnumMember(Value = "Stucco")]
      StuccoEnum = 49,

      /// <summary>
      /// Enum StoneVeneerEnum for Stone Veneer
      /// </summary>
      [EnumMember(Value = "Stone Veneer")]
      StoneVeneerEnum = 50,

      /// <summary>
      /// Enum SteelWoodEnum for Steel/Wood
      /// </summary>
      [EnumMember(Value = "Steel/Wood")]
      SteelWoodEnum = 51,

      /// <summary>
      /// Enum TiltUpBrickMetalEnum for Tilt-Up Brick/Metal
      /// </summary>
      [EnumMember(Value = "Tilt-Up Brick/Metal")]
      TiltUpBrickMetalEnum = 52,

      /// <summary>
      /// Enum TiltUpEnum for Tilt-Up
      /// </summary>
      [EnumMember(Value = "Tilt-Up")]
      TiltUpEnum = 53,

      /// <summary>
      /// Enum TiltUpConcreteEnum for Tilt-Up Concrete
      /// </summary>
      [EnumMember(Value = "Tilt-Up Concrete")]
      TiltUpConcreteEnum = 54,

      /// <summary>
      /// Enum WoodBrickEnum for Wood/Brick
      /// </summary>
      [EnumMember(Value = "Wood/Brick")]
      WoodBrickEnum = 55,

      /// <summary>
      /// Enum WoodFrameConcreteBlockEnum for Wood Frame/Concrete Block
      /// </summary>
      [EnumMember(Value = "Wood Frame/Concrete Block")]
      WoodFrameConcreteBlockEnum = 56,

      /// <summary>
      /// Enum WoodFrameMetalEnum for Wood Frame/Metal
      /// </summary>
      [EnumMember(Value = "Wood Frame/Metal")]
      WoodFrameMetalEnum = 57,

      /// <summary>
      /// Enum WoodEnum for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum = 58,

      /// <summary>
      /// Enum WoodStuccoEnum for Wood/Stucco
      /// </summary>
      [EnumMember(Value = "Wood/Stucco")]
      WoodStuccoEnum = 59,

      /// <summary>
      /// Enum WoodSteelEnum for Wood/Steel
      /// </summary>
      [EnumMember(Value = "Wood/Steel")]
      WoodSteelEnum = 60,

      /// <summary>
      /// Enum WoodStoneEnum for Wood/Stone
      /// </summary>
      [EnumMember(Value = "Wood/Stone")]
      WoodStoneEnum = 61
    }

    /// <summary>
    /// The primary method of construction (e.g., Steel / Glass, Concrete Block, Log).
    /// </summary>
    /// <value>The primary method of construction (e.g., Steel / Glass, Concrete Block, Log). </value>
    [DataMember(Name = "ConstructionType", EmitDefaultValue = false)]
    public ConstructionTypeEnum ConstructionType { get; set; }


    /// <summary>
    /// The type of foundation (e.g., Continuous Footing, Pier, Mud Sill).
    /// </summary>
    /// <value>The type of foundation (e.g., Continuous Footing, Pier, Mud Sill). </value>
    [TypeConverter(typeof(CustomEnumConverter<FoundationTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FoundationTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum BlockEnum for Block
      /// </summary>
      [EnumMember(Value = "Block")]
      BlockEnum = 4,

      /// <summary>
      /// Enum BrickEnum for Brick
      /// </summary>
      [EnumMember(Value = "Brick")]
      BrickEnum = 5,

      /// <summary>
      /// Enum ConcreteBlockEnum for Concrete Block
      /// </summary>
      [EnumMember(Value = "Concrete Block")]
      ConcreteBlockEnum = 6,

      /// <summary>
      /// Enum ContinuousFootingEnum for Continuous Footing
      /// </summary>
      [EnumMember(Value = "Continuous Footing")]
      ContinuousFootingEnum = 7,

      /// <summary>
      /// Enum ContinuousWallEnum for Continuous Wall
      /// </summary>
      [EnumMember(Value = "Continuous Wall")]
      ContinuousWallEnum = 8,

      /// <summary>
      /// Enum ConcreteBeamEnum for Concrete/Beam
      /// </summary>
      [EnumMember(Value = "Concrete/Beam")]
      ConcreteBeamEnum = 9,

      /// <summary>
      /// Enum ConcreteEnum for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum = 10,

      /// <summary>
      /// Enum CrossBridgedWallsEnum for Cross Bridged/Walls
      /// </summary>
      [EnumMember(Value = "Cross Bridged/Walls")]
      CrossBridgedWallsEnum = 11,

      /// <summary>
      /// Enum DirtEarthEnum for Dirt/Earth
      /// </summary>
      [EnumMember(Value = "Dirt/Earth")]
      DirtEarthEnum = 12,

      /// <summary>
      /// Enum GradeBeamEnum for Grade-Beam
      /// </summary>
      [EnumMember(Value = "Grade-Beam")]
      GradeBeamEnum = 13,

      /// <summary>
      /// Enum MasonryEnum for Masonry
      /// </summary>
      [EnumMember(Value = "Masonry")]
      MasonryEnum = 14,

      /// <summary>
      /// Enum MudSillEnum for Mud Sill
      /// </summary>
      [EnumMember(Value = "Mud Sill")]
      MudSillEnum = 15,

      /// <summary>
      /// Enum PilingsEnum for Pilings
      /// </summary>
      [EnumMember(Value = "Pilings")]
      PilingsEnum = 16,

      /// <summary>
      /// Enum PierEnum for Pier
      /// </summary>
      [EnumMember(Value = "Pier")]
      PierEnum = 17,

      /// <summary>
      /// Enum PipeIronEnum for Pipe/Iron
      /// </summary>
      [EnumMember(Value = "Pipe/Iron")]
      PipeIronEnum = 18,

      /// <summary>
      /// Enum PreFabEnum for Pre-Fab
      /// </summary>
      [EnumMember(Value = "Pre-Fab")]
      PreFabEnum = 19,

      /// <summary>
      /// Enum RaisedWBasementEnum for Raised W/Basement
      /// </summary>
      [EnumMember(Value = "Raised W/Basement")]
      RaisedWBasementEnum = 20,

      /// <summary>
      /// Enum RaisedWCrawlspaceEnum for Raised W/Crawlspace
      /// </summary>
      [EnumMember(Value = "Raised W/Crawlspace")]
      RaisedWCrawlspaceEnum = 21,

      /// <summary>
      /// Enum RaisedEnum for Raised
      /// </summary>
      [EnumMember(Value = "Raised")]
      RaisedEnum = 22,

      /// <summary>
      /// Enum SpreadFootingEnum for Spread Footing
      /// </summary>
      [EnumMember(Value = "Spread Footing")]
      SpreadFootingEnum = 23,

      /// <summary>
      /// Enum SlabEnum for Slab
      /// </summary>
      [EnumMember(Value = "Slab")]
      SlabEnum = 24,

      /// <summary>
      /// Enum StandardEnum for Standard
      /// </summary>
      [EnumMember(Value = "Standard")]
      StandardEnum = 25,

      /// <summary>
      /// Enum SteelEnum for Steel
      /// </summary>
      [EnumMember(Value = "Steel")]
      SteelEnum = 26,

      /// <summary>
      /// Enum StemWallEnum for Stem Wall
      /// </summary>
      [EnumMember(Value = "Stem Wall")]
      StemWallEnum = 27,

      /// <summary>
      /// Enum StoneEnum for Stone
      /// </summary>
      [EnumMember(Value = "Stone")]
      StoneEnum = 28,

      /// <summary>
      /// Enum TypeUnknownWithBasementEnum for Type Unknown With Basement
      /// </summary>
      [EnumMember(Value = "Type Unknown With Basement")]
      TypeUnknownWithBasementEnum = 29,

      /// <summary>
      /// Enum TypeUnknownWithCrawlspaceEnum for Type Unknown With Crawlspace
      /// </summary>
      [EnumMember(Value = "Type Unknown With Crawlspace")]
      TypeUnknownWithCrawlspaceEnum = 30,

      /// <summary>
      /// Enum TypeUnknownWithPartBasementEnum for Type Unknown With Part Basement
      /// </summary>
      [EnumMember(Value = "Type Unknown With Part Basement")]
      TypeUnknownWithPartBasementEnum = 31,

      /// <summary>
      /// Enum WoodEnum for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum = 32
    }

    /// <summary>
    /// The type of foundation (e.g., Continuous Footing, Pier, Mud Sill).
    /// </summary>
    /// <value>The type of foundation (e.g., Continuous Footing, Pier, Mud Sill). </value>
    [DataMember(Name = "FoundationType", EmitDefaultValue = false)]
    public FoundationTypeEnum FoundationType { get; set; }


    /// <summary>
    /// The type of wall framing used (e.g., Bar Joist, Reinforced Concrete, Flexicore).
    /// </summary>
    /// <value>The type of wall framing used (e.g., Bar Joist, Reinforced Concrete, Flexicore). </value>
    [TypeConverter(typeof(CustomEnumConverter<FrameTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FrameTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AluminumFrameEnum for Aluminum Frame
      /// </summary>
      [EnumMember(Value = "Aluminum Frame")]
      AluminumFrameEnum = 4,

      /// <summary>
      /// Enum ConcreteSteelEnum for Concrete-Steel
      /// </summary>
      [EnumMember(Value = "Concrete-Steel")]
      ConcreteSteelEnum = 5,

      /// <summary>
      /// Enum ConcreteWoodEnum for Concrete-Wood
      /// </summary>
      [EnumMember(Value = "Concrete-Wood")]
      ConcreteWoodEnum = 6,

      /// <summary>
      /// Enum ConcreteEnum for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum = 7,

      /// <summary>
      /// Enum CustomEnum for Custom
      /// </summary>
      [EnumMember(Value = "Custom")]
      CustomEnum = 8,

      /// <summary>
      /// Enum FireproofEnum for Fireproof
      /// </summary>
      [EnumMember(Value = "Fireproof")]
      FireproofEnum = 9,

      /// <summary>
      /// Enum FireproofSteelEnum for Fireproof Steel
      /// </summary>
      [EnumMember(Value = "Fireproof Steel")]
      FireproofSteelEnum = 10,

      /// <summary>
      /// Enum FireResistantEnum for Fire Resistant
      /// </summary>
      [EnumMember(Value = "Fire Resistant")]
      FireResistantEnum = 11,

      /// <summary>
      /// Enum MasonryEnum for Masonry
      /// </summary>
      [EnumMember(Value = "Masonry")]
      MasonryEnum = 12,

      /// <summary>
      /// Enum MasonrySteelEnum for Masonry-Steel
      /// </summary>
      [EnumMember(Value = "Masonry-Steel")]
      MasonrySteelEnum = 13,

      /// <summary>
      /// Enum PreFabEnum for Pre Fab
      /// </summary>
      [EnumMember(Value = "Pre Fab")]
      PreFabEnum = 14,

      /// <summary>
      /// Enum SteelEnum for Steel
      /// </summary>
      [EnumMember(Value = "Steel")]
      SteelEnum = 15,

      /// <summary>
      /// Enum WoodEnum for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum = 16
    }

    /// <summary>
    /// The type of wall framing used (e.g., Bar Joist, Reinforced Concrete, Flexicore).
    /// </summary>
    /// <value>The type of wall framing used (e.g., Bar Joist, Reinforced Concrete, Flexicore). </value>
    [DataMember(Name = "FrameType", EmitDefaultValue = false)]
    public FrameTypeEnum FrameType { get; set; }


    /// <summary>
    /// The type and/or finish of the exterior walls (e.g., Vinyl Siding, Brick Veneer, Frame / Stone).
    /// </summary>
    /// <value>The type and/or finish of the exterior walls (e.g., Vinyl Siding, Brick Veneer, Frame / Stone). </value>
    [TypeConverter(typeof(CustomEnumConverter<ExteriorWallTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ExteriorWallTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AluminumBlockEnum for Aluminum/Block
      /// </summary>
      [EnumMember(Value = "Aluminum/Block")]
      AluminumBlockEnum = 4,

      /// <summary>
      /// Enum AsbestosBlockPlywoodEnum for Asbestos/Block/Plywood
      /// </summary>
      [EnumMember(Value = "Asbestos/Block/Plywood")]
      AsbestosBlockPlywoodEnum = 5,

      /// <summary>
      /// Enum AsbestosBrickEnum for Asbestos/Brick
      /// </summary>
      [EnumMember(Value = "Asbestos/Brick")]
      AsbestosBrickEnum = 6,

      /// <summary>
      /// Enum AsbestosBrickVeneerWoodEnum for Asbestos/Brick Veneer/Wood
      /// </summary>
      [EnumMember(Value = "Asbestos/Brick Veneer/Wood")]
      AsbestosBrickVeneerWoodEnum = 7,

      /// <summary>
      /// Enum AsbestosBlockWoodEnum for Asbestos/Block/Wood
      /// </summary>
      [EnumMember(Value = "Asbestos/Block/Wood")]
      AsbestosBlockWoodEnum = 8,

      /// <summary>
      /// Enum AdobeBlockEnum for Adobe Block
      /// </summary>
      [EnumMember(Value = "Adobe Block")]
      AdobeBlockEnum = 9,

      /// <summary>
      /// Enum AsphaltFiberglassWoodFrameEnum for Asphalt/Fiberglass/Wood Frame
      /// </summary>
      [EnumMember(Value = "Asphalt/Fiberglass/Wood Frame")]
      AsphaltFiberglassWoodFrameEnum = 10,

      /// <summary>
      /// Enum AluminumBrickEnum for Aluminum/Brick
      /// </summary>
      [EnumMember(Value = "Aluminum/Brick")]
      AluminumBrickEnum = 11,

      /// <summary>
      /// Enum FrameAluminumEnum for Frame/Aluminum
      /// </summary>
      [EnumMember(Value = "Frame/Aluminum")]
      FrameAluminumEnum = 12,

      /// <summary>
      /// Enum AluminumMasoniteEnum for Aluminum/Masonite
      /// </summary>
      [EnumMember(Value = "Aluminum/Masonite")]
      AluminumMasoniteEnum = 13,

      /// <summary>
      /// Enum AluminumStoneEnum for Aluminum/Stone
      /// </summary>
      [EnumMember(Value = "Aluminum/Stone")]
      AluminumStoneEnum = 14,

      /// <summary>
      /// Enum AluminumSidingEnum for Aluminum Siding
      /// </summary>
      [EnumMember(Value = "Aluminum Siding")]
      AluminumSidingEnum = 15,

      /// <summary>
      /// Enum AluminumEnum for Aluminum
      /// </summary>
      [EnumMember(Value = "Aluminum")]
      AluminumEnum = 16,

      /// <summary>
      /// Enum AluminumVinylEnum for Aluminum/Vinyl
      /// </summary>
      [EnumMember(Value = "Aluminum/Vinyl")]
      AluminumVinylEnum = 17,

      /// <summary>
      /// Enum AluminumMetalEnum for Aluminum/Metal
      /// </summary>
      [EnumMember(Value = "Aluminum/Metal")]
      AluminumMetalEnum = 18,

      /// <summary>
      /// Enum AluminumSidingStuccoEnum for Aluminum Siding/Stucco
      /// </summary>
      [EnumMember(Value = "Aluminum Siding/Stucco")]
      AluminumSidingStuccoEnum = 19,

      /// <summary>
      /// Enum AsbestosEnum for Asbestos
      /// </summary>
      [EnumMember(Value = "Asbestos")]
      AsbestosEnum = 20,

      /// <summary>
      /// Enum AsbestosConcreteEnum for Asbestos/Concrete
      /// </summary>
      [EnumMember(Value = "Asbestos/Concrete")]
      AsbestosConcreteEnum = 21,

      /// <summary>
      /// Enum AsphaltSidingEnum for Asphalt Siding
      /// </summary>
      [EnumMember(Value = "Asphalt Siding")]
      AsphaltSidingEnum = 22,

      /// <summary>
      /// Enum AsbestosFrameEnum for Asbestos Frame
      /// </summary>
      [EnumMember(Value = "Asbestos Frame")]
      AsbestosFrameEnum = 23,

      /// <summary>
      /// Enum AsbestosShingleEnum for Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Asbestos Shingle")]
      AsbestosShingleEnum = 24,

      /// <summary>
      /// Enum AsbestosSidingEnum for Asbestos Siding
      /// </summary>
      [EnumMember(Value = "Asbestos Siding")]
      AsbestosSidingEnum = 25,

      /// <summary>
      /// Enum AsbestosBlockEnum for Asbestos/Block
      /// </summary>
      [EnumMember(Value = "Asbestos/Block")]
      AsbestosBlockEnum = 26,

      /// <summary>
      /// Enum AsbestosMasoniteEnum for Asbestos/Masonite
      /// </summary>
      [EnumMember(Value = "Asbestos/Masonite")]
      AsbestosMasoniteEnum = 27,

      /// <summary>
      /// Enum AluminumStuccoEnum for Aluminum/Stucco
      /// </summary>
      [EnumMember(Value = "Aluminum/Stucco")]
      AluminumStuccoEnum = 28,

      /// <summary>
      /// Enum AsbestosPermastoneEnum for Asbestos/Permastone
      /// </summary>
      [EnumMember(Value = "Asbestos/Permastone")]
      AsbestosPermastoneEnum = 29,

      /// <summary>
      /// Enum AsbestosStoneEnum for Asbestos/Stone
      /// </summary>
      [EnumMember(Value = "Asbestos/Stone")]
      AsbestosStoneEnum = 30,

      /// <summary>
      /// Enum AsbestosVinylEnum for Asbestos/Vinyl
      /// </summary>
      [EnumMember(Value = "Asbestos/Vinyl")]
      AsbestosVinylEnum = 31,

      /// <summary>
      /// Enum AsbestosWoodEnum for Asbestos/Wood
      /// </summary>
      [EnumMember(Value = "Asbestos/Wood")]
      AsbestosWoodEnum = 32,

      /// <summary>
      /// Enum AsbestosStoneWoodEnum for Asbestos/Stone/Wood
      /// </summary>
      [EnumMember(Value = "Asbestos/Stone/Wood")]
      AsbestosStoneWoodEnum = 33,

      /// <summary>
      /// Enum BlockAsbestosShingleEnum for Block/Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Block/Asbestos Shingle")]
      BlockAsbestosShingleEnum = 34,

      /// <summary>
      /// Enum BoardBattenEnum for Board & Batten
      /// </summary>
      [EnumMember(Value = "Board & Batten")]
      BoardBattenEnum = 35,

      /// <summary>
      /// Enum BlackBoardEnum for Black-Board
      /// </summary>
      [EnumMember(Value = "Black-Board")]
      BlackBoardEnum = 36,

      /// <summary>
      /// Enum BrickConcreteBlockStuccoEnum for Brick/Concrete Block Stucco
      /// </summary>
      [EnumMember(Value = "Brick/Concrete Block Stucco")]
      BrickConcreteBlockStuccoEnum = 37,

      /// <summary>
      /// Enum BoardBattenWoodFrameEnum for Board & Batten/Wood Frame
      /// </summary>
      [EnumMember(Value = "Board & Batten/Wood Frame")]
      BoardBattenWoodFrameEnum = 38,

      /// <summary>
      /// Enum BrickFrameStoneEnum for Brick Frame/Stone
      /// </summary>
      [EnumMember(Value = "Brick Frame/Stone")]
      BrickFrameStoneEnum = 39,

      /// <summary>
      /// Enum BrickFrameStuccoEnum for Brick/Frame/Stucco
      /// </summary>
      [EnumMember(Value = "Brick/Frame/Stucco")]
      BrickFrameStuccoEnum = 40,

      /// <summary>
      /// Enum BrickFrameVeneerEnum for Brick/Frame/Veneer
      /// </summary>
      [EnumMember(Value = "Brick/Frame/Veneer")]
      BrickFrameVeneerEnum = 41,

      /// <summary>
      /// Enum BrickFrameWoodEnum for Brick/Frame/Wood
      /// </summary>
      [EnumMember(Value = "Brick/Frame/Wood")]
      BrickFrameWoodEnum = 42,

      /// <summary>
      /// Enum BlockBrickEnum for Block/Brick
      /// </summary>
      [EnumMember(Value = "Block/Brick")]
      BlockBrickEnum = 43,

      /// <summary>
      /// Enum FrameBlockEnum for Frame/Block
      /// </summary>
      [EnumMember(Value = "Frame/Block")]
      FrameBlockEnum = 44,

      /// <summary>
      /// Enum BlockMasonryEnum for Block/Masonry
      /// </summary>
      [EnumMember(Value = "Block/Masonry")]
      BlockMasonryEnum = 45,

      /// <summary>
      /// Enum BlockEnum for Block
      /// </summary>
      [EnumMember(Value = "Block")]
      BlockEnum = 46,

      /// <summary>
      /// Enum BlockPaintedEnum for Block Painted
      /// </summary>
      [EnumMember(Value = "Block Painted")]
      BlockPaintedEnum = 47,

      /// <summary>
      /// Enum BlockStoneEnum for Block/Stone
      /// </summary>
      [EnumMember(Value = "Block/Stone")]
      BlockStoneEnum = 48,

      /// <summary>
      /// Enum BlockMetalEnum for Block/Metal
      /// </summary>
      [EnumMember(Value = "Block/Metal")]
      BlockMetalEnum = 49,

      /// <summary>
      /// Enum BlockWoodEnum for Block/Wood
      /// </summary>
      [EnumMember(Value = "Block/Wood")]
      BlockWoodEnum = 50,

      /// <summary>
      /// Enum BrickMetalGlassPanelEnum for Brick/Metal & Glass Panel
      /// </summary>
      [EnumMember(Value = "Brick/Metal & Glass Panel")]
      BrickMetalGlassPanelEnum = 51,

      /// <summary>
      /// Enum BrickMasoniteEnum for Brick/Masonite
      /// </summary>
      [EnumMember(Value = "Brick/Masonite")]
      BrickMasoniteEnum = 52,

      /// <summary>
      /// Enum BrickMasonryStoneEnum for Brick/Masonry/Stone
      /// </summary>
      [EnumMember(Value = "Brick/Masonry/Stone")]
      BrickMasonryStoneEnum = 53,

      /// <summary>
      /// Enum BlockMasonryStuccoEnum for Block/Masonry/Stucco
      /// </summary>
      [EnumMember(Value = "Block/Masonry/Stucco")]
      BlockMasonryStuccoEnum = 54,

      /// <summary>
      /// Enum BrickMetalEnum for Brick/Metal
      /// </summary>
      [EnumMember(Value = "Brick/Metal")]
      BrickMetalEnum = 55,

      /// <summary>
      /// Enum BrickMetalVeneerEnum for Brick/Metal/Veneer
      /// </summary>
      [EnumMember(Value = "Brick/Metal/Veneer")]
      BrickMetalVeneerEnum = 56,

      /// <summary>
      /// Enum BoardOnPostEnum for Board On Post
      /// </summary>
      [EnumMember(Value = "Board On Post")]
      BoardOnPostEnum = 57,

      /// <summary>
      /// Enum BrickConcreteEnum for Brick/Concrete
      /// </summary>
      [EnumMember(Value = "Brick/Concrete")]
      BrickConcreteEnum = 58,

      /// <summary>
      /// Enum BrickEnum for Brick
      /// </summary>
      [EnumMember(Value = "Brick")]
      BrickEnum = 59,

      /// <summary>
      /// Enum BrickMasonryEnum for Brick/Masonry
      /// </summary>
      [EnumMember(Value = "Brick/Masonry")]
      BrickMasonryEnum = 60,

      /// <summary>
      /// Enum BrickStuccoEnum for Brick/Stucco
      /// </summary>
      [EnumMember(Value = "Brick/Stucco")]
      BrickStuccoEnum = 61,

      /// <summary>
      /// Enum BrickPermastoneEnum for Brick/Permastone
      /// </summary>
      [EnumMember(Value = "Brick/Permastone")]
      BrickPermastoneEnum = 62,

      /// <summary>
      /// Enum BrickStoneEnum for Brick/Stone
      /// </summary>
      [EnumMember(Value = "Brick/Stone")]
      BrickStoneEnum = 63,

      /// <summary>
      /// Enum BrickVeneerEnum for Brick Veneer
      /// </summary>
      [EnumMember(Value = "Brick Veneer")]
      BrickVeneerEnum = 64,

      /// <summary>
      /// Enum BrickWoodEnum for Brick/Wood
      /// </summary>
      [EnumMember(Value = "Brick/Wood")]
      BrickWoodEnum = 65,

      /// <summary>
      /// Enum BrickVeneerStoneWoodEnum for Brick Veneer/Stone/Wood
      /// </summary>
      [EnumMember(Value = "Brick Veneer/Stone/Wood")]
      BrickVeneerStoneWoodEnum = 66,

      /// <summary>
      /// Enum BrickSidingEnum for Brick Siding
      /// </summary>
      [EnumMember(Value = "Brick Siding")]
      BrickSidingEnum = 67,

      /// <summary>
      /// Enum BrickShingleEnum for Brick/Shingle
      /// </summary>
      [EnumMember(Value = "Brick/Shingle")]
      BrickShingleEnum = 68,

      /// <summary>
      /// Enum BlockStoneWoodEnum for Block/Stone/Wood
      /// </summary>
      [EnumMember(Value = "Block/Stone/Wood")]
      BlockStoneWoodEnum = 69,

      /// <summary>
      /// Enum BlockStuccoEnum for Block/Stucco
      /// </summary>
      [EnumMember(Value = "Block/Stucco")]
      BlockStuccoEnum = 70,

      /// <summary>
      /// Enum BrickStoneVeneerEnum for Brick/Stone Veneer
      /// </summary>
      [EnumMember(Value = "Brick/Stone Veneer")]
      BrickStoneVeneerEnum = 71,

      /// <summary>
      /// Enum BrickStoneWoodSidingEnum for Brick/Stone/Wood Siding
      /// </summary>
      [EnumMember(Value = "Brick/Stone/Wood Siding")]
      BrickStoneWoodSidingEnum = 72,

      /// <summary>
      /// Enum BrickTileEnum for Brick/Tile
      /// </summary>
      [EnumMember(Value = "Brick/Tile")]
      BrickTileEnum = 73,

      /// <summary>
      /// Enum BrickVeneerBlockEnum for Brick Veneer/Block
      /// </summary>
      [EnumMember(Value = "Brick Veneer/Block")]
      BrickVeneerBlockEnum = 74,

      /// <summary>
      /// Enum BrickVinylEnum for Brick/Vinyl
      /// </summary>
      [EnumMember(Value = "Brick/Vinyl")]
      BrickVinylEnum = 75,

      /// <summary>
      /// Enum BrickVeneerWoodEnum for Brick Veneer/Wood
      /// </summary>
      [EnumMember(Value = "Brick Veneer/Wood")]
      BrickVeneerWoodEnum = 76,

      /// <summary>
      /// Enum BrickVeneerWallBoardEnum for Brick Veneer/Wall Board
      /// </summary>
      [EnumMember(Value = "Brick Veneer/Wall Board")]
      BrickVeneerWallBoardEnum = 77,

      /// <summary>
      /// Enum BrickWoodSidingEnum for Brick/Wood Siding
      /// </summary>
      [EnumMember(Value = "Brick/Wood Siding")]
      BrickWoodSidingEnum = 78,

      /// <summary>
      /// Enum BrickStuccoWoodEnum for Brick/Stucco/Wood
      /// </summary>
      [EnumMember(Value = "Brick/Stucco/Wood")]
      BrickStuccoWoodEnum = 79,

      /// <summary>
      /// Enum BrickWoodStoneVeneerEnum for Brick/Wood/Stone Veneer
      /// </summary>
      [EnumMember(Value = "Brick/Wood/Stone Veneer")]
      BrickWoodStoneVeneerEnum = 80,

      /// <summary>
      /// Enum BrickWoodVinylEnum for Brick/Wood/Vinyl
      /// </summary>
      [EnumMember(Value = "Brick/Wood/Vinyl")]
      BrickWoodVinylEnum = 81,

      /// <summary>
      /// Enum ConcreteBrickCompositionEnum for Concrete Brick/Composition
      /// </summary>
      [EnumMember(Value = "Concrete Brick/Composition")]
      ConcreteBrickCompositionEnum = 82,

      /// <summary>
      /// Enum ConcreteBlockSteelEnum for Concrete Block/Steel
      /// </summary>
      [EnumMember(Value = "Concrete Block/Steel")]
      ConcreteBlockSteelEnum = 83,

      /// <summary>
      /// Enum ConcreteBlockMetalEnum for Concrete Block/Metal
      /// </summary>
      [EnumMember(Value = "Concrete Block/Metal")]
      ConcreteBlockMetalEnum = 84,

      /// <summary>
      /// Enum CinderBlockMasoniteEnum for Cinder Block/Masonite
      /// </summary>
      [EnumMember(Value = "Cinder Block/Masonite")]
      CinderBlockMasoniteEnum = 85,

      /// <summary>
      /// Enum ConcreteBrickPanelEnum for Concrete Brick/Panel
      /// </summary>
      [EnumMember(Value = "Concrete Brick/Panel")]
      ConcreteBrickPanelEnum = 86,

      /// <summary>
      /// Enum ConcreteBlockStuccoEnum for Concrete Block/Stucco
      /// </summary>
      [EnumMember(Value = "Concrete Block/Stucco")]
      ConcreteBlockStuccoEnum = 87,

      /// <summary>
      /// Enum CinderBlockStuccoEnum for Cinder Block/Stucco
      /// </summary>
      [EnumMember(Value = "Cinder Block/Stucco")]
      CinderBlockStuccoEnum = 88,

      /// <summary>
      /// Enum ConcreteBlockStoneVeneerEnum for Concrete Block/Stone Veneer
      /// </summary>
      [EnumMember(Value = "Concrete Block/Stone Veneer")]
      ConcreteBlockStoneVeneerEnum = 89,

      /// <summary>
      /// Enum CinderBlockWoodEnum for Cinder Block/Wood
      /// </summary>
      [EnumMember(Value = "Cinder Block/Wood")]
      CinderBlockWoodEnum = 90,

      /// <summary>
      /// Enum ConcreteBlockMasonryEnum for Concrete Block/Masonry
      /// </summary>
      [EnumMember(Value = "Concrete Block/Masonry")]
      ConcreteBlockMasonryEnum = 91,

      /// <summary>
      /// Enum CinderBlockEnum for Cinder Block
      /// </summary>
      [EnumMember(Value = "Cinder Block")]
      CinderBlockEnum = 92,

      /// <summary>
      /// Enum ConcreteCinderBlockEnum for Concrete/Cinder Block
      /// </summary>
      [EnumMember(Value = "Concrete/Cinder Block")]
      ConcreteCinderBlockEnum = 93,

      /// <summary>
      /// Enum ConcreteDryvitEnum for Concrete/Dryvit
      /// </summary>
      [EnumMember(Value = "Concrete/Dryvit")]
      ConcreteDryvitEnum = 94,

      /// <summary>
      /// Enum ConcreteFrameSteelEnum for Concrete/Frame/Steel
      /// </summary>
      [EnumMember(Value = "Concrete/Frame/Steel")]
      ConcreteFrameSteelEnum = 95,

      /// <summary>
      /// Enum ConcreteGlassPanelsEnum for Concrete/Glass Panels
      /// </summary>
      [EnumMember(Value = "Concrete/Glass Panels")]
      ConcreteGlassPanelsEnum = 96,

      /// <summary>
      /// Enum TongueGrooveChannelEnum for Tongue & Groove/Channel
      /// </summary>
      [EnumMember(Value = "Tongue & Groove/Channel")]
      TongueGrooveChannelEnum = 97,

      /// <summary>
      /// Enum ClapboardEnum for Clapboard
      /// </summary>
      [EnumMember(Value = "Clapboard")]
      ClapboardEnum = 98,

      /// <summary>
      /// Enum ClayTileEnum for Clay Tile
      /// </summary>
      [EnumMember(Value = "Clay Tile")]
      ClayTileEnum = 99,

      /// <summary>
      /// Enum CbMetalGlassPanelEnum for Cb/Metal/Glass Panel
      /// </summary>
      [EnumMember(Value = "Cb/Metal/Glass Panel")]
      CbMetalGlassPanelEnum = 100,

      /// <summary>
      /// Enum ConcreteMasonryEnum for Concrete Masonry
      /// </summary>
      [EnumMember(Value = "Concrete Masonry")]
      ConcreteMasonryEnum = 101,

      /// <summary>
      /// Enum ConcreteMetalEnum for Concrete/Metal
      /// </summary>
      [EnumMember(Value = "Concrete/Metal")]
      ConcreteMetalEnum = 102,

      /// <summary>
      /// Enum CorrugatedMetalWallboardEnum for Corrugated Metal/Wallboard
      /// </summary>
      [EnumMember(Value = "Corrugated Metal/Wallboard")]
      CorrugatedMetalWallboardEnum = 103,

      /// <summary>
      /// Enum ConcreteBlockEnum for Concrete Block
      /// </summary>
      [EnumMember(Value = "Concrete Block")]
      ConcreteBlockEnum = 104,

      /// <summary>
      /// Enum ConcreteTileEnum for Concrete Tile
      /// </summary>
      [EnumMember(Value = "Concrete Tile")]
      ConcreteTileEnum = 105,

      /// <summary>
      /// Enum CompositionEnum for Composition
      /// </summary>
      [EnumMember(Value = "Composition")]
      CompositionEnum = 106,

      /// <summary>
      /// Enum ConcreteEnum for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum = 107,

      /// <summary>
      /// Enum CopperSidingEnum for Copper Siding
      /// </summary>
      [EnumMember(Value = "Copper Siding")]
      CopperSidingEnum = 108,

      /// <summary>
      /// Enum CorrugatedPanelEnum for Corrugated Panel
      /// </summary>
      [EnumMember(Value = "Corrugated Panel")]
      CorrugatedPanelEnum = 109,

      /// <summary>
      /// Enum CorrugatedSidingEnum for Corrugated Siding
      /// </summary>
      [EnumMember(Value = "Corrugated Siding")]
      CorrugatedSidingEnum = 110,

      /// <summary>
      /// Enum CompositionShingleEnum for Composition Shingle
      /// </summary>
      [EnumMember(Value = "Composition Shingle")]
      CompositionShingleEnum = 111,

      /// <summary>
      /// Enum CompositionSidingEnum for Composition Siding
      /// </summary>
      [EnumMember(Value = "Composition Siding")]
      CompositionSidingEnum = 112,

      /// <summary>
      /// Enum CorrugatedSteelPanelEnum for Corrugated Steel Panel
      /// </summary>
      [EnumMember(Value = "Corrugated Steel Panel")]
      CorrugatedSteelPanelEnum = 113,

      /// <summary>
      /// Enum CompositionSidingStuccoEnum for Composition Siding/Stucco
      /// </summary>
      [EnumMember(Value = "Composition Siding/Stucco")]
      CompositionSidingStuccoEnum = 114,

      /// <summary>
      /// Enum ConcreteStuccoEnum for Concrete Stucco
      /// </summary>
      [EnumMember(Value = "Concrete Stucco")]
      ConcreteStuccoEnum = 115,

      /// <summary>
      /// Enum CustomEnum for Custom
      /// </summary>
      [EnumMember(Value = "Custom")]
      CustomEnum = 116,

      /// <summary>
      /// Enum PorcelainEnamelPanelEnum for Porcelain/Enamel Panel
      /// </summary>
      [EnumMember(Value = "Porcelain/Enamel Panel")]
      PorcelainEnamelPanelEnum = 117,

      /// <summary>
      /// Enum InsulatedFinishEIFSEnum for Insulated Finish/EIFS
      /// </summary>
      [EnumMember(Value = "Insulated Finish/EIFS")]
      InsulatedFinishEIFSEnum = 118,

      /// <summary>
      /// Enum FrameAluminumBrickEnum for Frame Aluminum/Brick
      /// </summary>
      [EnumMember(Value = "Frame Aluminum/Brick")]
      FrameAluminumBrickEnum = 119,

      /// <summary>
      /// Enum FrameAluminumVinylEnum for Frame/Aluminum/Vinyl
      /// </summary>
      [EnumMember(Value = "Frame/Aluminum/Vinyl")]
      FrameAluminumVinylEnum = 120,

      /// <summary>
      /// Enum FiberboardEnum for Fiberboard
      /// </summary>
      [EnumMember(Value = "Fiberboard")]
      FiberboardEnum = 121,

      /// <summary>
      /// Enum FrameConcreteBlockBrickEnum for Frame Concrete Block/Brick
      /// </summary>
      [EnumMember(Value = "Frame Concrete Block/Brick")]
      FrameConcreteBlockBrickEnum = 122,

      /// <summary>
      /// Enum FrameClapboardEnum for Frame Clapboard
      /// </summary>
      [EnumMember(Value = "Frame Clapboard")]
      FrameClapboardEnum = 123,

      /// <summary>
      /// Enum FrameHardboardEnum for Frame Hardboard
      /// </summary>
      [EnumMember(Value = "Frame Hardboard")]
      FrameHardboardEnum = 124,

      /// <summary>
      /// Enum FiberglassEnum for Fiberglass
      /// </summary>
      [EnumMember(Value = "Fiberglass")]
      FiberglassEnum = 125,

      /// <summary>
      /// Enum FrameMasonryEnum for Frame/Masonry
      /// </summary>
      [EnumMember(Value = "Frame/Masonry")]
      FrameMasonryEnum = 126,

      /// <summary>
      /// Enum FrameMasonryVeneerEnum for Frame/Masonry/Veneer
      /// </summary>
      [EnumMember(Value = "Frame/Masonry/Veneer")]
      FrameMasonryVeneerEnum = 127,

      /// <summary>
      /// Enum FramePermastoneEnum for Frame/Permastone
      /// </summary>
      [EnumMember(Value = "Frame/Permastone")]
      FramePermastoneEnum = 128,

      /// <summary>
      /// Enum FramePlywoodEnum for Frame/Plywood
      /// </summary>
      [EnumMember(Value = "Frame/Plywood")]
      FramePlywoodEnum = 129,

      /// <summary>
      /// Enum FrameEnum for Frame
      /// </summary>
      [EnumMember(Value = "Frame")]
      FrameEnum = 130,

      /// <summary>
      /// Enum FrameBrickEnum for Frame Brick
      /// </summary>
      [EnumMember(Value = "Frame Brick")]
      FrameBrickEnum = 131,

      /// <summary>
      /// Enum FrameCompositionEnum for Frame Composition
      /// </summary>
      [EnumMember(Value = "Frame Composition")]
      FrameCompositionEnum = 132,

      /// <summary>
      /// Enum FrameShingleEnum for Frame/Shingle
      /// </summary>
      [EnumMember(Value = "Frame/Shingle")]
      FrameShingleEnum = 133,

      /// <summary>
      /// Enum FrameGlassEnum for Frame/Glass
      /// </summary>
      [EnumMember(Value = "Frame/Glass")]
      FrameGlassEnum = 134,

      /// <summary>
      /// Enum FrameMetalEnum for Frame/Metal
      /// </summary>
      [EnumMember(Value = "Frame/Metal")]
      FrameMetalEnum = 135,

      /// <summary>
      /// Enum FrameStoneEnum for Frame/Stone
      /// </summary>
      [EnumMember(Value = "Frame/Stone")]
      FrameStoneEnum = 136,

      /// <summary>
      /// Enum FrameVinylEnum for Frame/Vinyl
      /// </summary>
      [EnumMember(Value = "Frame/Vinyl")]
      FrameVinylEnum = 137,

      /// <summary>
      /// Enum FrameWoodEnum for Frame/Wood
      /// </summary>
      [EnumMember(Value = "Frame/Wood")]
      FrameWoodEnum = 138,

      /// <summary>
      /// Enum FrameShingleBrickEnum for Frame Shingle/Brick
      /// </summary>
      [EnumMember(Value = "Frame Shingle/Brick")]
      FrameShingleBrickEnum = 139,

      /// <summary>
      /// Enum FrameSidingEnum for Frame Siding
      /// </summary>
      [EnumMember(Value = "Frame Siding")]
      FrameSidingEnum = 140,

      /// <summary>
      /// Enum FrameSteelSidingEnum for Frame/Steel/Siding
      /// </summary>
      [EnumMember(Value = "Frame/Steel/Siding")]
      FrameSteelSidingEnum = 141,

      /// <summary>
      /// Enum FrameStudLathStucAsbSdgEnum for Frame-Stud/Lath/Stuc/Asb Sdg
      /// </summary>
      [EnumMember(Value = "Frame-Stud/Lath/Stuc/Asb Sdg")]
      FrameStudLathStucAsbSdgEnum = 142,

      /// <summary>
      /// Enum FrameSteelMetalEnum for Frame/Steel/Metal
      /// </summary>
      [EnumMember(Value = "Frame/Steel/Metal")]
      FrameSteelMetalEnum = 143,

      /// <summary>
      /// Enum FrameSteelPanelEnum for Frame/Steel Panel
      /// </summary>
      [EnumMember(Value = "Frame/Steel Panel")]
      FrameSteelPanelEnum = 144,

      /// <summary>
      /// Enum FrameShingleSidingEnum for Frame/Shingle Siding
      /// </summary>
      [EnumMember(Value = "Frame/Shingle Siding")]
      FrameShingleSidingEnum = 145,

      /// <summary>
      /// Enum FrameStuccoEnum for Frame/Stucco
      /// </summary>
      [EnumMember(Value = "Frame/Stucco")]
      FrameStuccoEnum = 146,

      /// <summary>
      /// Enum FrameStoneVeneerEnum for Frame/Stone/Veneer
      /// </summary>
      [EnumMember(Value = "Frame/Stone/Veneer")]
      FrameStoneVeneerEnum = 147,

      /// <summary>
      /// Enum FrameWoodShingleEnum for Frame/Wood Shingle
      /// </summary>
      [EnumMember(Value = "Frame/Wood Shingle")]
      FrameWoodShingleEnum = 148,

      /// <summary>
      /// Enum FrameStuccoSidingEnum for Frame/Stucco/Siding
      /// </summary>
      [EnumMember(Value = "Frame/Stucco/Siding")]
      FrameStuccoSidingEnum = 149,

      /// <summary>
      /// Enum FrameTileWoodEnum for Frame/Tile/Wood
      /// </summary>
      [EnumMember(Value = "Frame/Tile/Wood")]
      FrameTileWoodEnum = 150,

      /// <summary>
      /// Enum FrameWoodBrickEnum for Frame Wood/Brick
      /// </summary>
      [EnumMember(Value = "Frame Wood/Brick")]
      FrameWoodBrickEnum = 151,

      /// <summary>
      /// Enum FrameWoodStuccoEnum for Frame Wood/Stucco
      /// </summary>
      [EnumMember(Value = "Frame Wood/Stucco")]
      FrameWoodStuccoEnum = 152,

      /// <summary>
      /// Enum FrameWoodEnum2 for Frame Wood
      /// </summary>
      [EnumMember(Value = "Frame Wood")]
      FrameWoodEnum2 = 153,

      /// <summary>
      /// Enum FrameWoodSidingEnum for Frame/Wood Siding
      /// </summary>
      [EnumMember(Value = "Frame/Wood Siding")]
      FrameWoodSidingEnum = 154,

      /// <summary>
      /// Enum GlassEnum for Glass
      /// </summary>
      [EnumMember(Value = "Glass")]
      GlassEnum = 155,

      /// <summary>
      /// Enum BrickGlassEnum for Brick/Glass
      /// </summary>
      [EnumMember(Value = "Brick/Glass")]
      BrickGlassEnum = 156,

      /// <summary>
      /// Enum AluminumGlassEnum for Aluminum/Glass
      /// </summary>
      [EnumMember(Value = "Aluminum/Glass")]
      AluminumGlassEnum = 157,

      /// <summary>
      /// Enum GlassMetalEnum for Glass/Metal
      /// </summary>
      [EnumMember(Value = "Glass/Metal")]
      GlassMetalEnum = 158,

      /// <summary>
      /// Enum GlassSteelEnum for Glass/Steel
      /// </summary>
      [EnumMember(Value = "Glass/Steel")]
      GlassSteelEnum = 159,

      /// <summary>
      /// Enum GlassMasonryEnum for Glass/Masonry
      /// </summary>
      [EnumMember(Value = "Glass/Masonry")]
      GlassMasonryEnum = 160,

      /// <summary>
      /// Enum GlassStoneEnum for Glass/Stone
      /// </summary>
      [EnumMember(Value = "Glass/Stone")]
      GlassStoneEnum = 161,

      /// <summary>
      /// Enum GuniteEnum for Gunite
      /// </summary>
      [EnumMember(Value = "Gunite")]
      GuniteEnum = 162,

      /// <summary>
      /// Enum GlassWoodEnum for Glass/Wood
      /// </summary>
      [EnumMember(Value = "Glass/Wood")]
      GlassWoodEnum = 163,

      /// <summary>
      /// Enum HardboardEnum for Hardboard
      /// </summary>
      [EnumMember(Value = "Hardboard")]
      HardboardEnum = 164,

      /// <summary>
      /// Enum HayditeEnum for Haydite
      /// </summary>
      [EnumMember(Value = "Haydite")]
      HayditeEnum = 165,

      /// <summary>
      /// Enum HardboardPlywoodEnum for Hardboard/Plywood
      /// </summary>
      [EnumMember(Value = "Hardboard/Plywood")]
      HardboardPlywoodEnum = 166,

      /// <summary>
      /// Enum HardboardVinylEnum for Hardboard/Vinyl
      /// </summary>
      [EnumMember(Value = "Hardboard/Vinyl")]
      HardboardVinylEnum = 167,

      /// <summary>
      /// Enum HardwoodEnum for Hardwood
      /// </summary>
      [EnumMember(Value = "Hardwood")]
      HardwoodEnum = 168,

      /// <summary>
      /// Enum SyntheticPanelSidingEnum for Synthetic Panel/Siding
      /// </summary>
      [EnumMember(Value = "Synthetic Panel/Siding")]
      SyntheticPanelSidingEnum = 169,

      /// <summary>
      /// Enum FireproofFireRetardantEnum for Fireproof/Fire Retardant
      /// </summary>
      [EnumMember(Value = "Fireproof/Fire Retardant")]
      FireproofFireRetardantEnum = 170,

      /// <summary>
      /// Enum IronPostCorrugatedIronEnum for Iron Post/Corrugated Iron
      /// </summary>
      [EnumMember(Value = "Iron Post/Corrugated Iron")]
      IronPostCorrugatedIronEnum = 171,

      /// <summary>
      /// Enum LogEnum for Log
      /// </summary>
      [EnumMember(Value = "Log")]
      LogEnum = 172,

      /// <summary>
      /// Enum LapSidingEnum for Lap Siding
      /// </summary>
      [EnumMember(Value = "Lap Siding")]
      LapSidingEnum = 173,

      /// <summary>
      /// Enum LogWoodShingleEnum for Log/Wood Shingle
      /// </summary>
      [EnumMember(Value = "Log/Wood Shingle")]
      LogWoodShingleEnum = 174,

      /// <summary>
      /// Enum MarbleEnum for Marble
      /// </summary>
      [EnumMember(Value = "Marble")]
      MarbleEnum = 175,

      /// <summary>
      /// Enum MasoniteEnum for Masonite
      /// </summary>
      [EnumMember(Value = "Masonite")]
      MasoniteEnum = 176,

      /// <summary>
      /// Enum MarbleStoneEnum for Marble/Stone
      /// </summary>
      [EnumMember(Value = "Marble/Stone")]
      MarbleStoneEnum = 177,

      /// <summary>
      /// Enum MetalSteelEnum for Metal/Steel
      /// </summary>
      [EnumMember(Value = "Metal/Steel")]
      MetalSteelEnum = 178,

      /// <summary>
      /// Enum MetalEnum for Metal
      /// </summary>
      [EnumMember(Value = "Metal")]
      MetalEnum = 179,

      /// <summary>
      /// Enum MixtureEnum for Mixture
      /// </summary>
      [EnumMember(Value = "Mixture")]
      MixtureEnum = 180,

      /// <summary>
      /// Enum MetalStuccoEnum for Metal/Stucco
      /// </summary>
      [EnumMember(Value = "Metal/Stucco")]
      MetalStuccoEnum = 181,

      /// <summary>
      /// Enum MasoniteStuccoEnum for Masonite/Stucco
      /// </summary>
      [EnumMember(Value = "Masonite/Stucco")]
      MasoniteStuccoEnum = 182,

      /// <summary>
      /// Enum MasoniteSheathingEnum for Masonite/Sheathing
      /// </summary>
      [EnumMember(Value = "Masonite/Sheathing")]
      MasoniteSheathingEnum = 183,

      /// <summary>
      /// Enum MasonryMetalEnum for Masonry/Metal
      /// </summary>
      [EnumMember(Value = "Masonry/Metal")]
      MasonryMetalEnum = 184,

      /// <summary>
      /// Enum MasonryEnum for Masonry
      /// </summary>
      [EnumMember(Value = "Masonry")]
      MasonryEnum = 185,

      /// <summary>
      /// Enum MasonryStoneEnum for Masonry/Stone
      /// </summary>
      [EnumMember(Value = "Masonry/Stone")]
      MasonryStoneEnum = 186,

      /// <summary>
      /// Enum MasoniteStoneEnum for Masonite/Stone
      /// </summary>
      [EnumMember(Value = "Masonite/Stone")]
      MasoniteStoneEnum = 187,

      /// <summary>
      /// Enum MasoniteVinylEnum for Masonite/Vinyl
      /// </summary>
      [EnumMember(Value = "Masonite/Vinyl")]
      MasoniteVinylEnum = 188,

      /// <summary>
      /// Enum MasoniteWoodEnum for Masonite/Wood
      /// </summary>
      [EnumMember(Value = "Masonite/Wood")]
      MasoniteWoodEnum = 189,

      /// <summary>
      /// Enum MetalPanelEnum for Metal Panel
      /// </summary>
      [EnumMember(Value = "Metal Panel")]
      MetalPanelEnum = 190,

      /// <summary>
      /// Enum MetalSidingEnum for Metal Siding
      /// </summary>
      [EnumMember(Value = "Metal Siding")]
      MetalSidingEnum = 191,

      /// <summary>
      /// Enum MasonryVeneerEnum for Masonry Veneer
      /// </summary>
      [EnumMember(Value = "Masonry Veneer")]
      MasonryVeneerEnum = 192,

      /// <summary>
      /// Enum MetalStoneVeneerEnum for Metal/Stone/Veneer
      /// </summary>
      [EnumMember(Value = "Metal/Stone/Veneer")]
      MetalStoneVeneerEnum = 193,

      /// <summary>
      /// Enum MetalWoodEnum for Metal/Wood
      /// </summary>
      [EnumMember(Value = "Metal/Wood")]
      MetalWoodEnum = 194,

      /// <summary>
      /// Enum MetalWoodFrameEnum for Metal/Wood Frame
      /// </summary>
      [EnumMember(Value = "Metal/Wood Frame")]
      MetalWoodFrameEnum = 195,

      /// <summary>
      /// Enum MasonryStuccoEnum for Masonry/Stucco
      /// </summary>
      [EnumMember(Value = "Masonry/Stucco")]
      MasonryStuccoEnum = 196,

      /// <summary>
      /// Enum MasonryWoodEnum for Masonry/Wood
      /// </summary>
      [EnumMember(Value = "Masonry/Wood")]
      MasonryWoodEnum = 197,

      /// <summary>
      /// Enum OpenEndEnum for Open End
      /// </summary>
      [EnumMember(Value = "Open End")]
      OpenEndEnum = 198,

      /// <summary>
      /// Enum PostBoardEnum for Post & Board
      /// </summary>
      [EnumMember(Value = "Post & Board")]
      PostBoardEnum = 199,

      /// <summary>
      /// Enum PanelEnum for Panel
      /// </summary>
      [EnumMember(Value = "Panel")]
      PanelEnum = 200,

      /// <summary>
      /// Enum PrecastConcretePanelEnum for Precast Concrete Panel
      /// </summary>
      [EnumMember(Value = "Precast Concrete Panel")]
      PrecastConcretePanelEnum = 201,

      /// <summary>
      /// Enum PrecastCurtainWallsEnum for Precast Curtain Walls
      /// </summary>
      [EnumMember(Value = "Precast Curtain Walls")]
      PrecastCurtainWallsEnum = 202,

      /// <summary>
      /// Enum PermastoneEnum for Permastone
      /// </summary>
      [EnumMember(Value = "Permastone")]
      PermastoneEnum = 203,

      /// <summary>
      /// Enum PrefabMetalEnum for Prefab Metal
      /// </summary>
      [EnumMember(Value = "Prefab Metal")]
      PrefabMetalEnum = 204,

      /// <summary>
      /// Enum PrefabWoodEnum for Prefab Wood
      /// </summary>
      [EnumMember(Value = "Prefab Wood")]
      PrefabWoodEnum = 205,

      /// <summary>
      /// Enum PlasterEnum for Plaster
      /// </summary>
      [EnumMember(Value = "Plaster")]
      PlasterEnum = 206,

      /// <summary>
      /// Enum PlywoodEnum for Plywood
      /// </summary>
      [EnumMember(Value = "Plywood")]
      PlywoodEnum = 207,

      /// <summary>
      /// Enum PorcelainEnamelPanelEnum2 for Porcelain/Enamel Panel
      /// </summary>
      [EnumMember(Value = "Porcelain/Enamel Panel")]
      PorcelainEnamelPanelEnum2 = 208,

      /// <summary>
      /// Enum PressboardEnum for Pressboard
      /// </summary>
      [EnumMember(Value = "Pressboard")]
      PressboardEnum = 209,

      /// <summary>
      /// Enum PrecastConcreteEnum for Precast Concrete
      /// </summary>
      [EnumMember(Value = "Precast Concrete")]
      PrecastConcreteEnum = 210,

      /// <summary>
      /// Enum PrefabEnum for Prefab
      /// </summary>
      [EnumMember(Value = "Prefab")]
      PrefabEnum = 211,

      /// <summary>
      /// Enum PrefabPanelEnum for Prefab Panel
      /// </summary>
      [EnumMember(Value = "Prefab Panel")]
      PrefabPanelEnum = 212,

      /// <summary>
      /// Enum PanelStuccoEnum for Panel/Stucco
      /// </summary>
      [EnumMember(Value = "Panel/Stucco")]
      PanelStuccoEnum = 213,

      /// <summary>
      /// Enum PrecastTexturedPanelEnum for Precast Textured Panel
      /// </summary>
      [EnumMember(Value = "Precast Textured Panel")]
      PrecastTexturedPanelEnum = 214,

      /// <summary>
      /// Enum PermastoneWoodEnum for Permastone/Wood
      /// </summary>
      [EnumMember(Value = "Permastone/Wood")]
      PermastoneWoodEnum = 215,

      /// <summary>
      /// Enum PlywoodWoodFrameEnum for Plywood/Wood Frame
      /// </summary>
      [EnumMember(Value = "Plywood/Wood Frame")]
      PlywoodWoodFrameEnum = 216,

      /// <summary>
      /// Enum PrefabWoodPanelEnum for Prefab Wood Panel
      /// </summary>
      [EnumMember(Value = "Prefab Wood Panel")]
      PrefabWoodPanelEnum = 217,

      /// <summary>
      /// Enum BrickConcreteBlockWoodEnum for Brick/Concrete Block/Wood
      /// </summary>
      [EnumMember(Value = "Brick/Concrete Block/Wood")]
      BrickConcreteBlockWoodEnum = 218,

      /// <summary>
      /// Enum RockStoneEnum for Rock/Stone
      /// </summary>
      [EnumMember(Value = "Rock/Stone")]
      RockStoneEnum = 219,

      /// <summary>
      /// Enum SimulatedBrickRockStoneEnum for Simulated Brick, Rock, Stone
      /// </summary>
      [EnumMember(Value = "Simulated Brick, Rock, Stone")]
      SimulatedBrickRockStoneEnum = 220,

      /// <summary>
      /// Enum SidingSheathingEnum for Siding Sheathing
      /// </summary>
      [EnumMember(Value = "Siding Sheathing")]
      SidingSheathingEnum = 221,

      /// <summary>
      /// Enum SteelWoodEnum for Steel/Wood
      /// </summary>
      [EnumMember(Value = "Steel/Wood")]
      SteelWoodEnum = 222,

      /// <summary>
      /// Enum SteelFrameWoodEnum for Steel Frame/Wood
      /// </summary>
      [EnumMember(Value = "Steel Frame/Wood")]
      SteelFrameWoodEnum = 223,

      /// <summary>
      /// Enum SolarGlassEnum for Solar Glass
      /// </summary>
      [EnumMember(Value = "Solar Glass")]
      SolarGlassEnum = 224,

      /// <summary>
      /// Enum ShingleSidingEnum for Shingle Siding
      /// </summary>
      [EnumMember(Value = "Shingle Siding")]
      ShingleSidingEnum = 225,

      /// <summary>
      /// Enum ShingleWoodEnum for Shingle/Wood
      /// </summary>
      [EnumMember(Value = "Shingle/Wood")]
      ShingleWoodEnum = 226,

      /// <summary>
      /// Enum ShingleBrickEnum for Shingle/Brick
      /// </summary>
      [EnumMember(Value = "Shingle/Brick")]
      ShingleBrickEnum = 227,

      /// <summary>
      /// Enum SheathingEnum for Sheathing
      /// </summary>
      [EnumMember(Value = "Sheathing")]
      SheathingEnum = 228,

      /// <summary>
      /// Enum ShingleEnum for Shingle
      /// </summary>
      [EnumMember(Value = "Shingle")]
      ShingleEnum = 229,

      /// <summary>
      /// Enum SheathingStuccoEnum for Sheathing/Stucco
      /// </summary>
      [EnumMember(Value = "Sheathing/Stucco")]
      SheathingStuccoEnum = 230,

      /// <summary>
      /// Enum SheathingWoodEnum for Sheathing/Wood
      /// </summary>
      [EnumMember(Value = "Sheathing/Wood")]
      SheathingWoodEnum = 231,

      /// <summary>
      /// Enum SingleEnum for Single
      /// </summary>
      [EnumMember(Value = "Single")]
      SingleEnum = 232,

      /// <summary>
      /// Enum SlumpEnum for Slump
      /// </summary>
      [EnumMember(Value = "Slump")]
      SlumpEnum = 233,

      /// <summary>
      /// Enum StoneSidingEnum for Stone/Siding
      /// </summary>
      [EnumMember(Value = "Stone/Siding")]
      StoneSidingEnum = 234,

      /// <summary>
      /// Enum StoneWoodEnum for Stone/Wood
      /// </summary>
      [EnumMember(Value = "Stone/Wood")]
      StoneWoodEnum = 235,

      /// <summary>
      /// Enum GuniteSpraycreteEnum for Gunite/Spraycrete
      /// </summary>
      [EnumMember(Value = "Gunite/Spraycrete")]
      GuniteSpraycreteEnum = 236,

      /// <summary>
      /// Enum StoneStuccoEnum for Stone/Stucco
      /// </summary>
      [EnumMember(Value = "Stone/Stucco")]
      StoneStuccoEnum = 237,

      /// <summary>
      /// Enum StoneWoodSidingEnum for Stone/Wood Siding
      /// </summary>
      [EnumMember(Value = "Stone/Wood Siding")]
      StoneWoodSidingEnum = 238,

      /// <summary>
      /// Enum FrameStuccoShingleEnum for Frame/Stucco Shingle
      /// </summary>
      [EnumMember(Value = "Frame/Stucco Shingle")]
      FrameStuccoShingleEnum = 239,

      /// <summary>
      /// Enum StainlessSteelWBronzedGlassEnum for Stainless Steel W/Bronzed Glass
      /// </summary>
      [EnumMember(Value = "Stainless Steel W/Bronzed Glass")]
      StainlessSteelWBronzedGlassEnum = 240,

      /// <summary>
      /// Enum SlateEnum for Slate
      /// </summary>
      [EnumMember(Value = "Slate")]
      SlateEnum = 241,

      /// <summary>
      /// Enum ShingleStuccoEnum for Shingle/Stucco
      /// </summary>
      [EnumMember(Value = "Shingle/Stucco")]
      ShingleStuccoEnum = 242,

      /// <summary>
      /// Enum SteelStuccoEnum for Steel/Stucco
      /// </summary>
      [EnumMember(Value = "Steel/Stucco")]
      SteelStuccoEnum = 243,

      /// <summary>
      /// Enum ShingleSidingWoodFrameEnum for Shingle Siding/Wood Frame
      /// </summary>
      [EnumMember(Value = "Shingle Siding/Wood Frame")]
      ShingleSidingWoodFrameEnum = 244,

      /// <summary>
      /// Enum SteelEnum for Steel
      /// </summary>
      [EnumMember(Value = "Steel")]
      SteelEnum = 245,

      /// <summary>
      /// Enum SteelFrameEnum for Steel Frame
      /// </summary>
      [EnumMember(Value = "Steel Frame")]
      SteelFrameEnum = 246,

      /// <summary>
      /// Enum StuccoMasonryEnum for Stucco/Masonry
      /// </summary>
      [EnumMember(Value = "Stucco/Masonry")]
      StuccoMasonryEnum = 247,

      /// <summary>
      /// Enum StoneEnum for Stone
      /// </summary>
      [EnumMember(Value = "Stone")]
      StoneEnum = 248,

      /// <summary>
      /// Enum SteelPanelEnum for Steel/Panel
      /// </summary>
      [EnumMember(Value = "Steel/Panel")]
      SteelPanelEnum = 249,

      /// <summary>
      /// Enum StuccoTileEnum for Stucco/Tile
      /// </summary>
      [EnumMember(Value = "Stucco/Tile")]
      StuccoTileEnum = 250,

      /// <summary>
      /// Enum StuccoEnum for Stucco
      /// </summary>
      [EnumMember(Value = "Stucco")]
      StuccoEnum = 251,

      /// <summary>
      /// Enum StoneVeneerEnum for Stone Veneer
      /// </summary>
      [EnumMember(Value = "Stone Veneer")]
      StoneVeneerEnum = 252,

      /// <summary>
      /// Enum StuccoTileWoodEnum for Stucco/Tile/Wood
      /// </summary>
      [EnumMember(Value = "Stucco/Tile/Wood")]
      StuccoTileWoodEnum = 253,

      /// <summary>
      /// Enum StyrofoamStuccoEnum for Styrofoam Stucco
      /// </summary>
      [EnumMember(Value = "Styrofoam Stucco")]
      StyrofoamStuccoEnum = 254,

      /// <summary>
      /// Enum StuccoVinylEnum for Stucco/Vinyl
      /// </summary>
      [EnumMember(Value = "Stucco/Vinyl")]
      StuccoVinylEnum = 255,

      /// <summary>
      /// Enum StuccoVeneerEnum for Stucco/Veneer
      /// </summary>
      [EnumMember(Value = "Stucco/Veneer")]
      StuccoVeneerEnum = 256,

      /// <summary>
      /// Enum StoneVeneerWoodFrameEnum for Stone Veneer/Wood Frame
      /// </summary>
      [EnumMember(Value = "Stone Veneer/Wood Frame")]
      StoneVeneerWoodFrameEnum = 257,

      /// <summary>
      /// Enum StoneVinylEnum for Stone/Vinyl
      /// </summary>
      [EnumMember(Value = "Stone/Vinyl")]
      StoneVinylEnum = 258,

      /// <summary>
      /// Enum StoneVeneerWoodEnum for Stone/Veneer/Wood
      /// </summary>
      [EnumMember(Value = "Stone/Veneer/Wood")]
      StoneVeneerWoodEnum = 259,

      /// <summary>
      /// Enum StuccoWoodEnum for Stucco/Wood
      /// </summary>
      [EnumMember(Value = "Stucco/Wood")]
      StuccoWoodEnum = 260,

      /// <summary>
      /// Enum StuccoWoodFrameEnum for Stucco/Wood Frame
      /// </summary>
      [EnumMember(Value = "Stucco/Wood Frame")]
      StuccoWoodFrameEnum = 261,

      /// <summary>
      /// Enum StoneWoodFrameEnum for Stone/Wood Frame
      /// </summary>
      [EnumMember(Value = "Stone/Wood Frame")]
      StoneWoodFrameEnum = 262,

      /// <summary>
      /// Enum TarPaperEnum for Tar Paper
      /// </summary>
      [EnumMember(Value = "Tar Paper")]
      TarPaperEnum = 263,

      /// <summary>
      /// Enum TileEnum for Tile
      /// </summary>
      [EnumMember(Value = "Tile")]
      TileEnum = 264,

      /// <summary>
      /// Enum TiltUpConcreteEnum for Tilt-Up/Concrete
      /// </summary>
      [EnumMember(Value = "Tilt-Up/Concrete")]
      TiltUpConcreteEnum = 265,

      /// <summary>
      /// Enum TiltUpEnum for Tilt-Up
      /// </summary>
      [EnumMember(Value = "Tilt-Up")]
      TiltUpEnum = 266,

      /// <summary>
      /// Enum VinylEnum for Vinyl
      /// </summary>
      [EnumMember(Value = "Vinyl")]
      VinylEnum = 267,

      /// <summary>
      /// Enum VitroliteEnum for Vitrolite
      /// </summary>
      [EnumMember(Value = "Vitrolite")]
      VitroliteEnum = 268,

      /// <summary>
      /// Enum VinylWoodEnum for Vinyl/Wood
      /// </summary>
      [EnumMember(Value = "Vinyl/Wood")]
      VinylWoodEnum = 269,

      /// <summary>
      /// Enum WaferboardEnum for Waferboard
      /// </summary>
      [EnumMember(Value = "Waferboard")]
      WaferboardEnum = 270,

      /// <summary>
      /// Enum WoodAluminumCompositionShinEnum for Wood/Aluminum/Composition Shin
      /// </summary>
      [EnumMember(Value = "Wood/Aluminum/Composition Shin")]
      WoodAluminumCompositionShinEnum = 271,

      /// <summary>
      /// Enum WoodAluminumEnum for Wood/Aluminum
      /// </summary>
      [EnumMember(Value = "Wood/Aluminum")]
      WoodAluminumEnum = 272,

      /// <summary>
      /// Enum WoodFrameEnum for Wood Frame
      /// </summary>
      [EnumMember(Value = "Wood Frame")]
      WoodFrameEnum = 273,

      /// <summary>
      /// Enum WoodSidingShingleEnum for Wood Siding/Shingle
      /// </summary>
      [EnumMember(Value = "Wood Siding/Shingle")]
      WoodSidingShingleEnum = 274,

      /// <summary>
      /// Enum WoodSheathingEnum for Wood Sheathing
      /// </summary>
      [EnumMember(Value = "Wood Sheathing")]
      WoodSheathingEnum = 275,

      /// <summary>
      /// Enum WoodVeneerEnum for Wood Veneer
      /// </summary>
      [EnumMember(Value = "Wood Veneer")]
      WoodVeneerEnum = 276,

      /// <summary>
      /// Enum WoodFrameAsbestosEnum for Wood Frame/Asbestos
      /// </summary>
      [EnumMember(Value = "Wood Frame/Asbestos")]
      WoodFrameAsbestosEnum = 277,

      /// <summary>
      /// Enum WoodFrameSidingEnum for Wood Frame/Siding
      /// </summary>
      [EnumMember(Value = "Wood Frame/Siding")]
      WoodFrameSidingEnum = 278,

      /// <summary>
      /// Enum WoodFrameVinylEnum for Wood Frame/Vinyl
      /// </summary>
      [EnumMember(Value = "Wood Frame/Vinyl")]
      WoodFrameVinylEnum = 279,

      /// <summary>
      /// Enum WoodFrameStuccoOrAsbestosEnum for Wood Frame(Stucco Or Asbestos)
      /// </summary>
      [EnumMember(Value = "Wood Frame(Stucco Or Asbestos)")]
      WoodFrameStuccoOrAsbestosEnum = 280,

      /// <summary>
      /// Enum WallboardEnum for Wallboard
      /// </summary>
      [EnumMember(Value = "Wallboard")]
      WallboardEnum = 281,

      /// <summary>
      /// Enum WoodEnum for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum = 282,

      /// <summary>
      /// Enum WoodSidingEnum for Wood Siding
      /// </summary>
      [EnumMember(Value = "Wood Siding")]
      WoodSidingEnum = 283,

      /// <summary>
      /// Enum WeatherboardEnum for Weatherboard
      /// </summary>
      [EnumMember(Value = "Weatherboard")]
      WeatherboardEnum = 284,

      /// <summary>
      /// Enum WoodShakeShingleEnum for Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Wood Shake/Shingle")]
      WoodShakeShingleEnum = 285,

      /// <summary>
      /// Enum WindowWallEnum for Window Wall
      /// </summary>
      [EnumMember(Value = "Window Wall")]
      WindowWallEnum = 286,

      /// <summary>
      /// Enum WallboardWoodShingleEnum for Wallboard/Wood Shingle
      /// </summary>
      [EnumMember(Value = "Wallboard/Wood Shingle")]
      WallboardWoodShingleEnum = 287,

      /// <summary>
      /// Enum CbsHolwTileFrStudSheatSdEnum for Cbs/Holw Tile/Fr/Stud/Sheat/Sd
      /// </summary>
      [EnumMember(Value = "Cbs/Holw Tile/Fr/Stud/Sheat/Sd")]
      CbsHolwTileFrStudSheatSdEnum = 288
    }

    /// <summary>
    /// The type and/or finish of the exterior walls (e.g., Vinyl Siding, Brick Veneer, Frame / Stone).
    /// </summary>
    /// <value>The type and/or finish of the exterior walls (e.g., Vinyl Siding, Brick Veneer, Frame / Stone). </value>
    [DataMember(Name = "ExteriorWallType", EmitDefaultValue = false)]
    public ExteriorWallTypeEnum ExteriorWallType { get; set; }


    /// <summary>
    /// The type of floor construction (e.g., Concrete, Plywood).
    /// </summary>
    /// <value>The type of floor construction (e.g., Concrete, Plywood). </value>
    [TypeConverter(typeof(CustomEnumConverter<FloorTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FloorTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum CoveredEnum for Covered
      /// </summary>
      [EnumMember(Value = "Covered")]
      CoveredEnum = 3,

      /// <summary>
      /// Enum AsbestosTileEnum for Asbestos Tile
      /// </summary>
      [EnumMember(Value = "Asbestos Tile")]
      AsbestosTileEnum = 4,

      /// <summary>
      /// Enum AsphaltEnum for Asphalt
      /// </summary>
      [EnumMember(Value = "Asphalt")]
      AsphaltEnum = 5,

      /// <summary>
      /// Enum AsphaltTileEnum for Asphalt Tile
      /// </summary>
      [EnumMember(Value = "Asphalt Tile")]
      AsphaltTileEnum = 6,

      /// <summary>
      /// Enum AsphaltTileWoodEnum for Asphalt Tile/Wood
      /// </summary>
      [EnumMember(Value = "Asphalt Tile/Wood")]
      AsphaltTileWoodEnum = 7,

      /// <summary>
      /// Enum CarpetEnum for Carpet
      /// </summary>
      [EnumMember(Value = "Carpet")]
      CarpetEnum = 8,

      /// <summary>
      /// Enum CarpetHardwoodEnum for Carpet/Hardwood
      /// </summary>
      [EnumMember(Value = "Carpet/Hardwood")]
      CarpetHardwoodEnum = 9,

      /// <summary>
      /// Enum CarpetParquetEnum for Carpet/Parquet
      /// </summary>
      [EnumMember(Value = "Carpet/Parquet")]
      CarpetParquetEnum = 10,

      /// <summary>
      /// Enum CarpetTileEnum for Carpet/Tile
      /// </summary>
      [EnumMember(Value = "Carpet/Tile")]
      CarpetTileEnum = 11,

      /// <summary>
      /// Enum CarpetTileWoodEnum for Carpet/Tile/Wood
      /// </summary>
      [EnumMember(Value = "Carpet/Tile/Wood")]
      CarpetTileWoodEnum = 12,

      /// <summary>
      /// Enum CarpetVinylEnum for Carpet/Vinyl
      /// </summary>
      [EnumMember(Value = "Carpet/Vinyl")]
      CarpetVinylEnum = 13,

      /// <summary>
      /// Enum CarpetWoodEnum for Carpet/Wood
      /// </summary>
      [EnumMember(Value = "Carpet/Wood")]
      CarpetWoodEnum = 14,

      /// <summary>
      /// Enum CementTileEnum for Cement Tile
      /// </summary>
      [EnumMember(Value = "Cement Tile")]
      CementTileEnum = 15,

      /// <summary>
      /// Enum CeramicTileEnum for Ceramic Tile
      /// </summary>
      [EnumMember(Value = "Ceramic Tile")]
      CeramicTileEnum = 16,

      /// <summary>
      /// Enum CeramicQuarryTileEnum for Ceramic/Quarry Tile
      /// </summary>
      [EnumMember(Value = "Ceramic/Quarry Tile")]
      CeramicQuarryTileEnum = 17,

      /// <summary>
      /// Enum CeramicTerrazzoTileEnum for Ceramic/Terrazzo Tile
      /// </summary>
      [EnumMember(Value = "Ceramic/Terrazzo Tile")]
      CeramicTerrazzoTileEnum = 18,

      /// <summary>
      /// Enum CeramicVinylTileEnum for Ceramic/Vinyl Tile
      /// </summary>
      [EnumMember(Value = "Ceramic/Vinyl Tile")]
      CeramicVinylTileEnum = 19,

      /// <summary>
      /// Enum ClayTileEnum for Clay Tile
      /// </summary>
      [EnumMember(Value = "Clay Tile")]
      ClayTileEnum = 20,

      /// <summary>
      /// Enum CombinationEnum for Combination
      /// </summary>
      [EnumMember(Value = "Combination")]
      CombinationEnum = 21,

      /// <summary>
      /// Enum CompositionTileEnum for Composition Tile
      /// </summary>
      [EnumMember(Value = "Composition Tile")]
      CompositionTileEnum = 22,

      /// <summary>
      /// Enum CorkTileEnum for Cork Tile
      /// </summary>
      [EnumMember(Value = "Cork Tile")]
      CorkTileEnum = 23,

      /// <summary>
      /// Enum EpoxyEnum for Epoxy
      /// </summary>
      [EnumMember(Value = "Epoxy")]
      EpoxyEnum = 24,

      /// <summary>
      /// Enum FirEnum for Fir
      /// </summary>
      [EnumMember(Value = "Fir")]
      FirEnum = 25,

      /// <summary>
      /// Enum FlagstoneEnum for Flagstone
      /// </summary>
      [EnumMember(Value = "Flagstone")]
      FlagstoneEnum = 26,

      /// <summary>
      /// Enum LinoleumEnum for Linoleum
      /// </summary>
      [EnumMember(Value = "Linoleum")]
      LinoleumEnum = 27,

      /// <summary>
      /// Enum GlazedTileEnum for Glazed Tile
      /// </summary>
      [EnumMember(Value = "Glazed Tile")]
      GlazedTileEnum = 28,

      /// <summary>
      /// Enum HardSoftwoodEnum for Hard/Softwood
      /// </summary>
      [EnumMember(Value = "Hard/Softwood")]
      HardSoftwoodEnum = 29,

      /// <summary>
      /// Enum SteelJoistEnum for Steel Joist
      /// </summary>
      [EnumMember(Value = "Steel Joist")]
      SteelJoistEnum = 30,

      /// <summary>
      /// Enum SteelEnum for Steel
      /// </summary>
      [EnumMember(Value = "Steel")]
      SteelEnum = 31,

      /// <summary>
      /// Enum SteelBeamsEnum for Steel Beams
      /// </summary>
      [EnumMember(Value = "Steel Beams")]
      SteelBeamsEnum = 32,

      /// <summary>
      /// Enum WoodJoistEnum for Wood Joist
      /// </summary>
      [EnumMember(Value = "Wood Joist")]
      WoodJoistEnum = 33,

      /// <summary>
      /// Enum RaisedEnum for Raised
      /// </summary>
      [EnumMember(Value = "Raised")]
      RaisedEnum = 34,

      /// <summary>
      /// Enum HardwoodParquetEnum for Hardwood/Parquet
      /// </summary>
      [EnumMember(Value = "Hardwood/Parquet")]
      HardwoodParquetEnum = 35,

      /// <summary>
      /// Enum HardwoodEnum for Hardwood
      /// </summary>
      [EnumMember(Value = "Hardwood")]
      HardwoodEnum = 36,

      /// <summary>
      /// Enum HardwoodMarbleEnum for Hardwood/Marble
      /// </summary>
      [EnumMember(Value = "Hardwood/Marble")]
      HardwoodMarbleEnum = 37,

      /// <summary>
      /// Enum HardwoodTerrazzoEnum for Hardwood/Terrazzo
      /// </summary>
      [EnumMember(Value = "Hardwood/Terrazzo")]
      HardwoodTerrazzoEnum = 38,

      /// <summary>
      /// Enum HardwoodTileEnum for Hardwood/Tile
      /// </summary>
      [EnumMember(Value = "Hardwood/Tile")]
      HardwoodTileEnum = 39,

      /// <summary>
      /// Enum MapleEnum for Maple
      /// </summary>
      [EnumMember(Value = "Maple")]
      MapleEnum = 40,

      /// <summary>
      /// Enum MosaicTileEnum for Mosaic Tile
      /// </summary>
      [EnumMember(Value = "Mosaic Tile")]
      MosaicTileEnum = 41,

      /// <summary>
      /// Enum OakEnum for Oak
      /// </summary>
      [EnumMember(Value = "Oak")]
      OakEnum = 42,

      /// <summary>
      /// Enum ParquetEnum for Parquet
      /// </summary>
      [EnumMember(Value = "Parquet")]
      ParquetEnum = 43,

      /// <summary>
      /// Enum ParquetTileEnum for Parquet/Tile
      /// </summary>
      [EnumMember(Value = "Parquet/Tile")]
      ParquetTileEnum = 44,

      /// <summary>
      /// Enum PineEnum for Pine
      /// </summary>
      [EnumMember(Value = "Pine")]
      PineEnum = 45,

      /// <summary>
      /// Enum PineAsphaltTileEnum for Pine/Asphalt Tile
      /// </summary>
      [EnumMember(Value = "Pine/Asphalt Tile")]
      PineAsphaltTileEnum = 46,

      /// <summary>
      /// Enum PineSoftwoodEnum for Pine/Softwood
      /// </summary>
      [EnumMember(Value = "Pine/Softwood")]
      PineSoftwoodEnum = 47,

      /// <summary>
      /// Enum PineTileEnum for Pine/Tile
      /// </summary>
      [EnumMember(Value = "Pine/Tile")]
      PineTileEnum = 48,

      /// <summary>
      /// Enum QuarryTileEnum for Quarry Tile
      /// </summary>
      [EnumMember(Value = "Quarry Tile")]
      QuarryTileEnum = 49,

      /// <summary>
      /// Enum ResilientEnum for Resilient
      /// </summary>
      [EnumMember(Value = "Resilient")]
      ResilientEnum = 50,

      /// <summary>
      /// Enum RubberEnum for Rubber
      /// </summary>
      [EnumMember(Value = "Rubber")]
      RubberEnum = 51,

      /// <summary>
      /// Enum RubberTileEnum for Rubber/Tile
      /// </summary>
      [EnumMember(Value = "Rubber/Tile")]
      RubberTileEnum = 52,

      /// <summary>
      /// Enum SlateFloorEnum for Slate Floor
      /// </summary>
      [EnumMember(Value = "Slate Floor")]
      SlateFloorEnum = 53,

      /// <summary>
      /// Enum SlateCeramicTileEnum for Slate/Ceramic Tile
      /// </summary>
      [EnumMember(Value = "Slate/Ceramic Tile")]
      SlateCeramicTileEnum = 54,

      /// <summary>
      /// Enum SlateStoneEnum for Slate/Stone
      /// </summary>
      [EnumMember(Value = "Slate/Stone")]
      SlateStoneEnum = 55,

      /// <summary>
      /// Enum SoftwoodEnum for Softwood
      /// </summary>
      [EnumMember(Value = "Softwood")]
      SoftwoodEnum = 56,

      /// <summary>
      /// Enum StoneEnum for Stone
      /// </summary>
      [EnumMember(Value = "Stone")]
      StoneEnum = 57,

      /// <summary>
      /// Enum TerrazzoEnum for Terrazzo
      /// </summary>
      [EnumMember(Value = "Terrazzo")]
      TerrazzoEnum = 58,

      /// <summary>
      /// Enum TerrazzoMarbleEnum for Terrazzo/Marble
      /// </summary>
      [EnumMember(Value = "Terrazzo/Marble")]
      TerrazzoMarbleEnum = 59,

      /// <summary>
      /// Enum TileEnum for Tile
      /// </summary>
      [EnumMember(Value = "Tile")]
      TileEnum = 60,

      /// <summary>
      /// Enum VinylEnum for Vinyl
      /// </summary>
      [EnumMember(Value = "Vinyl")]
      VinylEnum = 61,

      /// <summary>
      /// Enum VinylCompositionTileEnum for Vinyl Composition/Tile
      /// </summary>
      [EnumMember(Value = "Vinyl Composition/Tile")]
      VinylCompositionTileEnum = 62,

      /// <summary>
      /// Enum VinylSheetEnum for Vinyl Sheet
      /// </summary>
      [EnumMember(Value = "Vinyl Sheet")]
      VinylSheetEnum = 63,

      /// <summary>
      /// Enum VinylSheetingEnum for Vinyl Sheeting
      /// </summary>
      [EnumMember(Value = "Vinyl Sheeting")]
      VinylSheetingEnum = 64,

      /// <summary>
      /// Enum VinylTileEnum for Vinyl Tile
      /// </summary>
      [EnumMember(Value = "Vinyl Tile")]
      VinylTileEnum = 65,

      /// <summary>
      /// Enum VinylAsbestosEnum for Vinyl/Asbestos
      /// </summary>
      [EnumMember(Value = "Vinyl/Asbestos")]
      VinylAsbestosEnum = 66,

      /// <summary>
      /// Enum VinylAsbestosTileEnum for Vinyl/Asbestos Tile
      /// </summary>
      [EnumMember(Value = "Vinyl/Asbestos Tile")]
      VinylAsbestosTileEnum = 67,

      /// <summary>
      /// Enum VinylAsphaltEnum for Vinyl/Asphalt
      /// </summary>
      [EnumMember(Value = "Vinyl/Asphalt")]
      VinylAsphaltEnum = 68,

      /// <summary>
      /// Enum VinylCorkTileEnum for Vinyl/Cork Tile
      /// </summary>
      [EnumMember(Value = "Vinyl/Cork Tile")]
      VinylCorkTileEnum = 69,

      /// <summary>
      /// Enum VinylSoftwoodEnum for Vinyl/Softwood
      /// </summary>
      [EnumMember(Value = "Vinyl/Softwood")]
      VinylSoftwoodEnum = 70,

      /// <summary>
      /// Enum VinylWoodEnum for Vinyl/Wood
      /// </summary>
      [EnumMember(Value = "Vinyl/Wood")]
      VinylWoodEnum = 71,

      /// <summary>
      /// Enum MarbleEnum for Marble
      /// </summary>
      [EnumMember(Value = "Marble")]
      MarbleEnum = 72,

      /// <summary>
      /// Enum TileWoodEnum for Tile/Wood
      /// </summary>
      [EnumMember(Value = "Tile/Wood")]
      TileWoodEnum = 73,

      /// <summary>
      /// Enum WoodAsbestosTileCarpetEnum for Wood/Asbestos Tile/Carpet
      /// </summary>
      [EnumMember(Value = "Wood/Asbestos Tile/Carpet")]
      WoodAsbestosTileCarpetEnum = 74,

      /// <summary>
      /// Enum WoodCarpetTileEnum for Wood/Carpet/Tile
      /// </summary>
      [EnumMember(Value = "Wood/Carpet/Tile")]
      WoodCarpetTileEnum = 75,

      /// <summary>
      /// Enum WoodDeckEnum for Wood Deck
      /// </summary>
      [EnumMember(Value = "Wood Deck")]
      WoodDeckEnum = 76,

      /// <summary>
      /// Enum WoodCarpetVinylTileEnum for Wood/Carpet/Vinyl Tile
      /// </summary>
      [EnumMember(Value = "Wood/Carpet/Vinyl Tile")]
      WoodCarpetVinylTileEnum = 77,

      /// <summary>
      /// Enum WoodEnum for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum = 78,

      /// <summary>
      /// Enum SteelJoistWoodEnum for Steel Joist.Wood
      /// </summary>
      [EnumMember(Value = "Steel Joist.Wood")]
      SteelJoistWoodEnum = 79,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 80,

      /// <summary>
      /// Enum ConcreteEnum for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum = 81,

      /// <summary>
      /// Enum ConcreteAsphaltTileEnum for Concrete.Asphalt Tile
      /// </summary>
      [EnumMember(Value = "Concrete.Asphalt Tile")]
      ConcreteAsphaltTileEnum = 82,

      /// <summary>
      /// Enum ConcreteCarpetEnum for Concrete.Carpet
      /// </summary>
      [EnumMember(Value = "Concrete.Carpet")]
      ConcreteCarpetEnum = 83,

      /// <summary>
      /// Enum ConcreteHardwoodAsphaltTileEnum for Concrete.Hardwood/Asphalt Tile
      /// </summary>
      [EnumMember(Value = "Concrete.Hardwood/Asphalt Tile")]
      ConcreteHardwoodAsphaltTileEnum = 84,

      /// <summary>
      /// Enum ConcreteHardwoodTerrazzoEnum for Concrete.Hardwood/Terrazzo
      /// </summary>
      [EnumMember(Value = "Concrete.Hardwood/Terrazzo")]
      ConcreteHardwoodTerrazzoEnum = 85,

      /// <summary>
      /// Enum ConcreteParquetAsphaltTileEnum for Concrete.Parquet/Asphalt Tile
      /// </summary>
      [EnumMember(Value = "Concrete.Parquet/Asphalt Tile")]
      ConcreteParquetAsphaltTileEnum = 86,

      /// <summary>
      /// Enum ConcretePineEnum for Concrete.Pine
      /// </summary>
      [EnumMember(Value = "Concrete.Pine")]
      ConcretePineEnum = 87,

      /// <summary>
      /// Enum ConcreteResilientEnum for Concrete.Resilient
      /// </summary>
      [EnumMember(Value = "Concrete.Resilient")]
      ConcreteResilientEnum = 88,

      /// <summary>
      /// Enum ConcreteTerrazzoEnum for Concrete.Terrazzo
      /// </summary>
      [EnumMember(Value = "Concrete.Terrazzo")]
      ConcreteTerrazzoEnum = 89,

      /// <summary>
      /// Enum ConcreteTileEnum for Concrete.Tile
      /// </summary>
      [EnumMember(Value = "Concrete.Tile")]
      ConcreteTileEnum = 90,

      /// <summary>
      /// Enum ConcreteWoodTerrazzoEnum for Concrete.Wood/Terrazzo
      /// </summary>
      [EnumMember(Value = "Concrete.Wood/Terrazzo")]
      ConcreteWoodTerrazzoEnum = 91,

      /// <summary>
      /// Enum WoodEnum2 for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum2 = 92,

      /// <summary>
      /// Enum WoodCarpetEnum for Wood.Carpet
      /// </summary>
      [EnumMember(Value = "Wood.Carpet")]
      WoodCarpetEnum = 93,

      /// <summary>
      /// Enum PlywoodEnum for Plywood
      /// </summary>
      [EnumMember(Value = "Plywood")]
      PlywoodEnum = 94,

      /// <summary>
      /// Enum PlywoodCarpetEnum for Plywood.Carpet
      /// </summary>
      [EnumMember(Value = "Plywood.Carpet")]
      PlywoodCarpetEnum = 95,

      /// <summary>
      /// Enum PlywoodVinylSheetingEnum for Plywood.Vinyl Sheeting
      /// </summary>
      [EnumMember(Value = "Plywood.Vinyl Sheeting")]
      PlywoodVinylSheetingEnum = 96,

      /// <summary>
      /// Enum ConcreteAsphaltEnum for Concrete/Asphalt
      /// </summary>
      [EnumMember(Value = "Concrete/Asphalt")]
      ConcreteAsphaltEnum = 97,

      /// <summary>
      /// Enum ConcreteAsphaltCarpetEnum for Concrete/Asphalt.Carpet
      /// </summary>
      [EnumMember(Value = "Concrete/Asphalt.Carpet")]
      ConcreteAsphaltCarpetEnum = 98,

      /// <summary>
      /// Enum BrickEnum for Brick
      /// </summary>
      [EnumMember(Value = "Brick")]
      BrickEnum = 99,

      /// <summary>
      /// Enum BrickQuarryTileEnum for Brick.Quarry Tile
      /// </summary>
      [EnumMember(Value = "Brick.Quarry Tile")]
      BrickQuarryTileEnum = 100,

      /// <summary>
      /// Enum AcrylicEnum for Acrylic
      /// </summary>
      [EnumMember(Value = "Acrylic")]
      AcrylicEnum = 101,

      /// <summary>
      /// Enum AcrylicVinylEnum for Acrylic.Vinyl
      /// </summary>
      [EnumMember(Value = "Acrylic.Vinyl")]
      AcrylicVinylEnum = 102,

      /// <summary>
      /// Enum VinylEnum2 for Vinyl
      /// </summary>
      [EnumMember(Value = "Vinyl")]
      VinylEnum2 = 103,

      /// <summary>
      /// Enum AsbestosVinylEnum for Asbestos.Vinyl
      /// </summary>
      [EnumMember(Value = "Asbestos.Vinyl")]
      AsbestosVinylEnum = 104,

      /// <summary>
      /// Enum AsbestosVinylTileEnum for Asbestos.Vinyl Tile
      /// </summary>
      [EnumMember(Value = "Asbestos.Vinyl Tile")]
      AsbestosVinylTileEnum = 105,

      /// <summary>
      /// Enum GravelEnum for Gravel
      /// </summary>
      [EnumMember(Value = "Gravel")]
      GravelEnum = 106,

      /// <summary>
      /// Enum SlateEnum for Slate
      /// </summary>
      [EnumMember(Value = "Slate")]
      SlateEnum = 107,

      /// <summary>
      /// Enum DirtEnum for Dirt
      /// </summary>
      [EnumMember(Value = "Dirt")]
      DirtEnum = 108,

      /// <summary>
      /// Enum CinderBlockEnum for Cinder Block
      /// </summary>
      [EnumMember(Value = "Cinder Block")]
      CinderBlockEnum = 109,

      /// <summary>
      /// Enum AsphaltEnum2 for Asphalt
      /// </summary>
      [EnumMember(Value = "Asphalt")]
      AsphaltEnum2 = 110,

      /// <summary>
      /// Enum BrickStoneEnum for Brick/Stone
      /// </summary>
      [EnumMember(Value = "Brick/Stone")]
      BrickStoneEnum = 111,

      /// <summary>
      /// Enum BrickStoneSlateEnum for Brick/Stone/Slate
      /// </summary>
      [EnumMember(Value = "Brick/Stone/Slate")]
      BrickStoneSlateEnum = 112,

      /// <summary>
      /// Enum MetalDeckEnum for Metal Deck
      /// </summary>
      [EnumMember(Value = "Metal Deck")]
      MetalDeckEnum = 113,

      /// <summary>
      /// Enum PrecastConcreteEnum for Precast Concrete
      /// </summary>
      [EnumMember(Value = "Precast Concrete")]
      PrecastConcreteEnum = 114,

      /// <summary>
      /// Enum MetalGratingEnum for Metal Grating
      /// </summary>
      [EnumMember(Value = "Metal Grating")]
      MetalGratingEnum = 115,

      /// <summary>
      /// Enum CorrugatedDeckEnum for Corrugated Deck
      /// </summary>
      [EnumMember(Value = "Corrugated Deck")]
      CorrugatedDeckEnum = 116,

      /// <summary>
      /// Enum CorrugatedDeckSteelEnum for Corrugated Deck.Steel
      /// </summary>
      [EnumMember(Value = "Corrugated Deck.Steel")]
      CorrugatedDeckSteelEnum = 117,

      /// <summary>
      /// Enum WoodSheathingEnum for Wood Sheathing
      /// </summary>
      [EnumMember(Value = "Wood Sheathing")]
      WoodSheathingEnum = 118,

      /// <summary>
      /// Enum WoodSheathingSteelEnum for Wood Sheathing.Steel
      /// </summary>
      [EnumMember(Value = "Wood Sheathing.Steel")]
      WoodSheathingSteelEnum = 119,

      /// <summary>
      /// Enum SteelFlatSlabEnum for Steel-Flat-Slab
      /// </summary>
      [EnumMember(Value = "Steel-Flat-Slab")]
      SteelFlatSlabEnum = 120,

      /// <summary>
      /// Enum SubFlooringEnum for Sub-Flooring
      /// </summary>
      [EnumMember(Value = "Sub-Flooring")]
      SubFlooringEnum = 121,

      /// <summary>
      /// Enum WoodHardwoodPressedConcreteEnum for Wood/Hardwood/Pressed Concrete
      /// </summary>
      [EnumMember(Value = "Wood/Hardwood/Pressed Concrete")]
      WoodHardwoodPressedConcreteEnum = 122,

      /// <summary>
      /// Enum TeakwoodParquetEnum for Teakwood/Parquet
      /// </summary>
      [EnumMember(Value = "Teakwood/Parquet")]
      TeakwoodParquetEnum = 123,

      /// <summary>
      /// Enum TerrazzoVinylDontUseEnum for Terrazzo/Vinyl_- Dont Use
      /// </summary>
      [EnumMember(Value = "Terrazzo/Vinyl_- Dont Use")]
      TerrazzoVinylDontUseEnum = 124,

      /// <summary>
      /// Enum PineConcOrDontUseEnum for Pine/Conc Or Dont Use
      /// </summary>
      [EnumMember(Value = "Pine/Conc Or Dont Use")]
      PineConcOrDontUseEnum = 125,

      /// <summary>
      /// Enum CeramicTilePreDontUseEnum for Ceramic Tile/Pre Dont Use
      /// </summary>
      [EnumMember(Value = "Ceramic Tile/Pre Dont Use")]
      CeramicTilePreDontUseEnum = 126,

      /// <summary>
      /// Enum BarJoistGypsumDontUseEnum for Bar Joist/Gypsum - Dont Use
      /// </summary>
      [EnumMember(Value = "Bar Joist/Gypsum - Dont Use")]
      BarJoistGypsumDontUseEnum = 127,

      /// <summary>
      /// Enum ConcreteSteelJoistDontUseEnum for Concrete/Steel Joist/ Dont Use
      /// </summary>
      [EnumMember(Value = "Concrete/Steel Joist/ Dont Use")]
      ConcreteSteelJoistDontUseEnum = 128,

      /// <summary>
      /// Enum PrecastElevatedFlrDontUseEnum for Precast/Elevated Flr Dont Use
      /// </summary>
      [EnumMember(Value = "Precast/Elevated Flr Dont Use")]
      PrecastElevatedFlrDontUseEnum = 129,

      /// <summary>
      /// Enum SteelJoistSlabRDontUseEnum for Steel Joist/Slab/R Dont Use
      /// </summary>
      [EnumMember(Value = "Steel Joist/Slab/R Dont Use")]
      SteelJoistSlabRDontUseEnum = 130,

      /// <summary>
      /// Enum AsphaltTileConcGroundSlabEnum for Asphalt Tile/Conc Ground Slab
      /// </summary>
      [EnumMember(Value = "Asphalt Tile/Conc Ground Slab")]
      AsphaltTileConcGroundSlabEnum = 131,

      /// <summary>
      /// Enum SlabDontUseEnum for Slab - Dont Use
      /// </summary>
      [EnumMember(Value = "Slab - Dont Use")]
      SlabDontUseEnum = 132,

      /// <summary>
      /// Enum TerrazzoTileCarpetDontUseEnum for Terrazzo/Tile&Carpet-Dont Use
      /// </summary>
      [EnumMember(Value = "Terrazzo/Tile&Carpet-Dont Use")]
      TerrazzoTileCarpetDontUseEnum = 133
    }

    /// <summary>
    /// The type of floor construction (e.g., Concrete, Plywood).
    /// </summary>
    /// <value>The type of floor construction (e.g., Concrete, Plywood). </value>
    [DataMember(Name = "FloorType", EmitDefaultValue = false)]
    public FloorTypeEnum FloorType { get; set; }


    /// <summary>
    /// Type of roof (e.g., Gambrel, Gable, Flat, Mansard) and type of roof covering (e.g., Clay Tile, Aluminum, Shake).
    /// </summary>
    /// <value>Type of roof (e.g., Gambrel, Gable, Flat, Mansard) and type of roof covering (e.g., Clay Tile, Aluminum, Shake). </value>
    [TypeConverter(typeof(CustomEnumConverter<RoofTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum RoofTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum AsphaltShingleEnum for Asphalt Shingle
      /// </summary>
      [EnumMember(Value = "Asphalt Shingle")]
      AsphaltShingleEnum = 3,

      /// <summary>
      /// Enum BuiltUpEnum for Built Up
      /// </summary>
      [EnumMember(Value = "Built Up")]
      BuiltUpEnum = 4,

      /// <summary>
      /// Enum AluminumEnum for Aluminum
      /// </summary>
      [EnumMember(Value = "Aluminum")]
      AluminumEnum = 5,

      /// <summary>
      /// Enum CustomEnum for Custom
      /// </summary>
      [EnumMember(Value = "Custom")]
      CustomEnum = 6,

      /// <summary>
      /// Enum BarJoistWdJoistSheathEnum for Bar Joist/Wd Joist/Sheath
      /// </summary>
      [EnumMember(Value = "Bar Joist/Wd Joist/Sheath")]
      BarJoistWdJoistSheathEnum = 7,

      /// <summary>
      /// Enum BarJoistEnum for Bar Joist
      /// </summary>
      [EnumMember(Value = "Bar Joist")]
      BarJoistEnum = 8,

      /// <summary>
      /// Enum ConcreteEnum for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum = 9,

      /// <summary>
      /// Enum BarJoistWoodDeckEnum for Bar Joist & Wood Deck
      /// </summary>
      [EnumMember(Value = "Bar Joist & Wood Deck")]
      BarJoistWoodDeckEnum = 10,

      /// <summary>
      /// Enum MetalPipeEnum for Metal Pipe
      /// </summary>
      [EnumMember(Value = "Metal Pipe")]
      MetalPipeEnum = 11,

      /// <summary>
      /// Enum WoodFrameEnum for Wood Frame
      /// </summary>
      [EnumMember(Value = "Wood Frame")]
      WoodFrameEnum = 12,

      /// <summary>
      /// Enum BowstringEnum for Bowstring
      /// </summary>
      [EnumMember(Value = "Bowstring")]
      BowstringEnum = 13,

      /// <summary>
      /// Enum BarJoistGypWdJoistSheathEnum for Bar Joist/Gyp/Wd Joist/Sheath
      /// </summary>
      [EnumMember(Value = "Bar Joist/Gyp/Wd Joist/Sheath")]
      BarJoistGypWdJoistSheathEnum = 14,

      /// <summary>
      /// Enum ConcJstSlabBarJstCoredPlEnum for Conc Jst/Slab/Bar/Jst/Cored Pl
      /// </summary>
      [EnumMember(Value = "Conc Jst/Slab/Bar/Jst/Cored Pl")]
      ConcJstSlabBarJstCoredPlEnum = 15,

      /// <summary>
      /// Enum BarJoistConcreteDeckEnum for Bar Joist & Concrete Deck
      /// </summary>
      [EnumMember(Value = "Bar Joist & Concrete Deck")]
      BarJoistConcreteDeckEnum = 16,

      /// <summary>
      /// Enum BarJoistGypsumEnum for Bar Joist/Gypsum
      /// </summary>
      [EnumMember(Value = "Bar Joist/Gypsum")]
      BarJoistGypsumEnum = 17,

      /// <summary>
      /// Enum FlexibleFlexicoreEnum for Flexible/Flexicore
      /// </summary>
      [EnumMember(Value = "Flexible/Flexicore")]
      FlexibleFlexicoreEnum = 18,

      /// <summary>
      /// Enum MetalEnum for Metal
      /// </summary>
      [EnumMember(Value = "Metal")]
      MetalEnum = 19,

      /// <summary>
      /// Enum ConcreteJoistSlabEnum for Concrete Joist/Slab
      /// </summary>
      [EnumMember(Value = "Concrete Joist/Slab")]
      ConcreteJoistSlabEnum = 20,

      /// <summary>
      /// Enum ReinforcedConcreteEnum for Reinforced Concrete
      /// </summary>
      [EnumMember(Value = "Reinforced Concrete")]
      ReinforcedConcreteEnum = 21,

      /// <summary>
      /// Enum LongspanTrussEnum for Longspan Truss
      /// </summary>
      [EnumMember(Value = "Longspan Truss")]
      LongspanTrussEnum = 22,

      /// <summary>
      /// Enum PrestressConcreteEnum for Prestress Concrete
      /// </summary>
      [EnumMember(Value = "Prestress Concrete")]
      PrestressConcreteEnum = 23,

      /// <summary>
      /// Enum BarJoistRigidFrameEnum for Bar Joist & Rigid Frame
      /// </summary>
      [EnumMember(Value = "Bar Joist & Rigid Frame")]
      BarJoistRigidFrameEnum = 24,

      /// <summary>
      /// Enum SteelEnum for Steel
      /// </summary>
      [EnumMember(Value = "Steel")]
      SteelEnum = 25,

      /// <summary>
      /// Enum TrussJoistEnum for Truss/Joist
      /// </summary>
      [EnumMember(Value = "Truss/Joist")]
      TrussJoistEnum = 26,

      /// <summary>
      /// Enum StlJstMtlDckSlabConJstEnum for Stl Jst/Mtl Dck/Slab/Con Jst
      /// </summary>
      [EnumMember(Value = "Stl Jst/Mtl Dck/Slab/Con Jst")]
      StlJstMtlDckSlabConJstEnum = 27,

      /// <summary>
      /// Enum ConcJstSlabStlJstEnum for Conc Jst/Slab/Stl Jst
      /// </summary>
      [EnumMember(Value = "Conc Jst/Slab/Stl Jst")]
      ConcJstSlabStlJstEnum = 28,

      /// <summary>
      /// Enum WoodEnum for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum = 29,

      /// <summary>
      /// Enum WoodJoistEnum for Wood Joist
      /// </summary>
      [EnumMember(Value = "Wood Joist")]
      WoodJoistEnum = 30,

      /// <summary>
      /// Enum WoodOnSteelEnum for Wood On Steel
      /// </summary>
      [EnumMember(Value = "Wood On Steel")]
      WoodOnSteelEnum = 31,

      /// <summary>
      /// Enum WoodTrussEnum for Wood Truss
      /// </summary>
      [EnumMember(Value = "Wood Truss")]
      WoodTrussEnum = 32,

      /// <summary>
      /// Enum AsbestosEnum for Asbestos
      /// </summary>
      [EnumMember(Value = "Asbestos")]
      AsbestosEnum = 33,

      /// <summary>
      /// Enum AsbestosShingleEnum for Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Asbestos Shingle")]
      AsbestosShingleEnum = 34,

      /// <summary>
      /// Enum CompositionEnum for Composition
      /// </summary>
      [EnumMember(Value = "Composition")]
      CompositionEnum = 35,

      /// <summary>
      /// Enum CompositionRollEnum for Composition Roll
      /// </summary>
      [EnumMember(Value = "Composition Roll")]
      CompositionRollEnum = 36,

      /// <summary>
      /// Enum CompositionShingleEnum for Composition Shingle
      /// </summary>
      [EnumMember(Value = "Composition Shingle")]
      CompositionShingleEnum = 37,

      /// <summary>
      /// Enum ConcreteEnum2 for Concrete
      /// </summary>
      [EnumMember(Value = "Concrete")]
      ConcreteEnum2 = 38,

      /// <summary>
      /// Enum CopperEnum for Copper
      /// </summary>
      [EnumMember(Value = "Copper")]
      CopperEnum = 39,

      /// <summary>
      /// Enum CopperShingleEnum for Copper/Shingle
      /// </summary>
      [EnumMember(Value = "Copper/Shingle")]
      CopperShingleEnum = 40,

      /// <summary>
      /// Enum GalvanizedSheetMetalEnum for Galvanized Sheet Metal
      /// </summary>
      [EnumMember(Value = "Galvanized Sheet Metal")]
      GalvanizedSheetMetalEnum = 41,

      /// <summary>
      /// Enum GypsumEnum for Gypsum
      /// </summary>
      [EnumMember(Value = "Gypsum")]
      GypsumEnum = 42,

      /// <summary>
      /// Enum MetalSheetingEnum for Metal Sheeting
      /// </summary>
      [EnumMember(Value = "Metal Sheeting")]
      MetalSheetingEnum = 43,

      /// <summary>
      /// Enum RollEnum for Roll
      /// </summary>
      [EnumMember(Value = "Roll")]
      RollEnum = 44,

      /// <summary>
      /// Enum ShingleEnum for Shingle
      /// </summary>
      [EnumMember(Value = "Shingle")]
      ShingleEnum = 45,

      /// <summary>
      /// Enum SlateSlagEnum for Slate/Slag
      /// </summary>
      [EnumMember(Value = "Slate/Slag")]
      SlateSlagEnum = 46,

      /// <summary>
      /// Enum TarGravelEnum for Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Tar & Gravel")]
      TarGravelEnum = 47,

      /// <summary>
      /// Enum TarPaperEnum for Tar Paper
      /// </summary>
      [EnumMember(Value = "Tar Paper")]
      TarPaperEnum = 48,

      /// <summary>
      /// Enum TileEnum for Tile
      /// </summary>
      [EnumMember(Value = "Tile")]
      TileEnum = 49,

      /// <summary>
      /// Enum WoodEnum2 for Wood
      /// </summary>
      [EnumMember(Value = "Wood")]
      WoodEnum2 = 50,

      /// <summary>
      /// Enum WoodShakeEnum for Wood Shake
      /// </summary>
      [EnumMember(Value = "Wood Shake")]
      WoodShakeEnum = 51,

      /// <summary>
      /// Enum AsphaltShingleWoodJoistEnum for Asphalt Shingle.Wood Joist
      /// </summary>
      [EnumMember(Value = "Asphalt Shingle.Wood Joist")]
      AsphaltShingleWoodJoistEnum = 52,

      /// <summary>
      /// Enum WoodShakeShingleEnum for Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Wood Shake/Shingle")]
      WoodShakeShingleEnum = 53,

      /// <summary>
      /// Enum BuiltUpWoodJoistEnum for Built Up.Wood Joist
      /// </summary>
      [EnumMember(Value = "Built Up.Wood Joist")]
      BuiltUpWoodJoistEnum = 54,

      /// <summary>
      /// Enum AluminumSteelEnum for Aluminum.Steel
      /// </summary>
      [EnumMember(Value = "Aluminum.Steel")]
      AluminumSteelEnum = 55,

      /// <summary>
      /// Enum SteelJoistMtlDeckSlabEnum for Steel Joist/Mtl Deck/Slab
      /// </summary>
      [EnumMember(Value = "Steel Joist/Mtl Deck/Slab")]
      SteelJoistMtlDeckSlabEnum = 56,

      /// <summary>
      /// Enum AluminumShingleEnum for Aluminum/Shingle
      /// </summary>
      [EnumMember(Value = "Aluminum/Shingle")]
      AluminumShingleEnum = 57,

      /// <summary>
      /// Enum AsbestosWoodEnum for Asbestos/Wood
      /// </summary>
      [EnumMember(Value = "Asbestos/Wood")]
      AsbestosWoodEnum = 58,

      /// <summary>
      /// Enum AsbestosWoodShingleEnum for Asbestos/Wood/Shingle
      /// </summary>
      [EnumMember(Value = "Asbestos/Wood/Shingle")]
      AsbestosWoodShingleEnum = 59,

      /// <summary>
      /// Enum AsphaltEnum for Asphalt
      /// </summary>
      [EnumMember(Value = "Asphalt")]
      AsphaltEnum = 60,

      /// <summary>
      /// Enum AsphaltRollEnum for Asphalt Roll
      /// </summary>
      [EnumMember(Value = "Asphalt Roll")]
      AsphaltRollEnum = 61,

      /// <summary>
      /// Enum AsphaltTileEnum for Asphalt Tile
      /// </summary>
      [EnumMember(Value = "Asphalt Tile")]
      AsphaltTileEnum = 62,

      /// <summary>
      /// Enum AsphaltCompositionEnum for Asphalt/Composition
      /// </summary>
      [EnumMember(Value = "Asphalt/Composition")]
      AsphaltCompositionEnum = 63,

      /// <summary>
      /// Enum AsphaltCompositionShingleEnum for Asphalt/Composition Shingle
      /// </summary>
      [EnumMember(Value = "Asphalt/Composition Shingle")]
      AsphaltCompositionShingleEnum = 64,

      /// <summary>
      /// Enum BuiltUpCompositionEnum for Built Up Composition
      /// </summary>
      [EnumMember(Value = "Built Up Composition")]
      BuiltUpCompositionEnum = 65,

      /// <summary>
      /// Enum BuiltUpGypsumEnum for Built Up Gypsum
      /// </summary>
      [EnumMember(Value = "Built Up Gypsum")]
      BuiltUpGypsumEnum = 66,

      /// <summary>
      /// Enum BuiltUpMetalEnum for Built Up Metal
      /// </summary>
      [EnumMember(Value = "Built Up Metal")]
      BuiltUpMetalEnum = 67,

      /// <summary>
      /// Enum BuiltUpRockEnum for Built Up Rock
      /// </summary>
      [EnumMember(Value = "Built Up Rock")]
      BuiltUpRockEnum = 68,

      /// <summary>
      /// Enum BuiltUpTarGravelEnum for Built Up Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Built Up Tar & Gravel")]
      BuiltUpTarGravelEnum = 69,

      /// <summary>
      /// Enum BuiltUpWoodEnum for Built Up Wood
      /// </summary>
      [EnumMember(Value = "Built Up Wood")]
      BuiltUpWoodEnum = 70,

      /// <summary>
      /// Enum BuiltUpMetalGypsumEnum for Built-Up Metal/Gypsum
      /// </summary>
      [EnumMember(Value = "Built-Up Metal/Gypsum")]
      BuiltUpMetalGypsumEnum = 71,

      /// <summary>
      /// Enum CedarShakeEnum for Cedar Shake
      /// </summary>
      [EnumMember(Value = "Cedar Shake")]
      CedarShakeEnum = 72,

      /// <summary>
      /// Enum CementTileEnum for Cement Tile
      /// </summary>
      [EnumMember(Value = "Cement Tile")]
      CementTileEnum = 73,

      /// <summary>
      /// Enum CementCompositionEnum for Cement/Composition
      /// </summary>
      [EnumMember(Value = "Cement/Composition")]
      CementCompositionEnum = 74,

      /// <summary>
      /// Enum CeramicGlazedTileEnum for Ceramic/Glazed Tile
      /// </summary>
      [EnumMember(Value = "Ceramic/Glazed Tile")]
      CeramicGlazedTileEnum = 75,

      /// <summary>
      /// Enum ClayTileEnum for Clay Tile
      /// </summary>
      [EnumMember(Value = "Clay Tile")]
      ClayTileEnum = 76,

      /// <summary>
      /// Enum ClayTileGlazedTileEnum for Clay Tile/Glazed Tile
      /// </summary>
      [EnumMember(Value = "Clay Tile/Glazed Tile")]
      ClayTileGlazedTileEnum = 77,

      /// <summary>
      /// Enum ClayTileSlateEnum for Clay Tile/Slate
      /// </summary>
      [EnumMember(Value = "Clay Tile/Slate")]
      ClayTileSlateEnum = 78,

      /// <summary>
      /// Enum ClayConcreteTileEnum for Clay/Concrete Tile
      /// </summary>
      [EnumMember(Value = "Clay/Concrete Tile")]
      ClayConcreteTileEnum = 79,

      /// <summary>
      /// Enum CompositionEnum2 for Composition
      /// </summary>
      [EnumMember(Value = "Composition")]
      CompositionEnum2 = 80,

      /// <summary>
      /// Enum CompositionShingleMetalEnum for Composition Shingle/Metal
      /// </summary>
      [EnumMember(Value = "Composition Shingle/Metal")]
      CompositionShingleMetalEnum = 81,

      /// <summary>
      /// Enum CompositionTileEnum for Composition Tile
      /// </summary>
      [EnumMember(Value = "Composition Tile")]
      CompositionTileEnum = 82,

      /// <summary>
      /// Enum CompositionShingleEnum2 for Composition Shingle
      /// </summary>
      [EnumMember(Value = "Composition Shingle")]
      CompositionShingleEnum2 = 83,

      /// <summary>
      /// Enum ConcreteDeckEnum for Concrete Deck
      /// </summary>
      [EnumMember(Value = "Concrete Deck")]
      ConcreteDeckEnum = 84,

      /// <summary>
      /// Enum ConcreteTileEnum for Concrete Tile
      /// </summary>
      [EnumMember(Value = "Concrete Tile")]
      ConcreteTileEnum = 85,

      /// <summary>
      /// Enum CopperEnamelMetalSheetingEnum for Copper/Enamel Metal Sheeting
      /// </summary>
      [EnumMember(Value = "Copper/Enamel Metal Sheeting")]
      CopperEnamelMetalSheetingEnum = 86,

      /// <summary>
      /// Enum CopperMetalEnum for Copper/Metal
      /// </summary>
      [EnumMember(Value = "Copper/Metal")]
      CopperMetalEnum = 87,

      /// <summary>
      /// Enum CorrugatedAsbestosEnum for Corrugated Asbestos
      /// </summary>
      [EnumMember(Value = "Corrugated Asbestos")]
      CorrugatedAsbestosEnum = 88,

      /// <summary>
      /// Enum CorrugatedCompositionEnum for Corrugated Composition
      /// </summary>
      [EnumMember(Value = "Corrugated Composition")]
      CorrugatedCompositionEnum = 89,

      /// <summary>
      /// Enum CorrugatedIronEnum for Corrugated Iron
      /// </summary>
      [EnumMember(Value = "Corrugated Iron")]
      CorrugatedIronEnum = 90,

      /// <summary>
      /// Enum CorrugatedMetalEnum for Corrugated Metal
      /// </summary>
      [EnumMember(Value = "Corrugated Metal")]
      CorrugatedMetalEnum = 91,

      /// <summary>
      /// Enum CorrugatedSteelEnum for Corrugated Steel
      /// </summary>
      [EnumMember(Value = "Corrugated Steel")]
      CorrugatedSteelEnum = 92,

      /// <summary>
      /// Enum CrushedRockEnum for Crushed Rock
      /// </summary>
      [EnumMember(Value = "Crushed Rock")]
      CrushedRockEnum = 93,

      /// <summary>
      /// Enum EnameledMetalEnum for Enameled Metal
      /// </summary>
      [EnumMember(Value = "Enameled Metal")]
      EnameledMetalEnum = 94,

      /// <summary>
      /// Enum FiberglassEnum for Fiberglass
      /// </summary>
      [EnumMember(Value = "Fiberglass")]
      FiberglassEnum = 95,

      /// <summary>
      /// Enum FiberglassPlasticEnum for Fiberglass/Plastic
      /// </summary>
      [EnumMember(Value = "Fiberglass/Plastic")]
      FiberglassPlasticEnum = 96,

      /// <summary>
      /// Enum GlazedTileEnum for Glazed Tile
      /// </summary>
      [EnumMember(Value = "Glazed Tile")]
      GlazedTileEnum = 97,

      /// <summary>
      /// Enum GravelEnum for Gravel
      /// </summary>
      [EnumMember(Value = "Gravel")]
      GravelEnum = 98,

      /// <summary>
      /// Enum GravelRockEnum for Gravel & Rock
      /// </summary>
      [EnumMember(Value = "Gravel & Rock")]
      GravelRockEnum = 99,

      /// <summary>
      /// Enum HardwoodEnum for Hardwood
      /// </summary>
      [EnumMember(Value = "Hardwood")]
      HardwoodEnum = 100,

      /// <summary>
      /// Enum MetalEnum2 for Metal
      /// </summary>
      [EnumMember(Value = "Metal")]
      MetalEnum2 = 101,

      /// <summary>
      /// Enum MetalTileEnum for Metal Tile
      /// </summary>
      [EnumMember(Value = "Metal Tile")]
      MetalTileEnum = 102,

      /// <summary>
      /// Enum MetalShingleEnum for Metal/Shingle
      /// </summary>
      [EnumMember(Value = "Metal/Shingle")]
      MetalShingleEnum = 103,

      /// <summary>
      /// Enum MetalTarPaperEnum for Metal/Tar Paper
      /// </summary>
      [EnumMember(Value = "Metal/Tar Paper")]
      MetalTarPaperEnum = 104,

      /// <summary>
      /// Enum MetalTinEnum for Metal/Tin
      /// </summary>
      [EnumMember(Value = "Metal/Tin")]
      MetalTinEnum = 105,

      /// <summary>
      /// Enum ModularMetalEnum for Modular Metal
      /// </summary>
      [EnumMember(Value = "Modular Metal")]
      ModularMetalEnum = 106,

      /// <summary>
      /// Enum PlasticUrethaneEnum for Plastic/Urethane
      /// </summary>
      [EnumMember(Value = "Plastic/Urethane")]
      PlasticUrethaneEnum = 107,

      /// <summary>
      /// Enum PrecastConcreteEnum for Precast Concrete
      /// </summary>
      [EnumMember(Value = "Precast Concrete")]
      PrecastConcreteEnum = 108,

      /// <summary>
      /// Enum PrefinishedMetalEnum for Prefinished Metal
      /// </summary>
      [EnumMember(Value = "Prefinished Metal")]
      PrefinishedMetalEnum = 109,

      /// <summary>
      /// Enum ReinforcedConcreteEnum2 for Reinforced Concrete
      /// </summary>
      [EnumMember(Value = "Reinforced Concrete")]
      ReinforcedConcreteEnum2 = 110,

      /// <summary>
      /// Enum RockEnum for Rock
      /// </summary>
      [EnumMember(Value = "Rock")]
      RockEnum = 111,

      /// <summary>
      /// Enum RockGravelEnum for Rock & Gravel
      /// </summary>
      [EnumMember(Value = "Rock & Gravel")]
      RockGravelEnum = 112,

      /// <summary>
      /// Enum RollPaperEnum for Roll Paper
      /// </summary>
      [EnumMember(Value = "Roll Paper")]
      RollPaperEnum = 113,

      /// <summary>
      /// Enum ConcreteConcreteEnum for Concrete.Concrete
      /// </summary>
      [EnumMember(Value = "Concrete.Concrete")]
      ConcreteConcreteEnum = 114,

      /// <summary>
      /// Enum ConcreteSteelEnum for Concrete.Steel
      /// </summary>
      [EnumMember(Value = "Concrete.Steel")]
      ConcreteSteelEnum = 115,

      /// <summary>
      /// Enum ConcreteTrussJoistEnum for Concrete.Truss/Joist
      /// </summary>
      [EnumMember(Value = "Concrete.Truss/Joist")]
      ConcreteTrussJoistEnum = 116,

      /// <summary>
      /// Enum RubberElastomericEnum for Rubber/Elastomeric
      /// </summary>
      [EnumMember(Value = "Rubber/Elastomeric")]
      RubberElastomericEnum = 117,

      /// <summary>
      /// Enum SlateTileEnum for Slate/Tile
      /// </summary>
      [EnumMember(Value = "Slate/Tile")]
      SlateTileEnum = 118,

      /// <summary>
      /// Enum StoneRockEnum for Stone/Rock
      /// </summary>
      [EnumMember(Value = "Stone/Rock")]
      StoneRockEnum = 119,

      /// <summary>
      /// Enum StonePebblesEnum for Stone/Pebbles
      /// </summary>
      [EnumMember(Value = "Stone/Pebbles")]
      StonePebblesEnum = 120,

      /// <summary>
      /// Enum StoneEnum for Stone
      /// </summary>
      [EnumMember(Value = "Stone")]
      StoneEnum = 121,

      /// <summary>
      /// Enum ShakeEnum for Shake
      /// </summary>
      [EnumMember(Value = "Shake")]
      ShakeEnum = 122,

      /// <summary>
      /// Enum RollTarGravelEnum for Roll Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Roll Tar & Gravel")]
      RollTarGravelEnum = 123,

      /// <summary>
      /// Enum TinEnum for Tin
      /// </summary>
      [EnumMember(Value = "Tin")]
      TinEnum = 124,

      /// <summary>
      /// Enum CorrugatedMetalRollRoofingEnum for Corrugated Metal/Roll Roofing
      /// </summary>
      [EnumMember(Value = "Corrugated Metal/Roll Roofing")]
      CorrugatedMetalRollRoofingEnum = 125,

      /// <summary>
      /// Enum BuiltUpCompositionTarGraEnum for Built Up Composition/Tar & Gra
      /// </summary>
      [EnumMember(Value = "Built Up Composition/Tar & Gra")]
      BuiltUpCompositionTarGraEnum = 126,

      /// <summary>
      /// Enum BermudaClayTileWoodShingleEnum for Bermuda/Clay Tile/Wood Shingle
      /// </summary>
      [EnumMember(Value = "Bermuda/Clay Tile/Wood Shingle")]
      BermudaClayTileWoodShingleEnum = 127,

      /// <summary>
      /// Enum SyntheticEnum for Synthetic
      /// </summary>
      [EnumMember(Value = "Synthetic")]
      SyntheticEnum = 128,

      /// <summary>
      /// Enum CorrugatedMetalTarpaperEnum for Corrugated Metal/Tarpaper
      /// </summary>
      [EnumMember(Value = "Corrugated Metal/Tarpaper")]
      CorrugatedMetalTarpaperEnum = 129,

      /// <summary>
      /// Enum BahamaCeramicTileBltUpTgEnum for Bahama/Ceramic Tile/Blt-Up Tg
      /// </summary>
      [EnumMember(Value = "Bahama/Ceramic Tile/Blt-Up Tg")]
      BahamaCeramicTileBltUpTgEnum = 130,

      /// <summary>
      /// Enum ShingleTarGravelRollSlateEnum for Shingle/Tar/Gravel/Roll Slate
      /// </summary>
      [EnumMember(Value = "Shingle/Tar/Gravel/Roll Slate")]
      ShingleTarGravelRollSlateEnum = 131,

      /// <summary>
      /// Enum BermudaConcPlBltupTGEnum for Bermuda/Conc Pl/Bltup T&G
      /// </summary>
      [EnumMember(Value = "Bermuda/Conc Pl/Bltup T&G")]
      BermudaConcPlBltupTGEnum = 132,

      /// <summary>
      /// Enum GableShapedWoodTrussEnum for Gable/Shaped Wood Truss
      /// </summary>
      [EnumMember(Value = "Gable/Shaped Wood Truss")]
      GableShapedWoodTrussEnum = 133,

      /// <summary>
      /// Enum PrestressedConcreteEnum for Prestressed Concrete
      /// </summary>
      [EnumMember(Value = "Prestressed Concrete")]
      PrestressedConcreteEnum = 134,

      /// <summary>
      /// Enum GableShapedSteelTrussEnum for Gable/Shaped Steel Truss
      /// </summary>
      [EnumMember(Value = "Gable/Shaped Steel Truss")]
      GableShapedSteelTrussEnum = 135,

      /// <summary>
      /// Enum WoodHipGableWoodTrussEnum for Wood Hip/Gable/Wood Truss
      /// </summary>
      [EnumMember(Value = "Wood Hip/Gable/Wood Truss")]
      WoodHipGableWoodTrussEnum = 136,

      /// <summary>
      /// Enum GalvanizedSheetMetalWoodJoEnum for Galvanized Sheet Metal.Wood Jo
      /// </summary>
      [EnumMember(Value = "Galvanized Sheet Metal.Wood Jo")]
      GalvanizedSheetMetalWoodJoEnum = 137,

      /// <summary>
      /// Enum GypsumSteelEnum for Gypsum.Steel
      /// </summary>
      [EnumMember(Value = "Gypsum.Steel")]
      GypsumSteelEnum = 138,

      /// <summary>
      /// Enum MetalSheetingSteelEnum for Metal Sheeting.Steel
      /// </summary>
      [EnumMember(Value = "Metal Sheeting.Steel")]
      MetalSheetingSteelEnum = 139,

      /// <summary>
      /// Enum RollMetalEnum for Roll.Metal
      /// </summary>
      [EnumMember(Value = "Roll.Metal")]
      RollMetalEnum = 140,

      /// <summary>
      /// Enum RollWoodJoistEnum for Roll.Wood Joist
      /// </summary>
      [EnumMember(Value = "Roll.Wood Joist")]
      RollWoodJoistEnum = 141,

      /// <summary>
      /// Enum ShingleConcreteEnum for Shingle.Concrete
      /// </summary>
      [EnumMember(Value = "Shingle.Concrete")]
      ShingleConcreteEnum = 142,

      /// <summary>
      /// Enum TarPaperMetalEnum for Tar Paper.Metal
      /// </summary>
      [EnumMember(Value = "Tar Paper.Metal")]
      TarPaperMetalEnum = 143,

      /// <summary>
      /// Enum WoodWoodOnSteelEnum for Wood.Wood On Steel
      /// </summary>
      [EnumMember(Value = "Wood.Wood On Steel")]
      WoodWoodOnSteelEnum = 144,

      /// <summary>
      /// Enum WoodShakeShingleWoodJoistEnum for Wood Shake/Shingle.Wood Joist
      /// </summary>
      [EnumMember(Value = "Wood Shake/Shingle.Wood Joist")]
      WoodShakeShingleWoodJoistEnum = 145,

      /// <summary>
      /// Enum IrregularEnum for Irregular
      /// </summary>
      [EnumMember(Value = "Irregular")]
      IrregularEnum = 146,

      /// <summary>
      /// Enum IrregularWoodTrussEnum for Irregular.Wood Truss
      /// </summary>
      [EnumMember(Value = "Irregular.Wood Truss")]
      IrregularWoodTrussEnum = 147,

      /// <summary>
      /// Enum LeanToEnum for Lean To
      /// </summary>
      [EnumMember(Value = "Lean To")]
      LeanToEnum = 148,

      /// <summary>
      /// Enum SaltBoxEnum for Salt Box
      /// </summary>
      [EnumMember(Value = "Salt Box")]
      SaltBoxEnum = 149,

      /// <summary>
      /// Enum DomeEnum for Dome
      /// </summary>
      [EnumMember(Value = "Dome")]
      DomeEnum = 150,

      /// <summary>
      /// Enum AFrameEnum for A-Frame
      /// </summary>
      [EnumMember(Value = "A-Frame")]
      AFrameEnum = 151,

      /// <summary>
      /// Enum AFrameCompositionShingleEnum for A-Frame.Composition Shingle
      /// </summary>
      [EnumMember(Value = "A-Frame.Composition Shingle")]
      AFrameCompositionShingleEnum = 152,

      /// <summary>
      /// Enum BarnEnum for Barn
      /// </summary>
      [EnumMember(Value = "Barn")]
      BarnEnum = 153,

      /// <summary>
      /// Enum CanopyEnum for Canopy
      /// </summary>
      [EnumMember(Value = "Canopy")]
      CanopyEnum = 154,

      /// <summary>
      /// Enum DormerEnum for Dormer
      /// </summary>
      [EnumMember(Value = "Dormer")]
      DormerEnum = 155,

      /// <summary>
      /// Enum FrameEnum for Frame
      /// </summary>
      [EnumMember(Value = "Frame")]
      FrameEnum = 156,

      /// <summary>
      /// Enum FlatEnum for Flat
      /// </summary>
      [EnumMember(Value = "Flat")]
      FlatEnum = 157,

      /// <summary>
      /// Enum FlatConcreteEnum for Flat.Concrete
      /// </summary>
      [EnumMember(Value = "Flat.Concrete")]
      FlatConcreteEnum = 158,

      /// <summary>
      /// Enum FlatMetalEnum for Flat.Metal
      /// </summary>
      [EnumMember(Value = "Flat.Metal")]
      FlatMetalEnum = 159,

      /// <summary>
      /// Enum FlatWoodBeamEnum for Flat.Wood Beam
      /// </summary>
      [EnumMember(Value = "Flat.Wood Beam")]
      FlatWoodBeamEnum = 160,

      /// <summary>
      /// Enum FlatWoodTrussEnum for Flat.Wood Truss
      /// </summary>
      [EnumMember(Value = "Flat.Wood Truss")]
      FlatWoodTrussEnum = 161,

      /// <summary>
      /// Enum FlatAsbestosEnum for Flat.Asbestos
      /// </summary>
      [EnumMember(Value = "Flat.Asbestos")]
      FlatAsbestosEnum = 162,

      /// <summary>
      /// Enum FlatCompositionRollEnum for Flat.Composition Roll
      /// </summary>
      [EnumMember(Value = "Flat.Composition Roll")]
      FlatCompositionRollEnum = 163,

      /// <summary>
      /// Enum FlatCompositionShingleEnum for Flat.Composition Shingle
      /// </summary>
      [EnumMember(Value = "Flat.Composition Shingle")]
      FlatCompositionShingleEnum = 164,

      /// <summary>
      /// Enum FlatConcreteEnum2 for Flat.Concrete
      /// </summary>
      [EnumMember(Value = "Flat.Concrete")]
      FlatConcreteEnum2 = 165,

      /// <summary>
      /// Enum FlatCopperEnum for Flat.Copper
      /// </summary>
      [EnumMember(Value = "Flat.Copper")]
      FlatCopperEnum = 166,

      /// <summary>
      /// Enum FlatRollEnum for Flat.Roll
      /// </summary>
      [EnumMember(Value = "Flat.Roll")]
      FlatRollEnum = 167,

      /// <summary>
      /// Enum FlatShingleEnum for Flat.Shingle
      /// </summary>
      [EnumMember(Value = "Flat.Shingle")]
      FlatShingleEnum = 168,

      /// <summary>
      /// Enum FlatSlateSlagEnum for Flat.Slate/Slag
      /// </summary>
      [EnumMember(Value = "Flat.Slate/Slag")]
      FlatSlateSlagEnum = 169,

      /// <summary>
      /// Enum FlatTarGravelEnum for Flat.Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Flat.Tar & Gravel")]
      FlatTarGravelEnum = 170,

      /// <summary>
      /// Enum FlatTileEnum for Flat.Tile
      /// </summary>
      [EnumMember(Value = "Flat.Tile")]
      FlatTileEnum = 171,

      /// <summary>
      /// Enum FlatWoodShakeShingleEnum for Flat.Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Flat.Wood Shake/Shingle")]
      FlatWoodShakeShingleEnum = 172,

      /// <summary>
      /// Enum FlatBuiltUpWoodEnum for Flat.Built Up.Wood
      /// </summary>
      [EnumMember(Value = "Flat.Built Up.Wood")]
      FlatBuiltUpWoodEnum = 173,

      /// <summary>
      /// Enum GableEnum for Gable
      /// </summary>
      [EnumMember(Value = "Gable")]
      GableEnum = 174,

      /// <summary>
      /// Enum GableConcreteEnum for Gable.Concrete
      /// </summary>
      [EnumMember(Value = "Gable.Concrete")]
      GableConcreteEnum = 175,

      /// <summary>
      /// Enum GableMetalEnum for Gable.Metal
      /// </summary>
      [EnumMember(Value = "Gable.Metal")]
      GableMetalEnum = 176,

      /// <summary>
      /// Enum GableSteelEnum for Gable.Steel
      /// </summary>
      [EnumMember(Value = "Gable.Steel")]
      GableSteelEnum = 177,

      /// <summary>
      /// Enum GableWoodBeamEnum for Gable.Wood Beam
      /// </summary>
      [EnumMember(Value = "Gable.Wood Beam")]
      GableWoodBeamEnum = 178,

      /// <summary>
      /// Enum GableWoodJoistEnum for Gable.Wood Joist
      /// </summary>
      [EnumMember(Value = "Gable.Wood Joist")]
      GableWoodJoistEnum = 179,

      /// <summary>
      /// Enum GableWoodTrussEnum for Gable.Wood Truss
      /// </summary>
      [EnumMember(Value = "Gable.Wood Truss")]
      GableWoodTrussEnum = 180,

      /// <summary>
      /// Enum GableAsbestosShingleEnum for Gable.Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Gable.Asbestos Shingle")]
      GableAsbestosShingleEnum = 181,

      /// <summary>
      /// Enum GableCompositionRollEnum for Gable.Composition Roll
      /// </summary>
      [EnumMember(Value = "Gable.Composition Roll")]
      GableCompositionRollEnum = 182,

      /// <summary>
      /// Enum GableCompositionShingleEnum for Gable.Composition Shingle
      /// </summary>
      [EnumMember(Value = "Gable.Composition Shingle")]
      GableCompositionShingleEnum = 183,

      /// <summary>
      /// Enum GableCopperEnum for Gable.Copper
      /// </summary>
      [EnumMember(Value = "Gable.Copper")]
      GableCopperEnum = 184,

      /// <summary>
      /// Enum GableRollEnum for Gable.Roll
      /// </summary>
      [EnumMember(Value = "Gable.Roll")]
      GableRollEnum = 185,

      /// <summary>
      /// Enum GableShingleEnum for Gable.Shingle
      /// </summary>
      [EnumMember(Value = "Gable.Shingle")]
      GableShingleEnum = 186,

      /// <summary>
      /// Enum GableSlateSlagEnum for Gable.Slate/Slag
      /// </summary>
      [EnumMember(Value = "Gable.Slate/Slag")]
      GableSlateSlagEnum = 187,

      /// <summary>
      /// Enum GableTarGravelEnum for Gable.Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Gable.Tar & Gravel")]
      GableTarGravelEnum = 188,

      /// <summary>
      /// Enum GableTileEnum for Gable.Tile
      /// </summary>
      [EnumMember(Value = "Gable.Tile")]
      GableTileEnum = 189,

      /// <summary>
      /// Enum GableWoodShakeShingleEnum for Gable.Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Gable.Wood Shake/Shingle")]
      GableWoodShakeShingleEnum = 190,

      /// <summary>
      /// Enum GableHipEnum for Gable/Hip
      /// </summary>
      [EnumMember(Value = "Gable/Hip")]
      GableHipEnum = 191,

      /// <summary>
      /// Enum HipEnum for Hip
      /// </summary>
      [EnumMember(Value = "Hip")]
      HipEnum = 192,

      /// <summary>
      /// Enum HipConcreteEnum for Hip.Concrete
      /// </summary>
      [EnumMember(Value = "Hip.Concrete")]
      HipConcreteEnum = 193,

      /// <summary>
      /// Enum HipMetalEnum for Hip.Metal
      /// </summary>
      [EnumMember(Value = "Hip.Metal")]
      HipMetalEnum = 194,

      /// <summary>
      /// Enum HipWoodBeamEnum for Hip.Wood Beam
      /// </summary>
      [EnumMember(Value = "Hip.Wood Beam")]
      HipWoodBeamEnum = 195,

      /// <summary>
      /// Enum HipWoodJoistEnum for Hip.Wood Joist
      /// </summary>
      [EnumMember(Value = "Hip.Wood Joist")]
      HipWoodJoistEnum = 196,

      /// <summary>
      /// Enum HipWoodTrussEnum for Hip.Wood Truss
      /// </summary>
      [EnumMember(Value = "Hip.Wood Truss")]
      HipWoodTrussEnum = 197,

      /// <summary>
      /// Enum HipAsbestosShingleEnum for Hip.Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Hip.Asbestos Shingle")]
      HipAsbestosShingleEnum = 198,

      /// <summary>
      /// Enum HipCompositionRollEnum for Hip.Composition Roll
      /// </summary>
      [EnumMember(Value = "Hip.Composition Roll")]
      HipCompositionRollEnum = 199,

      /// <summary>
      /// Enum HipCompositionShingleEnum for Hip.Composition Shingle
      /// </summary>
      [EnumMember(Value = "Hip.Composition Shingle")]
      HipCompositionShingleEnum = 200,

      /// <summary>
      /// Enum HipCopperEnum for Hip.Copper
      /// </summary>
      [EnumMember(Value = "Hip.Copper")]
      HipCopperEnum = 201,

      /// <summary>
      /// Enum HipRollEnum for Hip.Roll
      /// </summary>
      [EnumMember(Value = "Hip.Roll")]
      HipRollEnum = 202,

      /// <summary>
      /// Enum HipShingleEnum for Hip.Shingle
      /// </summary>
      [EnumMember(Value = "Hip.Shingle")]
      HipShingleEnum = 203,

      /// <summary>
      /// Enum HipSlateSlagEnum for Hip.Slate/Slag
      /// </summary>
      [EnumMember(Value = "Hip.Slate/Slag")]
      HipSlateSlagEnum = 204,

      /// <summary>
      /// Enum HipTarGravelEnum for Hip.Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Hip.Tar & Gravel")]
      HipTarGravelEnum = 205,

      /// <summary>
      /// Enum HipTileEnum for Hip.Tile
      /// </summary>
      [EnumMember(Value = "Hip.Tile")]
      HipTileEnum = 206,

      /// <summary>
      /// Enum HipWoodShakeEnum for Hip.Wood Shake
      /// </summary>
      [EnumMember(Value = "Hip.Wood Shake")]
      HipWoodShakeEnum = 207,

      /// <summary>
      /// Enum HipWoodShakeShingleEnum for Hip.Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Hip.Wood Shake/Shingle")]
      HipWoodShakeShingleEnum = 208,

      /// <summary>
      /// Enum GeodesicEnum for Geodesic
      /// </summary>
      [EnumMember(Value = "Geodesic")]
      GeodesicEnum = 209,

      /// <summary>
      /// Enum MansardEnum for Mansard
      /// </summary>
      [EnumMember(Value = "Mansard")]
      MansardEnum = 210,

      /// <summary>
      /// Enum MansardConcreteEnum for Mansard.Concrete
      /// </summary>
      [EnumMember(Value = "Mansard.Concrete")]
      MansardConcreteEnum = 211,

      /// <summary>
      /// Enum MansardMetalEnum for Mansard.Metal
      /// </summary>
      [EnumMember(Value = "Mansard.Metal")]
      MansardMetalEnum = 212,

      /// <summary>
      /// Enum MansardWoodBeamEnum for Mansard.Wood Beam
      /// </summary>
      [EnumMember(Value = "Mansard.Wood Beam")]
      MansardWoodBeamEnum = 213,

      /// <summary>
      /// Enum MansardWoodJoistEnum for Mansard.Wood Joist
      /// </summary>
      [EnumMember(Value = "Mansard.Wood Joist")]
      MansardWoodJoistEnum = 214,

      /// <summary>
      /// Enum MansardWoodTrussEnum for Mansard.Wood Truss
      /// </summary>
      [EnumMember(Value = "Mansard.Wood Truss")]
      MansardWoodTrussEnum = 215,

      /// <summary>
      /// Enum MansardAsbestosShingleEnum for Mansard.Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Mansard.Asbestos Shingle")]
      MansardAsbestosShingleEnum = 216,

      /// <summary>
      /// Enum MansardCompositionRollEnum for Mansard.Composition Roll
      /// </summary>
      [EnumMember(Value = "Mansard.Composition Roll")]
      MansardCompositionRollEnum = 217,

      /// <summary>
      /// Enum MansardCompositionShingleEnum for Mansard.Composition Shingle
      /// </summary>
      [EnumMember(Value = "Mansard.Composition Shingle")]
      MansardCompositionShingleEnum = 218,

      /// <summary>
      /// Enum MansardRollEnum for Mansard.Roll
      /// </summary>
      [EnumMember(Value = "Mansard.Roll")]
      MansardRollEnum = 219,

      /// <summary>
      /// Enum MansardShingleEnum for Mansard.Shingle
      /// </summary>
      [EnumMember(Value = "Mansard.Shingle")]
      MansardShingleEnum = 220,

      /// <summary>
      /// Enum MansardSlateSlagEnum for Mansard.Slate/Slag
      /// </summary>
      [EnumMember(Value = "Mansard.Slate/Slag")]
      MansardSlateSlagEnum = 221,

      /// <summary>
      /// Enum MansardTileEnum for Mansard.Tile
      /// </summary>
      [EnumMember(Value = "Mansard.Tile")]
      MansardTileEnum = 222,

      /// <summary>
      /// Enum MansardWoodShakeShingleEnum for Mansard.Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Mansard.Wood Shake/Shingle")]
      MansardWoodShakeShingleEnum = 223,

      /// <summary>
      /// Enum BarrelEnum for Barrel
      /// </summary>
      [EnumMember(Value = "Barrel")]
      BarrelEnum = 224,

      /// <summary>
      /// Enum MonitorEnum for Monitor
      /// </summary>
      [EnumMember(Value = "Monitor")]
      MonitorEnum = 225,

      /// <summary>
      /// Enum ContemporaryEnum for Contemporary
      /// </summary>
      [EnumMember(Value = "Contemporary")]
      ContemporaryEnum = 226,

      /// <summary>
      /// Enum ShedEnum for Shed
      /// </summary>
      [EnumMember(Value = "Shed")]
      ShedEnum = 227,

      /// <summary>
      /// Enum ShedConcreteEnum for Shed.Concrete
      /// </summary>
      [EnumMember(Value = "Shed.Concrete")]
      ShedConcreteEnum = 228,

      /// <summary>
      /// Enum ShedMetalEnum for Shed.Metal
      /// </summary>
      [EnumMember(Value = "Shed.Metal")]
      ShedMetalEnum = 229,

      /// <summary>
      /// Enum ShedWoodBeamEnum for Shed.Wood Beam
      /// </summary>
      [EnumMember(Value = "Shed.Wood Beam")]
      ShedWoodBeamEnum = 230,

      /// <summary>
      /// Enum ShedWoodJoistEnum for Shed.Wood Joist
      /// </summary>
      [EnumMember(Value = "Shed.Wood Joist")]
      ShedWoodJoistEnum = 231,

      /// <summary>
      /// Enum ShedWoodTrussEnum for Shed.Wood Truss
      /// </summary>
      [EnumMember(Value = "Shed.Wood Truss")]
      ShedWoodTrussEnum = 232,

      /// <summary>
      /// Enum ShedConcreteEnum2 for Shed.Concrete
      /// </summary>
      [EnumMember(Value = "Shed.Concrete")]
      ShedConcreteEnum2 = 233,

      /// <summary>
      /// Enum ShedRollEnum for Shed.Roll
      /// </summary>
      [EnumMember(Value = "Shed.Roll")]
      ShedRollEnum = 234,

      /// <summary>
      /// Enum ShedShingleEnum for Shed.Shingle
      /// </summary>
      [EnumMember(Value = "Shed.Shingle")]
      ShedShingleEnum = 235,

      /// <summary>
      /// Enum ShedTarGravelEnum for Shed.Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Shed.Tar & Gravel")]
      ShedTarGravelEnum = 236,

      /// <summary>
      /// Enum ShedTileEnum for Shed.Tile
      /// </summary>
      [EnumMember(Value = "Shed.Tile")]
      ShedTileEnum = 237,

      /// <summary>
      /// Enum PitchedEnum for Pitched
      /// </summary>
      [EnumMember(Value = "Pitched")]
      PitchedEnum = 238,

      /// <summary>
      /// Enum PitchedConcreteEnum for Pitched.Concrete
      /// </summary>
      [EnumMember(Value = "Pitched.Concrete")]
      PitchedConcreteEnum = 239,

      /// <summary>
      /// Enum PitchedCompositionEnum for Pitched.Composition
      /// </summary>
      [EnumMember(Value = "Pitched.Composition")]
      PitchedCompositionEnum = 240,

      /// <summary>
      /// Enum PyramidEnum for Pyramid
      /// </summary>
      [EnumMember(Value = "Pyramid")]
      PyramidEnum = 241,

      /// <summary>
      /// Enum ArchedEnum for Arched
      /// </summary>
      [EnumMember(Value = "Arched")]
      ArchedEnum = 242,

      /// <summary>
      /// Enum SawtoothEnum for Sawtooth
      /// </summary>
      [EnumMember(Value = "Sawtooth")]
      SawtoothEnum = 243,

      /// <summary>
      /// Enum CathedralClerestoryEnum for Cathedral/Clerestory
      /// </summary>
      [EnumMember(Value = "Cathedral/Clerestory")]
      CathedralClerestoryEnum = 244,

      /// <summary>
      /// Enum BubbleEnum for Bubble
      /// </summary>
      [EnumMember(Value = "Bubble")]
      BubbleEnum = 245,

      /// <summary>
      /// Enum GambrelEnum for Gambrel
      /// </summary>
      [EnumMember(Value = "Gambrel")]
      GambrelEnum = 246,

      /// <summary>
      /// Enum GambrelConcreteEnum for Gambrel.Concrete
      /// </summary>
      [EnumMember(Value = "Gambrel.Concrete")]
      GambrelConcreteEnum = 247,

      /// <summary>
      /// Enum GambrelMetalEnum for Gambrel.Metal
      /// </summary>
      [EnumMember(Value = "Gambrel.Metal")]
      GambrelMetalEnum = 248,

      /// <summary>
      /// Enum GambrelWoodBeamEnum for Gambrel.Wood Beam
      /// </summary>
      [EnumMember(Value = "Gambrel.Wood Beam")]
      GambrelWoodBeamEnum = 249,

      /// <summary>
      /// Enum GambrelWoodJoistEnum for Gambrel.Wood Joist
      /// </summary>
      [EnumMember(Value = "Gambrel.Wood Joist")]
      GambrelWoodJoistEnum = 250,

      /// <summary>
      /// Enum GambrelWoodTrussEnum for Gambrel.Wood Truss
      /// </summary>
      [EnumMember(Value = "Gambrel.Wood Truss")]
      GambrelWoodTrussEnum = 251,

      /// <summary>
      /// Enum GambrelAsbestosShingleEnum for Gambrel.Asbestos Shingle
      /// </summary>
      [EnumMember(Value = "Gambrel.Asbestos Shingle")]
      GambrelAsbestosShingleEnum = 252,

      /// <summary>
      /// Enum GambrelCompositionRollEnum for Gambrel.Composition Roll
      /// </summary>
      [EnumMember(Value = "Gambrel.Composition Roll")]
      GambrelCompositionRollEnum = 253,

      /// <summary>
      /// Enum GambrelCopperShingleEnum for Gambrel.Copper/Shingle
      /// </summary>
      [EnumMember(Value = "Gambrel.Copper/Shingle")]
      GambrelCopperShingleEnum = 254,

      /// <summary>
      /// Enum GambrelRollEnum for Gambrel/Roll
      /// </summary>
      [EnumMember(Value = "Gambrel/Roll")]
      GambrelRollEnum = 255,

      /// <summary>
      /// Enum GambrelShingleEnum for Gambrel/Shingle
      /// </summary>
      [EnumMember(Value = "Gambrel/Shingle")]
      GambrelShingleEnum = 256,

      /// <summary>
      /// Enum GambrelSlateSlagEnum for Gambrel.Slate/Slag
      /// </summary>
      [EnumMember(Value = "Gambrel.Slate/Slag")]
      GambrelSlateSlagEnum = 257,

      /// <summary>
      /// Enum GambrelTarGravelEnum for Gambrel.Tar & Gravel
      /// </summary>
      [EnumMember(Value = "Gambrel.Tar & Gravel")]
      GambrelTarGravelEnum = 258,

      /// <summary>
      /// Enum GambrelTileEnum for Gambrel.Tile
      /// </summary>
      [EnumMember(Value = "Gambrel.Tile")]
      GambrelTileEnum = 259,

      /// <summary>
      /// Enum GambrelWoodShakeShingleEnum for Gambrel.Wood Shake/Shingle
      /// </summary>
      [EnumMember(Value = "Gambrel.Wood Shake/Shingle")]
      GambrelWoodShakeShingleEnum = 260,

      /// <summary>
      /// Enum SwissChaletAlpineEnum for Swiss Chalet/Alpine
      /// </summary>
      [EnumMember(Value = "Swiss Chalet/Alpine")]
      SwissChaletAlpineEnum = 261,

      /// <summary>
      /// Enum ComplexCustomEnum for Complex/Custom
      /// </summary>
      [EnumMember(Value = "Complex/Custom")]
      ComplexCustomEnum = 262,

      /// <summary>
      /// Enum ButterflyEnum for Butterfly
      /// </summary>
      [EnumMember(Value = "Butterfly")]
      ButterflyEnum = 263,

      /// <summary>
      /// Enum GambrelMansardEnum for Gambrel/Mansard
      /// </summary>
      [EnumMember(Value = "Gambrel/Mansard")]
      GambrelMansardEnum = 264
    }

    /// <summary>
    /// Type of roof (e.g., Gambrel, Gable, Flat, Mansard) and type of roof covering (e.g., Clay Tile, Aluminum, Shake).
    /// </summary>
    /// <value>Type of roof (e.g., Gambrel, Gable, Flat, Mansard) and type of roof covering (e.g., Clay Tile, Aluminum, Shake). </value>
    [DataMember(Name = "RoofType", EmitDefaultValue = false)]
    public RoofTypeEnum RoofType { get; set; }


    /// <summary>
    /// The type of utilities used in a building (e.g., Electric, Oil, Private).
    /// </summary>
    /// <value>The type of utilities used in a building (e.g., Electric, Oil, Private). </value>
    [TypeConverter(typeof(CustomEnumConverter<UtilitiesTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum UtilitiesTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AllEnum for All
      /// </summary>
      [EnumMember(Value = "All")]
      AllEnum = 4,

      /// <summary>
      /// Enum CoalEnum for Coal
      /// </summary>
      [EnumMember(Value = "Coal")]
      CoalEnum = 5,

      /// <summary>
      /// Enum ElectricGasEnum for Electric/Gas
      /// </summary>
      [EnumMember(Value = "Electric/Gas")]
      ElectricGasEnum = 6,

      /// <summary>
      /// Enum ElectricEnum for Electric
      /// </summary>
      [EnumMember(Value = "Electric")]
      ElectricEnum = 7,

      /// <summary>
      /// Enum ElectricPoleEnum for Electric Pole
      /// </summary>
      [EnumMember(Value = "Electric Pole")]
      ElectricPoleEnum = 8,

      /// <summary>
      /// Enum ElectricSewerEnum for Electric/Sewer
      /// </summary>
      [EnumMember(Value = "Electric/Sewer")]
      ElectricSewerEnum = 9,

      /// <summary>
      /// Enum UndergroundElectricEnum for Underground Electric
      /// </summary>
      [EnumMember(Value = "Underground Electric")]
      UndergroundElectricEnum = 10,

      /// <summary>
      /// Enum ElectricGasWaterEnum for Electric/Gas/Water
      /// </summary>
      [EnumMember(Value = "Electric/Gas/Water")]
      ElectricGasWaterEnum = 11,

      /// <summary>
      /// Enum ElectricWaterEnum for Electric/Water
      /// </summary>
      [EnumMember(Value = "Electric/Water")]
      ElectricWaterEnum = 12,

      /// <summary>
      /// Enum GasAvailableEnum for Gas Available
      /// </summary>
      [EnumMember(Value = "Gas Available")]
      GasAvailableEnum = 13,

      /// <summary>
      /// Enum GasPublicEnum for Gas Public
      /// </summary>
      [EnumMember(Value = "Gas Public")]
      GasPublicEnum = 14,

      /// <summary>
      /// Enum GasWaterEnum for Gas/Water
      /// </summary>
      [EnumMember(Value = "Gas/Water")]
      GasWaterEnum = 15,

      /// <summary>
      /// Enum NoSewerWaterEnum for No Sewer/Water
      /// </summary>
      [EnumMember(Value = "No Sewer/Water")]
      NoSewerWaterEnum = 16,

      /// <summary>
      /// Enum UndergroundEnum for Underground
      /// </summary>
      [EnumMember(Value = "Underground")]
      UndergroundEnum = 17,

      /// <summary>
      /// Enum NoWaterGasEnum for No Water/Gas
      /// </summary>
      [EnumMember(Value = "No Water/Gas")]
      NoWaterGasEnum = 18,

      /// <summary>
      /// Enum NoGasEnum for No Gas
      /// </summary>
      [EnumMember(Value = "No Gas")]
      NoGasEnum = 19,

      /// <summary>
      /// Enum NoSewerEnum for No Sewer
      /// </summary>
      [EnumMember(Value = "No Sewer")]
      NoSewerEnum = 20,

      /// <summary>
      /// Enum NoWaterEnum for No Water
      /// </summary>
      [EnumMember(Value = "No Water")]
      NoWaterEnum = 21,

      /// <summary>
      /// Enum NoSewerGasEnum for No Sewer/Gas
      /// </summary>
      [EnumMember(Value = "No Sewer/Gas")]
      NoSewerGasEnum = 22,

      /// <summary>
      /// Enum OilEnum for Oil
      /// </summary>
      [EnumMember(Value = "Oil")]
      OilEnum = 23,

      /// <summary>
      /// Enum PublicWaterEnum for Public Water
      /// </summary>
      [EnumMember(Value = "Public Water")]
      PublicWaterEnum = 24,

      /// <summary>
      /// Enum PrivatePublicEnum for Private/Public
      /// </summary>
      [EnumMember(Value = "Private/Public")]
      PrivatePublicEnum = 25,

      /// <summary>
      /// Enum PrivateEnum for Private
      /// </summary>
      [EnumMember(Value = "Private")]
      PrivateEnum = 26,

      /// <summary>
      /// Enum PublicSewerEnum for Public Sewer
      /// </summary>
      [EnumMember(Value = "Public Sewer")]
      PublicSewerEnum = 27,

      /// <summary>
      /// Enum PublicWaterSewerEnum for Public Water/Sewer
      /// </summary>
      [EnumMember(Value = "Public Water/Sewer")]
      PublicWaterSewerEnum = 28,

      /// <summary>
      /// Enum PublicEnum for Public
      /// </summary>
      [EnumMember(Value = "Public")]
      PublicEnum = 29,

      /// <summary>
      /// Enum PrivateWellEnum for Private Well
      /// </summary>
      [EnumMember(Value = "Private Well")]
      PrivateWellEnum = 30,

      /// <summary>
      /// Enum SewerAvailableEnum for Sewer Available
      /// </summary>
      [EnumMember(Value = "Sewer Available")]
      SewerAvailableEnum = 31,

      /// <summary>
      /// Enum SepticWellEnum for Septic/Well
      /// </summary>
      [EnumMember(Value = "Septic/Well")]
      SepticWellEnum = 32,

      /// <summary>
      /// Enum ElectricSewerGasEnum for Electric/Sewer/Gas
      /// </summary>
      [EnumMember(Value = "Electric/Sewer/Gas")]
      ElectricSewerGasEnum = 33,

      /// <summary>
      /// Enum SewerWellEnum for Sewer/Well
      /// </summary>
      [EnumMember(Value = "Sewer/Well")]
      SewerWellEnum = 34,

      /// <summary>
      /// Enum SolarEnum for Solar
      /// </summary>
      [EnumMember(Value = "Solar")]
      SolarEnum = 35,

      /// <summary>
      /// Enum ButaneSepticPublicWaterEnum for Butane/Septic/Public Water
      /// </summary>
      [EnumMember(Value = "Butane/Septic/Public Water")]
      ButaneSepticPublicWaterEnum = 36,

      /// <summary>
      /// Enum SewerWaterEnum for Sewer/Water
      /// </summary>
      [EnumMember(Value = "Sewer/Water")]
      SewerWaterEnum = 37,

      /// <summary>
      /// Enum StormSewerEnum for Storm Sewer
      /// </summary>
      [EnumMember(Value = "Storm Sewer")]
      StormSewerEnum = 38,

      /// <summary>
      /// Enum SepticTankEnum for Septic Tank
      /// </summary>
      [EnumMember(Value = "Septic Tank")]
      SepticTankEnum = 39,

      /// <summary>
      /// Enum SepticWaterEnum for Septic/Water
      /// </summary>
      [EnumMember(Value = "Septic/Water")]
      SepticWaterEnum = 40,

      /// <summary>
      /// Enum UtilitiesAvailableEnum for Utilities Available
      /// </summary>
      [EnumMember(Value = "Utilities Available")]
      UtilitiesAvailableEnum = 41,

      /// <summary>
      /// Enum WaterAvailableEnum for Water Available
      /// </summary>
      [EnumMember(Value = "Water Available")]
      WaterAvailableEnum = 42,

      /// <summary>
      /// Enum WellWaterEnum for Well Water
      /// </summary>
      [EnumMember(Value = "Well Water")]
      WellWaterEnum = 43,

      /// <summary>
      /// Enum ElectricWaterSewerEnum for Electric/Water/Sewer
      /// </summary>
      [EnumMember(Value = "Electric/Water/Sewer")]
      ElectricWaterSewerEnum = 44
    }

    /// <summary>
    /// The type of utilities used in a building (e.g., Electric, Oil, Private).
    /// </summary>
    /// <value>The type of utilities used in a building (e.g., Electric, Oil, Private). </value>
    [DataMember(Name = "UtilitiesType", EmitDefaultValue = false)]
    public UtilitiesTypeEnum UtilitiesType { get; set; }


    /// <summary>
    /// View from building (e.g., Gulf, Mountains, Pool).
    /// </summary>
    /// <value>View from building (e.g., Gulf, Mountains, Pool). </value>
    [TypeConverter(typeof(CustomEnumConverter<ViewTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ViewTypeEnum
    {

      /// <summary>
      /// Enum NoneEnum for None
      /// </summary>
      [EnumMember(Value = "None")]
      NoneEnum = 1,

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 2,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 3,

      /// <summary>
      /// Enum AirportEnum for Airport
      /// </summary>
      [EnumMember(Value = "Airport")]
      AirportEnum = 4,

      /// <summary>
      /// Enum AverageEnum for Average
      /// </summary>
      [EnumMember(Value = "Average")]
      AverageEnum = 5,

      /// <summary>
      /// Enum BayEnum for Bay
      /// </summary>
      [EnumMember(Value = "Bay")]
      BayEnum = 6,

      /// <summary>
      /// Enum BestEnum for Best
      /// </summary>
      [EnumMember(Value = "Best")]
      BestEnum = 7,

      /// <summary>
      /// Enum BetterEnum for Better
      /// </summary>
      [EnumMember(Value = "Better")]
      BetterEnum = 8,

      /// <summary>
      /// Enum CanalEnum for Canal
      /// </summary>
      [EnumMember(Value = "Canal")]
      CanalEnum = 9,

      /// <summary>
      /// Enum CityEnum for City
      /// </summary>
      [EnumMember(Value = "City")]
      CityEnum = 10,

      /// <summary>
      /// Enum CreekLakeEnum for Creek/Lake
      /// </summary>
      [EnumMember(Value = "Creek/Lake")]
      CreekLakeEnum = 11,

      /// <summary>
      /// Enum CanyonEnum for Canyon
      /// </summary>
      [EnumMember(Value = "Canyon")]
      CanyonEnum = 12,

      /// <summary>
      /// Enum ConservationProtectedAreaEnum for Conservation / Protected Area
      /// </summary>
      [EnumMember(Value = "Conservation / Protected Area")]
      ConservationProtectedAreaEnum = 13,

      /// <summary>
      /// Enum CanyonValleyEnum for Canyon/Valley
      /// </summary>
      [EnumMember(Value = "Canyon/Valley")]
      CanyonValleyEnum = 14,

      /// <summary>
      /// Enum ExcellentEnum for Excellent
      /// </summary>
      [EnumMember(Value = "Excellent")]
      ExcellentEnum = 15,

      /// <summary>
      /// Enum FairEnum for Fair
      /// </summary>
      [EnumMember(Value = "Fair")]
      FairEnum = 16,

      /// <summary>
      /// Enum GolfCourseEnum for Golf Course
      /// </summary>
      [EnumMember(Value = "Golf Course")]
      GolfCourseEnum = 17,

      /// <summary>
      /// Enum GoodEnum for Good
      /// </summary>
      [EnumMember(Value = "Good")]
      GoodEnum = 18,

      /// <summary>
      /// Enum GreenbeltParkEnum for Greenbelt/Park
      /// </summary>
      [EnumMember(Value = "Greenbelt/Park")]
      GreenbeltParkEnum = 19,

      /// <summary>
      /// Enum GulfEnum for Gulf
      /// </summary>
      [EnumMember(Value = "Gulf")]
      GulfEnum = 20,

      /// <summary>
      /// Enum HillsMountainsEnum for Hills/Mountains
      /// </summary>
      [EnumMember(Value = "Hills/Mountains")]
      HillsMountainsEnum = 21,

      /// <summary>
      /// Enum HillValleyEnum for Hill/Valley
      /// </summary>
      [EnumMember(Value = "Hill/Valley")]
      HillValleyEnum = 22,

      /// <summary>
      /// Enum InferiorEnum for Inferior
      /// </summary>
      [EnumMember(Value = "Inferior")]
      InferiorEnum = 23,

      /// <summary>
      /// Enum InlandWaterwayEnum for Inland Waterway
      /// </summary>
      [EnumMember(Value = "Inland Waterway")]
      InlandWaterwayEnum = 24,

      /// <summary>
      /// Enum IntercoastalWaterwayEnum for Intercoastal Waterway
      /// </summary>
      [EnumMember(Value = "Intercoastal Waterway")]
      IntercoastalWaterwayEnum = 25,

      /// <summary>
      /// Enum LakeEnum for Lake
      /// </summary>
      [EnumMember(Value = "Lake")]
      LakeEnum = 26,

      /// <summary>
      /// Enum LagoonEnum for Lagoon
      /// </summary>
      [EnumMember(Value = "Lagoon")]
      LagoonEnum = 27,

      /// <summary>
      /// Enum LakePondEnum for Lake/Pond
      /// </summary>
      [EnumMember(Value = "Lake/Pond")]
      LakePondEnum = 28,

      /// <summary>
      /// Enum MountainEnum for Mountain
      /// </summary>
      [EnumMember(Value = "Mountain")]
      MountainEnum = 29,

      /// <summary>
      /// Enum MountainOceanEnum for Mountain/Ocean
      /// </summary>
      [EnumMember(Value = "Mountain/Ocean")]
      MountainOceanEnum = 30,

      /// <summary>
      /// Enum ObstructedEnum for Obstructed
      /// </summary>
      [EnumMember(Value = "Obstructed")]
      ObstructedEnum = 31,

      /// <summary>
      /// Enum OceanEnum for Ocean
      /// </summary>
      [EnumMember(Value = "Ocean")]
      OceanEnum = 32,

      /// <summary>
      /// Enum ParkEnum for Park
      /// </summary>
      [EnumMember(Value = "Park")]
      ParkEnum = 33,

      /// <summary>
      /// Enum PondEnum for Pond
      /// </summary>
      [EnumMember(Value = "Pond")]
      PondEnum = 34,

      /// <summary>
      /// Enum ParkingEnum for Parking
      /// </summary>
      [EnumMember(Value = "Parking")]
      ParkingEnum = 35,

      /// <summary>
      /// Enum PrimeEnum for Prime
      /// </summary>
      [EnumMember(Value = "Prime")]
      PrimeEnum = 36,

      /// <summary>
      /// Enum PoolEnum for Pool
      /// </summary>
      [EnumMember(Value = "Pool")]
      PoolEnum = 37,

      /// <summary>
      /// Enum PremiumEnum for Premium
      /// </summary>
      [EnumMember(Value = "Premium")]
      PremiumEnum = 38,

      /// <summary>
      /// Enum PoorEnum for Poor
      /// </summary>
      [EnumMember(Value = "Poor")]
      PoorEnum = 39,

      /// <summary>
      /// Enum RecreationalEnum for Recreational
      /// </summary>
      [EnumMember(Value = "Recreational")]
      RecreationalEnum = 40,

      /// <summary>
      /// Enum RoadEnum for Road
      /// </summary>
      [EnumMember(Value = "Road")]
      RoadEnum = 41,

      /// <summary>
      /// Enum RiverEnum for River
      /// </summary>
      [EnumMember(Value = "River")]
      RiverEnum = 42,

      /// <summary>
      /// Enum StandardEnum for Standard
      /// </summary>
      [EnumMember(Value = "Standard")]
      StandardEnum = 43,

      /// <summary>
      /// Enum SuburbanEnum for Suburban
      /// </summary>
      [EnumMember(Value = "Suburban")]
      SuburbanEnum = 44,

      /// <summary>
      /// Enum SuperiorEnum for Superior
      /// </summary>
      [EnumMember(Value = "Superior")]
      SuperiorEnum = 45,

      /// <summary>
      /// Enum StreetEnum for Street
      /// </summary>
      [EnumMember(Value = "Street")]
      StreetEnum = 46,

      /// <summary>
      /// Enum TypicalEnum for Typical
      /// </summary>
      [EnumMember(Value = "Typical")]
      TypicalEnum = 47,

      /// <summary>
      /// Enum WoodlandEnum for Woodland
      /// </summary>
      [EnumMember(Value = "Woodland")]
      WoodlandEnum = 48,

      /// <summary>
      /// Enum WaterEnum for Water
      /// </summary>
      [EnumMember(Value = "Water")]
      WaterEnum = 49
    }

    /// <summary>
    /// View from building (e.g., Gulf, Mountains, Pool).
    /// </summary>
    /// <value>View from building (e.g., Gulf, Mountains, Pool). </value>
    [DataMember(Name = "ViewType", EmitDefaultValue = false)]
    public ViewTypeEnum ViewType { get; set; }


    /// <summary>
    /// Positive or negative aspects associated with the location of the parcel (e.g., Waterfront, Flood plane, Airport).
    /// </summary>
    /// <value>Positive or negative aspects associated with the location of the parcel (e.g., Waterfront, Flood plane, Airport). </value>
    [TypeConverter(typeof(CustomEnumConverter<LocationInfluenceEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum LocationInfluenceEnum
    {

      /// <summary>
      /// Enum TypeUnknownEnum for Type Unknown
      /// </summary>
      [EnumMember(Value = "Type Unknown")]
      TypeUnknownEnum = 1,

      /// <summary>
      /// Enum BypassEnum for Bypass
      /// </summary>
      [EnumMember(Value = "Bypass")]
      BypassEnum = 2,

      /// <summary>
      /// Enum AlleyCornerEnum for Alley/Corner
      /// </summary>
      [EnumMember(Value = "Alley/Corner")]
      AlleyCornerEnum = 3,

      /// <summary>
      /// Enum AgriculturalEnum for Agricultural
      /// </summary>
      [EnumMember(Value = "Agricultural")]
      AgriculturalEnum = 4,

      /// <summary>
      /// Enum AirportEnum for Airport
      /// </summary>
      [EnumMember(Value = "Airport")]
      AirportEnum = 5,

      /// <summary>
      /// Enum AlleyEnum for Alley
      /// </summary>
      [EnumMember(Value = "Alley")]
      AlleyEnum = 6,

      /// <summary>
      /// Enum AverageEnum for Average
      /// </summary>
      [EnumMember(Value = "Average")]
      AverageEnum = 7,

      /// <summary>
      /// Enum BayAccessEnum for Bay Access
      /// </summary>
      [EnumMember(Value = "Bay Access")]
      BayAccessEnum = 8,

      /// <summary>
      /// Enum BehindBayFrontEnum for Behind Bay Front
      /// </summary>
      [EnumMember(Value = "Behind Bay Front")]
      BehindBayFrontEnum = 9,

      /// <summary>
      /// Enum BeachEnum for Beach
      /// </summary>
      [EnumMember(Value = "Beach")]
      BeachEnum = 10,

      /// <summary>
      /// Enum BayFrontEnum for Bay Front
      /// </summary>
      [EnumMember(Value = "Bay Front")]
      BayFrontEnum = 11,

      /// <summary>
      /// Enum BehindGulfFrontEnum for Behind Gulf Front
      /// </summary>
      [EnumMember(Value = "Behind Gulf Front")]
      BehindGulfFrontEnum = 12,

      /// <summary>
      /// Enum BayFrontIslandEnum for Bay Front Island
      /// </summary>
      [EnumMember(Value = "Bay Front Island")]
      BayFrontIslandEnum = 13,

      /// <summary>
      /// Enum BackLotEnum for Back Lot
      /// </summary>
      [EnumMember(Value = "Back Lot")]
      BackLotEnum = 14,

      /// <summary>
      /// Enum BayFrontMainLandEnum for Bay Front Main-Land
      /// </summary>
      [EnumMember(Value = "Bay Front Main-Land")]
      BayFrontMainLandEnum = 15,

      /// <summary>
      /// Enum BeachRoadEnum for Beach Road
      /// </summary>
      [EnumMember(Value = "Beach Road")]
      BeachRoadEnum = 16,

      /// <summary>
      /// Enum BusinessEnum for Business
      /// </summary>
      [EnumMember(Value = "Business")]
      BusinessEnum = 17,

      /// <summary>
      /// Enum BayouEnum for Bayou
      /// </summary>
      [EnumMember(Value = "Bayou")]
      BayouEnum = 18,

      /// <summary>
      /// Enum BayEnum for Bay
      /// </summary>
      [EnumMember(Value = "Bay")]
      BayEnum = 19,

      /// <summary>
      /// Enum CanalEnum for Canal
      /// </summary>
      [EnumMember(Value = "Canal")]
      CanalEnum = 20,

      /// <summary>
      /// Enum CanalWaterfrontEnum for Canal/Waterfront
      /// </summary>
      [EnumMember(Value = "Canal/Waterfront")]
      CanalWaterfrontEnum = 21,

      /// <summary>
      /// Enum CreekEnum for Creek
      /// </summary>
      [EnumMember(Value = "Creek")]
      CreekEnum = 22,

      /// <summary>
      /// Enum CanalDrainageEnum for Canal Drainage
      /// </summary>
      [EnumMember(Value = "Canal Drainage")]
      CanalDrainageEnum = 23,

      /// <summary>
      /// Enum CornerExtraFrontEnum for Corner/Extra Front
      /// </summary>
      [EnumMember(Value = "Corner/Extra Front")]
      CornerExtraFrontEnum = 24,

      /// <summary>
      /// Enum CanalFrontEnum for Canal Front
      /// </summary>
      [EnumMember(Value = "Canal Front")]
      CanalFrontEnum = 25,

      /// <summary>
      /// Enum CanalFrontIslandEnum for Canal Front Island
      /// </summary>
      [EnumMember(Value = "Canal Front Island")]
      CanalFrontIslandEnum = 26,

      /// <summary>
      /// Enum CreekRiverEnum for Creek/River
      /// </summary>
      [EnumMember(Value = "Creek/River")]
      CreekRiverEnum = 27,

      /// <summary>
      /// Enum CornerLandlockEnum for Corner/Landlock
      /// </summary>
      [EnumMember(Value = "Corner/Landlock")]
      CornerLandlockEnum = 28,

      /// <summary>
      /// Enum CanalMainLandEnum for Canal Main-Land
      /// </summary>
      [EnumMember(Value = "Canal Main-Land")]
      CanalMainLandEnum = 29,

      /// <summary>
      /// Enum CornerWoodlotWaterfrontEnum for Corner/Woodlot/Waterfront
      /// </summary>
      [EnumMember(Value = "Corner/Woodlot/Waterfront")]
      CornerWoodlotWaterfrontEnum = 30,

      /// <summary>
      /// Enum CornerWoodlotEnum for Corner/Woodlot
      /// </summary>
      [EnumMember(Value = "Corner/Woodlot")]
      CornerWoodlotEnum = 31,

      /// <summary>
      /// Enum CornerEnum for Corner
      /// </summary>
      [EnumMember(Value = "Corner")]
      CornerEnum = 32,

      /// <summary>
      /// Enum CornerRestrictionsEnum for Corner/Restrictions
      /// </summary>
      [EnumMember(Value = "Corner/Restrictions")]
      CornerRestrictionsEnum = 33,

      /// <summary>
      /// Enum CornerWaterfrontEnum for Corner/Waterfront
      /// </summary>
      [EnumMember(Value = "Corner/Waterfront")]
      CornerWaterfrontEnum = 34,

      /// <summary>
      /// Enum CulDeSacEnum for Cul-De-Sac
      /// </summary>
      [EnumMember(Value = "Cul-De-Sac")]
      CulDeSacEnum = 35,

      /// <summary>
      /// Enum CornerLandlockWoodlotEnum for Corner/Landlock/Woodlot
      /// </summary>
      [EnumMember(Value = "Corner/Landlock/Woodlot")]
      CornerLandlockWoodlotEnum = 36,

      /// <summary>
      /// Enum CityEnum for City
      /// </summary>
      [EnumMember(Value = "City")]
      CityEnum = 37,

      /// <summary>
      /// Enum DeadEndEnum for Dead End
      /// </summary>
      [EnumMember(Value = "Dead End")]
      DeadEndEnum = 38,

      /// <summary>
      /// Enum DrainageEasementEnum for Drainage Easement
      /// </summary>
      [EnumMember(Value = "Drainage Easement")]
      DrainageEasementEnum = 39,

      /// <summary>
      /// Enum DowntownEnum for Downtown
      /// </summary>
      [EnumMember(Value = "Downtown")]
      DowntownEnum = 40,

      /// <summary>
      /// Enum DrainageEnum for Drainage
      /// </summary>
      [EnumMember(Value = "Drainage")]
      DrainageEnum = 41,

      /// <summary>
      /// Enum DesirableEnum for Desirable
      /// </summary>
      [EnumMember(Value = "Desirable")]
      DesirableEnum = 42,

      /// <summary>
      /// Enum DuplexLotsEnum for Duplex Lots
      /// </summary>
      [EnumMember(Value = "Duplex Lots")]
      DuplexLotsEnum = 43,

      /// <summary>
      /// Enum ExtraFrontEnum for Extra Front
      /// </summary>
      [EnumMember(Value = "Extra Front")]
      ExtraFrontEnum = 44,

      /// <summary>
      /// Enum ExpensiveLandEnum for Expensive Land
      /// </summary>
      [EnumMember(Value = "Expensive Land")]
      ExpensiveLandEnum = 45,

      /// <summary>
      /// Enum ExtraFrontRestrictionsEnum for Extra Front/Restrictions
      /// </summary>
      [EnumMember(Value = "Extra Front/Restrictions")]
      ExtraFrontRestrictionsEnum = 46,

      /// <summary>
      /// Enum EasementEnum for Easement
      /// </summary>
      [EnumMember(Value = "Easement")]
      EasementEnum = 47,

      /// <summary>
      /// Enum FloodLineEnum for Flood Line
      /// </summary>
      [EnumMember(Value = "Flood Line")]
      FloodLineEnum = 48,

      /// <summary>
      /// Enum FourPlexLotEnum for Four Plex Lot
      /// </summary>
      [EnumMember(Value = "Four Plex Lot")]
      FourPlexLotEnum = 49,

      /// <summary>
      /// Enum FloodPlainEnum for Flood Plain
      /// </summary>
      [EnumMember(Value = "Flood Plain")]
      FloodPlainEnum = 50,

      /// <summary>
      /// Enum GolfCourseEnum for Golf Course
      /// </summary>
      [EnumMember(Value = "Golf Course")]
      GolfCourseEnum = 51,

      /// <summary>
      /// Enum GreenbeltGolfCourseEnum for Greenbelt/Golf Course
      /// </summary>
      [EnumMember(Value = "Greenbelt/Golf Course")]
      GreenbeltGolfCourseEnum = 52,

      /// <summary>
      /// Enum GolfLakeEnum for Golf/Lake
      /// </summary>
      [EnumMember(Value = "Golf/Lake")]
      GolfLakeEnum = 53,

      /// <summary>
      /// Enum GoodEnum for Good
      /// </summary>
      [EnumMember(Value = "Good")]
      GoodEnum = 54,

      /// <summary>
      /// Enum GreenbeltEnum for Greenbelt
      /// </summary>
      [EnumMember(Value = "Greenbelt")]
      GreenbeltEnum = 55,

      /// <summary>
      /// Enum GulfEnum for Gulf
      /// </summary>
      [EnumMember(Value = "Gulf")]
      GulfEnum = 56,

      /// <summary>
      /// Enum GolfWaterEnum for Golf/Water
      /// </summary>
      [EnumMember(Value = "Golf/Water")]
      GolfWaterEnum = 57,

      /// <summary>
      /// Enum HighwayEnum for Highway
      /// </summary>
      [EnumMember(Value = "Highway")]
      HighwayEnum = 58,

      /// <summary>
      /// Enum InsideCityEnum for Inside City
      /// </summary>
      [EnumMember(Value = "Inside City")]
      InsideCityEnum = 59,

      /// <summary>
      /// Enum IslandGulfFrontEnum for Island Gulf Front
      /// </summary>
      [EnumMember(Value = "Island Gulf Front")]
      IslandGulfFrontEnum = 60,

      /// <summary>
      /// Enum IndustrialEnum for Industrial
      /// </summary>
      [EnumMember(Value = "Industrial")]
      IndustrialEnum = 61,

      /// <summary>
      /// Enum InOutCityEnum for In-Out City
      /// </summary>
      [EnumMember(Value = "In-Out City")]
      InOutCityEnum = 62,

      /// <summary>
      /// Enum IslandEnum for Island
      /// </summary>
      [EnumMember(Value = "Island")]
      IslandEnum = 63,

      /// <summary>
      /// Enum InlandWaterwayEnum for Inland Waterway
      /// </summary>
      [EnumMember(Value = "Inland Waterway")]
      InlandWaterwayEnum = 64,

      /// <summary>
      /// Enum IslandNoWaterfrontEnum for Island No Waterfront
      /// </summary>
      [EnumMember(Value = "Island No Waterfront")]
      IslandNoWaterfrontEnum = 65,

      /// <summary>
      /// Enum LagoonEnum for Lagoon
      /// </summary>
      [EnumMember(Value = "Lagoon")]
      LagoonEnum = 66,

      /// <summary>
      /// Enum LandlockedWoodlotWaterfrontEnum for Landlocked/Woodlot/Waterfront
      /// </summary>
      [EnumMember(Value = "Landlocked/Woodlot/Waterfront")]
      LandlockedWoodlotWaterfrontEnum = 67,

      /// <summary>
      /// Enum LakeFrontEnum for Lake Front
      /// </summary>
      [EnumMember(Value = "Lake Front")]
      LakeFrontEnum = 68,

      /// <summary>
      /// Enum LakeEnum for Lake
      /// </summary>
      [EnumMember(Value = "Lake")]
      LakeEnum = 69,

      /// <summary>
      /// Enum LandlockedEnum for Landlocked
      /// </summary>
      [EnumMember(Value = "Landlocked")]
      LandlockedEnum = 70,

      /// <summary>
      /// Enum LakePondEnum for Lake/Pond
      /// </summary>
      [EnumMember(Value = "Lake/Pond")]
      LakePondEnum = 71,

      /// <summary>
      /// Enum LandlockedWoodlotEnum for Landlocked/Woodlot
      /// </summary>
      [EnumMember(Value = "Landlocked/Woodlot")]
      LandlockedWoodlotEnum = 72,

      /// <summary>
      /// Enum LandlockedWaterfrontEnum for Landlocked/Waterfront
      /// </summary>
      [EnumMember(Value = "Landlocked/Waterfront")]
      LandlockedWaterfrontEnum = 73,

      /// <summary>
      /// Enum MobileHomeEnum for Mobile Home
      /// </summary>
      [EnumMember(Value = "Mobile Home")]
      MobileHomeEnum = 74,

      /// <summary>
      /// Enum MainLandEnum for Main Land
      /// </summary>
      [EnumMember(Value = "Main Land")]
      MainLandEnum = 75,

      /// <summary>
      /// Enum MountainEnum for Mountain
      /// </summary>
      [EnumMember(Value = "Mountain")]
      MountainEnum = 76,

      /// <summary>
      /// Enum NonBuildableEnum for Non Buildable
      /// </summary>
      [EnumMember(Value = "Non Buildable")]
      NonBuildableEnum = 77,

      /// <summary>
      /// Enum IntracoastalEnum for Intracoastal
      /// </summary>
      [EnumMember(Value = "Intracoastal")]
      IntracoastalEnum = 78,

      /// <summary>
      /// Enum NeighborhoodEnum for Neighborhood
      /// </summary>
      [EnumMember(Value = "Neighborhood")]
      NeighborhoodEnum = 79,

      /// <summary>
      /// Enum InferiorEnum for Inferior
      /// </summary>
      [EnumMember(Value = "Inferior")]
      InferiorEnum = 80,

      /// <summary>
      /// Enum InteriorEnum for Interior
      /// </summary>
      [EnumMember(Value = "Interior")]
      InteriorEnum = 81,

      /// <summary>
      /// Enum OceanEnum for Ocean
      /// </summary>
      [EnumMember(Value = "Ocean")]
      OceanEnum = 82,

      /// <summary>
      /// Enum OpenSpaceEnum for Open Space
      /// </summary>
      [EnumMember(Value = "Open Space")]
      OpenSpaceEnum = 83,

      /// <summary>
      /// Enum OutsideCityEnum for Outside City
      /// </summary>
      [EnumMember(Value = "Outside City")]
      OutsideCityEnum = 84,

      /// <summary>
      /// Enum ParkLandEnum for Park Land
      /// </summary>
      [EnumMember(Value = "Park Land")]
      ParkLandEnum = 85,

      /// <summary>
      /// Enum PoorAccessEnum for Poor Access
      /// </summary>
      [EnumMember(Value = "Poor Access")]
      PoorAccessEnum = 86,

      /// <summary>
      /// Enum PondEnum for Pond
      /// </summary>
      [EnumMember(Value = "Pond")]
      PondEnum = 87,

      /// <summary>
      /// Enum PerimeterLotEnum for Perimeter Lot
      /// </summary>
      [EnumMember(Value = "Perimeter Lot")]
      PerimeterLotEnum = 88,

      /// <summary>
      /// Enum ParkFrontEnum for Park Front
      /// </summary>
      [EnumMember(Value = "Park Front")]
      ParkFrontEnum = 89,

      /// <summary>
      /// Enum PoolEnum for Pool
      /// </summary>
      [EnumMember(Value = "Pool")]
      PoolEnum = 90,

      /// <summary>
      /// Enum PreserveEnum for Preserve
      /// </summary>
      [EnumMember(Value = "Preserve")]
      PreserveEnum = 91,

      /// <summary>
      /// Enum PoorAccessEnum2 for Poor Access
      /// </summary>
      [EnumMember(Value = "Poor Access")]
      PoorAccessEnum2 = 92,

      /// <summary>
      /// Enum PrivateRoadEnum for Private Road
      /// </summary>
      [EnumMember(Value = "Private Road")]
      PrivateRoadEnum = 93,

      /// <summary>
      /// Enum RavineEnum for Ravine
      /// </summary>
      [EnumMember(Value = "Ravine")]
      RavineEnum = 94,

      /// <summary>
      /// Enum RecreationalEnum for Recreational
      /// </summary>
      [EnumMember(Value = "Recreational")]
      RecreationalEnum = 95,

      /// <summary>
      /// Enum RearEnum for Rear
      /// </summary>
      [EnumMember(Value = "Rear")]
      RearEnum = 96,

      /// <summary>
      /// Enum RiverEnum for River
      /// </summary>
      [EnumMember(Value = "River")]
      RiverEnum = 97,

      /// <summary>
      /// Enum IrregularLotEnum for Irregular Lot
      /// </summary>
      [EnumMember(Value = "Irregular Lot")]
      IrregularLotEnum = 98,

      /// <summary>
      /// Enum RoadEnum for Road
      /// </summary>
      [EnumMember(Value = "Road")]
      RoadEnum = 99,

      /// <summary>
      /// Enum RestrictionsEnum for Restrictions
      /// </summary>
      [EnumMember(Value = "Restrictions")]
      RestrictionsEnum = 100,

      /// <summary>
      /// Enum RuralEnum for Rural
      /// </summary>
      [EnumMember(Value = "Rural")]
      RuralEnum = 101,

      /// <summary>
      /// Enum SoundEnum for Sound
      /// </summary>
      [EnumMember(Value = "Sound")]
      SoundEnum = 102,

      /// <summary>
      /// Enum SubmergedLandEnum for Submerged Land
      /// </summary>
      [EnumMember(Value = "Submerged Land")]
      SubmergedLandEnum = 103,

      /// <summary>
      /// Enum StreetEnum for Street
      /// </summary>
      [EnumMember(Value = "Street")]
      StreetEnum = 104,

      /// <summary>
      /// Enum SuburbanEnum for Suburban
      /// </summary>
      [EnumMember(Value = "Suburban")]
      SuburbanEnum = 105,

      /// <summary>
      /// Enum TownhouseEnum for Townhouse
      /// </summary>
      [EnumMember(Value = "Townhouse")]
      TownhouseEnum = 106,

      /// <summary>
      /// Enum TriPlexLotEnum for Tri Plex Lot
      /// </summary>
      [EnumMember(Value = "Tri Plex Lot")]
      TriPlexLotEnum = 107,

      /// <summary>
      /// Enum TrafficEnum for Traffic
      /// </summary>
      [EnumMember(Value = "Traffic")]
      TrafficEnum = 108,

      /// <summary>
      /// Enum UrbanEnum for Urban
      /// </summary>
      [EnumMember(Value = "Urban")]
      UrbanEnum = 109,

      /// <summary>
      /// Enum ValleyEnum for Valley
      /// </summary>
      [EnumMember(Value = "Valley")]
      ValleyEnum = 110,

      /// <summary>
      /// Enum WaterAccessEnum for Water Access
      /// </summary>
      [EnumMember(Value = "Water Access")]
      WaterAccessEnum = 111,

      /// <summary>
      /// Enum WaterCulDeSacEnum for Water/Cul-De-Sac
      /// </summary>
      [EnumMember(Value = "Water/Cul-De-Sac")]
      WaterCulDeSacEnum = 112,

      /// <summary>
      /// Enum WetlandEnum for Wetland
      /// </summary>
      [EnumMember(Value = "Wetland")]
      WetlandEnum = 113,

      /// <summary>
      /// Enum WaterfrontEnum for Waterfront
      /// </summary>
      [EnumMember(Value = "Waterfront")]
      WaterfrontEnum = 114,

      /// <summary>
      /// Enum WoodlandEnum for Woodland
      /// </summary>
      [EnumMember(Value = "Woodland")]
      WoodlandEnum = 115,

      /// <summary>
      /// Enum WaterfallsEnum for Waterfalls
      /// </summary>
      [EnumMember(Value = "Waterfalls")]
      WaterfallsEnum = 116,

      /// <summary>
      /// Enum WaterEnum for Water
      /// </summary>
      [EnumMember(Value = "Water")]
      WaterEnum = 117,

      /// <summary>
      /// Enum WoodlotWaterfrontEnum for Woodlot/Waterfront
      /// </summary>
      [EnumMember(Value = "Woodlot/Waterfront")]
      WoodlotWaterfrontEnum = 118,

      /// <summary>
      /// Enum AptCondoComplexEnum for Apt/Condo Complex
      /// </summary>
      [EnumMember(Value = "Apt/Condo Complex")]
      AptCondoComplexEnum = 119,

      /// <summary>
      /// Enum BusinessClusterEnum for Business Cluster
      /// </summary>
      [EnumMember(Value = "Business Cluster")]
      BusinessClusterEnum = 120,

      /// <summary>
      /// Enum CentralBusinessEnum for Central Business
      /// </summary>
      [EnumMember(Value = "Central Business")]
      CentralBusinessEnum = 121,

      /// <summary>
      /// Enum CommercialIndustrialEnum for Commercial/Industrial
      /// </summary>
      [EnumMember(Value = "Commercial/Industrial")]
      CommercialIndustrialEnum = 122,

      /// <summary>
      /// Enum IndustrialSizeEnum for Industrial Size
      /// </summary>
      [EnumMember(Value = "Industrial Size")]
      IndustrialSizeEnum = 123,

      /// <summary>
      /// Enum MajorStripEnum for Major Strip
      /// </summary>
      [EnumMember(Value = "Major Strip")]
      MajorStripEnum = 124,

      /// <summary>
      /// Enum NeighborhoodSpotEnum for Neighborhood / Spot
      /// </summary>
      [EnumMember(Value = "Neighborhood / Spot")]
      NeighborhoodSpotEnum = 125,

      /// <summary>
      /// Enum PermCentralBusinessEnum for Perm Central Business
      /// </summary>
      [EnumMember(Value = "Perm Central Business")]
      PermCentralBusinessEnum = 126,

      /// <summary>
      /// Enum SecondaryBusStripEnum for Secondary Bus Strip
      /// </summary>
      [EnumMember(Value = "Secondary Bus Strip")]
      SecondaryBusStripEnum = 127,

      /// <summary>
      /// Enum ZeroLotLineEnum for Zero Lot Line
      /// </summary>
      [EnumMember(Value = "Zero Lot Line")]
      ZeroLotLineEnum = 128,

      /// <summary>
      /// Enum UnitAbutsElevatorEnum for Unit Abuts Elevator
      /// </summary>
      [EnumMember(Value = "Unit Abuts Elevator")]
      UnitAbutsElevatorEnum = 129,

      /// <summary>
      /// Enum AverageEnum2 for Average
      /// </summary>
      [EnumMember(Value = "Average")]
      AverageEnum2 = 130,

      /// <summary>
      /// Enum CondominimumHiRiseEnum for Condominimum Hi-Rise
      /// </summary>
      [EnumMember(Value = "Condominimum Hi-Rise")]
      CondominimumHiRiseEnum = 131,

      /// <summary>
      /// Enum CondominimumLoRiseEnum for Condominimum Lo-Rise
      /// </summary>
      [EnumMember(Value = "Condominimum Lo-Rise")]
      CondominimumLoRiseEnum = 132,

      /// <summary>
      /// Enum CondoEnum for Condo
      /// </summary>
      [EnumMember(Value = "Condo")]
      CondoEnum = 133,

      /// <summary>
      /// Enum CornerUnitEnum for Corner Unit
      /// </summary>
      [EnumMember(Value = "Corner Unit")]
      CornerUnitEnum = 134,

      /// <summary>
      /// Enum CondominimumVillasEnum for Condominimum Villas
      /// </summary>
      [EnumMember(Value = "Condominimum Villas")]
      CondominimumVillasEnum = 135,

      /// <summary>
      /// Enum DuplexEnum for Duplex
      /// </summary>
      [EnumMember(Value = "Duplex")]
      DuplexEnum = 136,

      /// <summary>
      /// Enum EndUnitEnum for End Unit
      /// </summary>
      [EnumMember(Value = "End Unit")]
      EndUnitEnum = 137,

      /// <summary>
      /// Enum ExcellentEnum for Excellent
      /// </summary>
      [EnumMember(Value = "Excellent")]
      ExcellentEnum = 138,

      /// <summary>
      /// Enum FireDamageEnum for Fire Damage
      /// </summary>
      [EnumMember(Value = "Fire Damage")]
      FireDamageEnum = 139,

      /// <summary>
      /// Enum FrontUnitEnum for Front Unit
      /// </summary>
      [EnumMember(Value = "Front Unit")]
      FrontUnitEnum = 140,

      /// <summary>
      /// Enum GoodEnum2 for Good
      /// </summary>
      [EnumMember(Value = "Good")]
      GoodEnum2 = 141,

      /// <summary>
      /// Enum InferiorEnum2 for Inferior
      /// </summary>
      [EnumMember(Value = "Inferior")]
      InferiorEnum2 = 142,

      /// <summary>
      /// Enum InteriorUnitEnum for Interior Unit
      /// </summary>
      [EnumMember(Value = "Interior Unit")]
      InteriorUnitEnum = 143,

      /// <summary>
      /// Enum OutsideCityEnum2 for Outside City
      /// </summary>
      [EnumMember(Value = "Outside City")]
      OutsideCityEnum2 = 144,

      /// <summary>
      /// Enum PenthouseEnum for Penthouse
      /// </summary>
      [EnumMember(Value = "Penthouse")]
      PenthouseEnum = 145,

      /// <summary>
      /// Enum RecreationalEnum2 for Recreational
      /// </summary>
      [EnumMember(Value = "Recreational")]
      RecreationalEnum2 = 146,

      /// <summary>
      /// Enum RiverEnum2 for River
      /// </summary>
      [EnumMember(Value = "River")]
      RiverEnum2 = 147,

      /// <summary>
      /// Enum RearUnitEnum for Rear Unit
      /// </summary>
      [EnumMember(Value = "Rear Unit")]
      RearUnitEnum = 148,

      /// <summary>
      /// Enum SplitPlanMasterEnum for Split Plan/Master
      /// </summary>
      [EnumMember(Value = "Split Plan/Master")]
      SplitPlanMasterEnum = 149,

      /// <summary>
      /// Enum SuperiorEnum for Superior
      /// </summary>
      [EnumMember(Value = "Superior")]
      SuperiorEnum = 150,

      /// <summary>
      /// Enum TypicalEnum for Typical
      /// </summary>
      [EnumMember(Value = "Typical")]
      TypicalEnum = 151,

      /// <summary>
      /// Enum ExteriorUnitEnum for Exterior Unit
      /// </summary>
      [EnumMember(Value = "Exterior Unit")]
      ExteriorUnitEnum = 152,

      /// <summary>
      /// Enum ApartmentCondoEnum for Apartment/Condo
      /// </summary>
      [EnumMember(Value = "Apartment/Condo")]
      ApartmentCondoEnum = 153,

      /// <summary>
      /// Enum ApartmentEnum for Apartment
      /// </summary>
      [EnumMember(Value = "Apartment")]
      ApartmentEnum = 154,

      /// <summary>
      /// Enum BuildableEnum for Buildable
      /// </summary>
      [EnumMember(Value = "Buildable")]
      BuildableEnum = 155,

      /// <summary>
      /// Enum CityEnum2 for City
      /// </summary>
      [EnumMember(Value = "City")]
      CityEnum2 = 156,

      /// <summary>
      /// Enum CommercialEnum for Commercial
      /// </summary>
      [EnumMember(Value = "Commercial")]
      CommercialEnum = 157,

      /// <summary>
      /// Enum SecondaryEnum for Secondary
      /// </summary>
      [EnumMember(Value = "Secondary")]
      SecondaryEnum = 158,

      /// <summary>
      /// Enum FrontEnum for Front
      /// </summary>
      [EnumMember(Value = "Front")]
      FrontEnum = 159,

      /// <summary>
      /// Enum HomesiteEnum for Homesite
      /// </summary>
      [EnumMember(Value = "Homesite")]
      HomesiteEnum = 160,

      /// <summary>
      /// Enum IndustrialEnum2 for Industrial
      /// </summary>
      [EnumMember(Value = "Industrial")]
      IndustrialEnum2 = 161,

      /// <summary>
      /// Enum InstitutionalEnum for Institutional
      /// </summary>
      [EnumMember(Value = "Institutional")]
      InstitutionalEnum = 162,

      /// <summary>
      /// Enum MobileHomeEnum2 for Mobile Home
      /// </summary>
      [EnumMember(Value = "Mobile Home")]
      MobileHomeEnum2 = 163,

      /// <summary>
      /// Enum NeighborhoodEnum2 for Neighborhood
      /// </summary>
      [EnumMember(Value = "Neighborhood")]
      NeighborhoodEnum2 = 164,

      /// <summary>
      /// Enum PrimaryEnum for Primary
      /// </summary>
      [EnumMember(Value = "Primary")]
      PrimaryEnum = 165,

      /// <summary>
      /// Enum ResidualEnum for Residual
      /// </summary>
      [EnumMember(Value = "Residual")]
      ResidualEnum = 166,

      /// <summary>
      /// Enum RehabilitationEnum for Rehabilitation
      /// </summary>
      [EnumMember(Value = "Rehabilitation")]
      RehabilitationEnum = 167,

      /// <summary>
      /// Enum RoadEnum2 for Road
      /// </summary>
      [EnumMember(Value = "Road")]
      RoadEnum2 = 168,

      /// <summary>
      /// Enum RestaurantEnum for Restaurant
      /// </summary>
      [EnumMember(Value = "Restaurant")]
      RestaurantEnum = 169,

      /// <summary>
      /// Enum RearUnitEnum2 for Rear Unit
      /// </summary>
      [EnumMember(Value = "Rear Unit")]
      RearUnitEnum2 = 170,

      /// <summary>
      /// Enum WarehouseEnum for Warehouse
      /// </summary>
      [EnumMember(Value = "Warehouse")]
      WarehouseEnum = 171,

      /// <summary>
      /// Enum ExcessEnum for Excess
      /// </summary>
      [EnumMember(Value = "Excess")]
      ExcessEnum = 172,

      /// <summary>
      /// Enum AirportEnum2 for Airport
      /// </summary>
      [EnumMember(Value = "Airport")]
      AirportEnum2 = 173,

      /// <summary>
      /// Enum AverageEnum3 for Average
      /// </summary>
      [EnumMember(Value = "Average")]
      AverageEnum3 = 174,

      /// <summary>
      /// Enum BayEnum2 for Bay
      /// </summary>
      [EnumMember(Value = "Bay")]
      BayEnum2 = 175,

      /// <summary>
      /// Enum BestEnum for Best
      /// </summary>
      [EnumMember(Value = "Best")]
      BestEnum = 176,

      /// <summary>
      /// Enum BluffEnum for Bluff
      /// </summary>
      [EnumMember(Value = "Bluff")]
      BluffEnum = 177,

      /// <summary>
      /// Enum BetterEnum for Better
      /// </summary>
      [EnumMember(Value = "Better")]
      BetterEnum = 178,

      /// <summary>
      /// Enum CanalEnum2 for Canal
      /// </summary>
      [EnumMember(Value = "Canal")]
      CanalEnum2 = 179,

      /// <summary>
      /// Enum CityEnum3 for City
      /// </summary>
      [EnumMember(Value = "City")]
      CityEnum3 = 180,

      /// <summary>
      /// Enum CreekLakeEnum for Creek/Lake
      /// </summary>
      [EnumMember(Value = "Creek/Lake")]
      CreekLakeEnum = 181,

      /// <summary>
      /// Enum CanyonEnum for Canyon
      /// </summary>
      [EnumMember(Value = "Canyon")]
      CanyonEnum = 182,

      /// <summary>
      /// Enum ConservationProtectedAreaEnum for Conservation / Protected Area
      /// </summary>
      [EnumMember(Value = "Conservation / Protected Area")]
      ConservationProtectedAreaEnum = 183,

      /// <summary>
      /// Enum CanyonValleyEnum for Canyon/Valley
      /// </summary>
      [EnumMember(Value = "Canyon/Valley")]
      CanyonValleyEnum = 184,

      /// <summary>
      /// Enum ExcellentEnum2 for Excellent
      /// </summary>
      [EnumMember(Value = "Excellent")]
      ExcellentEnum2 = 185,

      /// <summary>
      /// Enum FairEnum for Fair
      /// </summary>
      [EnumMember(Value = "Fair")]
      FairEnum = 186,

      /// <summary>
      /// Enum GolfCourseEnum2 for Golf Course
      /// </summary>
      [EnumMember(Value = "Golf Course")]
      GolfCourseEnum2 = 187,

      /// <summary>
      /// Enum GoodEnum3 for Good
      /// </summary>
      [EnumMember(Value = "Good")]
      GoodEnum3 = 188,

      /// <summary>
      /// Enum GreenbeltParkEnum for Greenbelt/Park
      /// </summary>
      [EnumMember(Value = "Greenbelt/Park")]
      GreenbeltParkEnum = 189,

      /// <summary>
      /// Enum GulfEnum2 for Gulf
      /// </summary>
      [EnumMember(Value = "Gulf")]
      GulfEnum2 = 190,

      /// <summary>
      /// Enum HillsMountainsEnum for Hills/Mountains
      /// </summary>
      [EnumMember(Value = "Hills/Mountains")]
      HillsMountainsEnum = 191,

      /// <summary>
      /// Enum HillValleyEnum for Hill/Valley
      /// </summary>
      [EnumMember(Value = "Hill/Valley")]
      HillValleyEnum = 192,

      /// <summary>
      /// Enum InferiorEnum3 for Inferior
      /// </summary>
      [EnumMember(Value = "Inferior")]
      InferiorEnum3 = 193,

      /// <summary>
      /// Enum InterstateEnum for Interstate
      /// </summary>
      [EnumMember(Value = "Interstate")]
      InterstateEnum = 194,

      /// <summary>
      /// Enum InlandWaterwayEnum2 for Inland Waterway
      /// </summary>
      [EnumMember(Value = "Inland Waterway")]
      InlandWaterwayEnum2 = 195,

      /// <summary>
      /// Enum IntercoastalWaterwayEnum for Intercoastal Waterway
      /// </summary>
      [EnumMember(Value = "Intercoastal Waterway")]
      IntercoastalWaterwayEnum = 196,

      /// <summary>
      /// Enum LakeEnum2 for Lake
      /// </summary>
      [EnumMember(Value = "Lake")]
      LakeEnum2 = 197,

      /// <summary>
      /// Enum LagoonEnum2 for Lagoon
      /// </summary>
      [EnumMember(Value = "Lagoon")]
      LagoonEnum2 = 198,

      /// <summary>
      /// Enum LakePondEnum2 for Lake/Pond
      /// </summary>
      [EnumMember(Value = "Lake/Pond")]
      LakePondEnum2 = 199,

      /// <summary>
      /// Enum MountainEnum2 for Mountain
      /// </summary>
      [EnumMember(Value = "Mountain")]
      MountainEnum2 = 200,

      /// <summary>
      /// Enum MountainOceanEnum for Mountain/Ocean
      /// </summary>
      [EnumMember(Value = "Mountain/Ocean")]
      MountainOceanEnum = 201,

      /// <summary>
      /// Enum ObstructedEnum for Obstructed
      /// </summary>
      [EnumMember(Value = "Obstructed")]
      ObstructedEnum = 202,

      /// <summary>
      /// Enum OceanEnum2 for Ocean
      /// </summary>
      [EnumMember(Value = "Ocean")]
      OceanEnum2 = 203,

      /// <summary>
      /// Enum ParkEnum for Park
      /// </summary>
      [EnumMember(Value = "Park")]
      ParkEnum = 204,

      /// <summary>
      /// Enum PondEnum2 for Pond
      /// </summary>
      [EnumMember(Value = "Pond")]
      PondEnum2 = 205,

      /// <summary>
      /// Enum ParkingEnum for Parking
      /// </summary>
      [EnumMember(Value = "Parking")]
      ParkingEnum = 206,

      /// <summary>
      /// Enum PrimeEnum for Prime
      /// </summary>
      [EnumMember(Value = "Prime")]
      PrimeEnum = 207,

      /// <summary>
      /// Enum PoolEnum2 for Pool
      /// </summary>
      [EnumMember(Value = "Pool")]
      PoolEnum2 = 208,

      /// <summary>
      /// Enum PremiumEnum for Premium
      /// </summary>
      [EnumMember(Value = "Premium")]
      PremiumEnum = 209,

      /// <summary>
      /// Enum PoorEnum for Poor
      /// </summary>
      [EnumMember(Value = "Poor")]
      PoorEnum = 210,

      /// <summary>
      /// Enum RecreationalEnum3 for Recreational
      /// </summary>
      [EnumMember(Value = "Recreational")]
      RecreationalEnum3 = 211,

      /// <summary>
      /// Enum RoadEnum3 for Road
      /// </summary>
      [EnumMember(Value = "Road")]
      RoadEnum3 = 212,

      /// <summary>
      /// Enum RiverEnum3 for River
      /// </summary>
      [EnumMember(Value = "River")]
      RiverEnum3 = 213,

      /// <summary>
      /// Enum StandardEnum for Standard
      /// </summary>
      [EnumMember(Value = "Standard")]
      StandardEnum = 214,

      /// <summary>
      /// Enum SuburbanEnum2 for Suburban
      /// </summary>
      [EnumMember(Value = "Suburban")]
      SuburbanEnum2 = 215,

      /// <summary>
      /// Enum SuperiorEnum2 for Superior
      /// </summary>
      [EnumMember(Value = "Superior")]
      SuperiorEnum2 = 216,

      /// <summary>
      /// Enum StreetEnum2 for Street
      /// </summary>
      [EnumMember(Value = "Street")]
      StreetEnum2 = 217,

      /// <summary>
      /// Enum TypicalEnum2 for Typical
      /// </summary>
      [EnumMember(Value = "Typical")]
      TypicalEnum2 = 218,

      /// <summary>
      /// Enum WoodlandEnum2 for Woodland
      /// </summary>
      [EnumMember(Value = "Woodland")]
      WoodlandEnum2 = 219,

      /// <summary>
      /// Enum WaterEnum2 for Water
      /// </summary>
      [EnumMember(Value = "Water")]
      WaterEnum2 = 220,

      /// <summary>
      /// Enum WaterViewEnum for Water View
      /// </summary>
      [EnumMember(Value = "Water View")]
      WaterViewEnum = 221
    }

    /// <summary>
    /// Positive or negative aspects associated with the location of the parcel (e.g., Waterfront, Flood plane, Airport).
    /// </summary>
    /// <value>Positive or negative aspects associated with the location of the parcel (e.g., Waterfront, Flood plane, Airport). </value>
    [DataMember(Name = "LocationInfluence", EmitDefaultValue = false)]
    public LocationInfluenceEnum LocationInfluence { get; set; }

    /// <summary>
    /// This is the total square footage of the primary garage or parking area.
    /// </summary>
    /// <value>This is the total square footage of the primary garage or parking area. </value>
    [DataMember(Name = "GarageSqFt", EmitDefaultValue = false)]
    public int GarageSqFt { get; set; }

    /// <summary>
    /// The linear feet across the front of the lot - facing the street.
    /// </summary>
    /// <value>The linear feet across the front of the lot - facing the street. </value>
    [DataMember(Name = "LotFrontFootage", EmitDefaultValue = false)]
    public int LotFrontFootage { get; set; }

    /// <summary>
    /// The linear feet between the front and back of the lot.
    /// </summary>
    /// <value>The linear feet between the front and back of the lot. </value>
    [DataMember(Name = "LotDepthFootage", EmitDefaultValue = false)]
    public int LotDepthFootage { get; set; }


    /// <summary>
    /// Whether or not the property is owner occupied. If the owner claims this property as their primary residence OR the owner's address is the same as the site address, the property is considered owner occupied. Non owner-occupied properties include long-term rentals, short-term rentals, vacation properties, and second homes. Non owner-occupied property owners are also called absentee owners.
    /// </summary>
    /// <value>Whether or not the property is owner occupied. If the owner claims this property as their primary residence OR the owner's address is the same as the site address, the property is considered owner occupied. Non owner-occupied properties include long-term rentals, short-term rentals, vacation properties, and second homes. Non owner-occupied property owners are also called absentee owners. </value>

    public enum IsSameMailingOrExemptEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property is owner occupied. If the owner claims this property as their primary residence OR the owner&#39;s address is the same as the site address, the property is considered owner occupied. Non owner-occupied properties include long-term rentals, short-term rentals, vacation properties, and second homes. Non owner-occupied property owners are also called absentee owners.
    /// </summary>
    /// <value>Whether or not the property is owner occupied. If the owner claims this property as their primary residence OR the owner&#39;s address is the same as the site address, the property is considered owner occupied. Non owner-occupied properties include long-term rentals, short-term rentals, vacation properties, and second homes. Non owner-occupied property owners are also called absentee owners. </value>
    [DataMember(Name = "isSameMailingOrExempt", EmitDefaultValue = false)]
    public IsSameMailingOrExemptEnum IsSameMailingOrExempt { get; set; }


    /// <summary>
    /// Whether or not the property has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses.
    /// </summary>
    /// <value>Whether or not the property has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses. </value>

    public enum IsSiteVacantEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses.
    /// </summary>
    /// <value>Whether or not the property has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses. </value>
    [DataMember(Name = "isSiteVacant", EmitDefaultValue = false)]
    public IsSiteVacantEnum IsSiteVacant { get; set; }


    /// <summary>
    /// The type of ownership: individual, couple, multiple owners, corporate or trust.
    /// </summary>
    /// <value>The type of ownership: individual, couple, multiple owners, corporate or trust. </value>
    [TypeConverter(typeof(CustomEnumConverter<OwnershipTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OwnershipTypeEnum
    {

      /// <summary>
      /// Enum TrustEnum for Trust
      /// </summary>
      [EnumMember(Value = "Trust")]
      TrustEnum = 1,

      /// <summary>
      /// Enum MultipleOwnersEnum for Multiple owners
      /// </summary>
      [EnumMember(Value = "Multiple owners")]
      MultipleOwnersEnum = 2,

      /// <summary>
      /// Enum CoupleEnum for Couple
      /// </summary>
      [EnumMember(Value = "Couple")]
      CoupleEnum = 3,

      /// <summary>
      /// Enum CorporateEnum for Corporate
      /// </summary>
      [EnumMember(Value = "Corporate")]
      CorporateEnum = 4,

      /// <summary>
      /// Enum IndividualEnum for Individual
      /// </summary>
      [EnumMember(Value = "Individual")]
      IndividualEnum = 5
    }

    /// <summary>
    /// The type of ownership: individual, couple, multiple owners, corporate or trust.
    /// </summary>
    /// <value>The type of ownership: individual, couple, multiple owners, corporate or trust. </value>
    [DataMember(Name = "OwnershipType", EmitDefaultValue = false)]
    public OwnershipTypeEnum OwnershipType { get; set; }

    /// <summary>
    /// The primary owner as provided by the county assessor. May include more than one person or entity.
    /// </summary>
    /// <value>The primary owner as provided by the county assessor. May include more than one person or entity. </value>
    [DataMember(Name = "Owner", EmitDefaultValue = false)]
    public string Owner { get; set; }

    /// <summary>
    /// The secondary owner as provided by the county assessor.
    /// </summary>
    /// <value>The secondary owner as provided by the county assessor. </value>
    [DataMember(Name = "Owner2", EmitDefaultValue = false)]
    public string Owner2 { get; set; }

    /// <summary>
    /// The owner&#39;s first name.
    /// </summary>
    /// <value>The owner&#39;s first name. </value>
    [DataMember(Name = "OwnerFirstName", EmitDefaultValue = false)]
    public string OwnerFirstName { get; set; }

    /// <summary>
    /// The owner&#39;s last name, or the name of a business, trust or other entity.
    /// </summary>
    /// <value>The owner&#39;s last name, or the name of a business, trust or other entity. </value>
    [DataMember(Name = "OwnerLastName", EmitDefaultValue = false)]
    public string OwnerLastName { get; set; }

    /// <summary>
    /// The first name of the owner&#39;s spouse.
    /// </summary>
    /// <value>The first name of the owner&#39;s spouse. </value>
    [DataMember(Name = "OwnerSpouseFirstName", EmitDefaultValue = false)]
    public string OwnerSpouseFirstName { get; set; }

    /// <summary>
    /// The owner&#39;s mailing address per county tax assessor records.
    /// </summary>
    /// <value>The owner&#39;s mailing address per county tax assessor records. </value>
    [DataMember(Name = "OwnerAddress", EmitDefaultValue = false)]
    public string OwnerAddress { get; set; }

    /// <summary>
    /// The owner&#39;s mailing city per county tax assessor records.
    /// </summary>
    /// <value>The owner&#39;s mailing city per county tax assessor records. </value>
    [DataMember(Name = "OwnerCity", EmitDefaultValue = false)]
    public string OwnerCity { get; set; }

    /// <summary>
    /// The owner&#39;s zip code per county tax assessor records.
    /// </summary>
    /// <value>The owner&#39;s zip code per county tax assessor records. </value>
    [DataMember(Name = "OwnerZipFive", EmitDefaultValue = false)]
    public int OwnerZipFive { get; set; }


    /// <summary>
    /// The owner's state per county tax assessor records.
    /// </summary>
    /// <value>The owner's state per county tax assessor records. </value>
    [TypeConverter(typeof(CustomEnumConverter<OwnerStateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OwnerStateEnum
    {

      /// <summary>
      /// Enum ALEnum for AL
      /// </summary>
      [EnumMember(Value = "AL")]
      ALEnum = 1,

      /// <summary>
      /// Enum AKEnum for AK
      /// </summary>
      [EnumMember(Value = "AK")]
      AKEnum = 2,

      /// <summary>
      /// Enum ASEnum for AS
      /// </summary>
      [EnumMember(Value = "AS")]
      ASEnum = 3,

      /// <summary>
      /// Enum AZEnum for AZ
      /// </summary>
      [EnumMember(Value = "AZ")]
      AZEnum = 4,

      /// <summary>
      /// Enum AREnum for AR
      /// </summary>
      [EnumMember(Value = "AR")]
      AREnum = 5,

      /// <summary>
      /// Enum CAEnum for CA
      /// </summary>
      [EnumMember(Value = "CA")]
      CAEnum = 6,

      /// <summary>
      /// Enum COEnum for CO
      /// </summary>
      [EnumMember(Value = "CO")]
      COEnum = 7,

      /// <summary>
      /// Enum CTEnum for CT
      /// </summary>
      [EnumMember(Value = "CT")]
      CTEnum = 8,

      /// <summary>
      /// Enum DEEnum for DE
      /// </summary>
      [EnumMember(Value = "DE")]
      DEEnum = 9,

      /// <summary>
      /// Enum DCEnum for DC
      /// </summary>
      [EnumMember(Value = "DC")]
      DCEnum = 10,

      /// <summary>
      /// Enum FMEnum for FM
      /// </summary>
      [EnumMember(Value = "FM")]
      FMEnum = 11,

      /// <summary>
      /// Enum FLEnum for FL
      /// </summary>
      [EnumMember(Value = "FL")]
      FLEnum = 12,

      /// <summary>
      /// Enum GAEnum for GA
      /// </summary>
      [EnumMember(Value = "GA")]
      GAEnum = 13,

      /// <summary>
      /// Enum GUEnum for GU
      /// </summary>
      [EnumMember(Value = "GU")]
      GUEnum = 14,

      /// <summary>
      /// Enum HIEnum for HI
      /// </summary>
      [EnumMember(Value = "HI")]
      HIEnum = 15,

      /// <summary>
      /// Enum IDEnum for ID
      /// </summary>
      [EnumMember(Value = "ID")]
      IDEnum = 16,

      /// <summary>
      /// Enum ILEnum for IL
      /// </summary>
      [EnumMember(Value = "IL")]
      ILEnum = 17,

      /// <summary>
      /// Enum INEnum for IN
      /// </summary>
      [EnumMember(Value = "IN")]
      INEnum = 18,

      /// <summary>
      /// Enum IAEnum for IA
      /// </summary>
      [EnumMember(Value = "IA")]
      IAEnum = 19,

      /// <summary>
      /// Enum KSEnum for KS
      /// </summary>
      [EnumMember(Value = "KS")]
      KSEnum = 20,

      /// <summary>
      /// Enum KYEnum for KY
      /// </summary>
      [EnumMember(Value = "KY")]
      KYEnum = 21,

      /// <summary>
      /// Enum LAEnum for LA
      /// </summary>
      [EnumMember(Value = "LA")]
      LAEnum = 22,

      /// <summary>
      /// Enum MEEnum for ME
      /// </summary>
      [EnumMember(Value = "ME")]
      MEEnum = 23,

      /// <summary>
      /// Enum MHEnum for MH
      /// </summary>
      [EnumMember(Value = "MH")]
      MHEnum = 24,

      /// <summary>
      /// Enum MDEnum for MD
      /// </summary>
      [EnumMember(Value = "MD")]
      MDEnum = 25,

      /// <summary>
      /// Enum MAEnum for MA
      /// </summary>
      [EnumMember(Value = "MA")]
      MAEnum = 26,

      /// <summary>
      /// Enum MIEnum for MI
      /// </summary>
      [EnumMember(Value = "MI")]
      MIEnum = 27,

      /// <summary>
      /// Enum MNEnum for MN
      /// </summary>
      [EnumMember(Value = "MN")]
      MNEnum = 28,

      /// <summary>
      /// Enum MSEnum for MS
      /// </summary>
      [EnumMember(Value = "MS")]
      MSEnum = 29,

      /// <summary>
      /// Enum MOEnum for MO
      /// </summary>
      [EnumMember(Value = "MO")]
      MOEnum = 30,

      /// <summary>
      /// Enum MTEnum for MT
      /// </summary>
      [EnumMember(Value = "MT")]
      MTEnum = 31,

      /// <summary>
      /// Enum NEEnum for NE
      /// </summary>
      [EnumMember(Value = "NE")]
      NEEnum = 32,

      /// <summary>
      /// Enum NVEnum for NV
      /// </summary>
      [EnumMember(Value = "NV")]
      NVEnum = 33,

      /// <summary>
      /// Enum NHEnum for NH
      /// </summary>
      [EnumMember(Value = "NH")]
      NHEnum = 34,

      /// <summary>
      /// Enum NJEnum for NJ
      /// </summary>
      [EnumMember(Value = "NJ")]
      NJEnum = 35,

      /// <summary>
      /// Enum NMEnum for NM
      /// </summary>
      [EnumMember(Value = "NM")]
      NMEnum = 36,

      /// <summary>
      /// Enum NYEnum for NY
      /// </summary>
      [EnumMember(Value = "NY")]
      NYEnum = 37,

      /// <summary>
      /// Enum NCEnum for NC
      /// </summary>
      [EnumMember(Value = "NC")]
      NCEnum = 38,

      /// <summary>
      /// Enum NDEnum for ND
      /// </summary>
      [EnumMember(Value = "ND")]
      NDEnum = 39,

      /// <summary>
      /// Enum MPEnum for MP
      /// </summary>
      [EnumMember(Value = "MP")]
      MPEnum = 40,

      /// <summary>
      /// Enum OHEnum for OH
      /// </summary>
      [EnumMember(Value = "OH")]
      OHEnum = 41,

      /// <summary>
      /// Enum OKEnum for OK
      /// </summary>
      [EnumMember(Value = "OK")]
      OKEnum = 42,

      /// <summary>
      /// Enum OREnum for OR
      /// </summary>
      [EnumMember(Value = "OR")]
      OREnum = 43,

      /// <summary>
      /// Enum PWEnum for PW
      /// </summary>
      [EnumMember(Value = "PW")]
      PWEnum = 44,

      /// <summary>
      /// Enum PAEnum for PA
      /// </summary>
      [EnumMember(Value = "PA")]
      PAEnum = 45,

      /// <summary>
      /// Enum PREnum for PR
      /// </summary>
      [EnumMember(Value = "PR")]
      PREnum = 46,

      /// <summary>
      /// Enum RIEnum for RI
      /// </summary>
      [EnumMember(Value = "RI")]
      RIEnum = 47,

      /// <summary>
      /// Enum SCEnum for SC
      /// </summary>
      [EnumMember(Value = "SC")]
      SCEnum = 48,

      /// <summary>
      /// Enum SDEnum for SD
      /// </summary>
      [EnumMember(Value = "SD")]
      SDEnum = 49,

      /// <summary>
      /// Enum TNEnum for TN
      /// </summary>
      [EnumMember(Value = "TN")]
      TNEnum = 50,

      /// <summary>
      /// Enum TXEnum for TX
      /// </summary>
      [EnumMember(Value = "TX")]
      TXEnum = 51,

      /// <summary>
      /// Enum UTEnum for UT
      /// </summary>
      [EnumMember(Value = "UT")]
      UTEnum = 52,

      /// <summary>
      /// Enum VTEnum for VT
      /// </summary>
      [EnumMember(Value = "VT")]
      VTEnum = 53,

      /// <summary>
      /// Enum VIEnum for VI
      /// </summary>
      [EnumMember(Value = "VI")]
      VIEnum = 54,

      /// <summary>
      /// Enum VAEnum for VA
      /// </summary>
      [EnumMember(Value = "VA")]
      VAEnum = 55,

      /// <summary>
      /// Enum WAEnum for WA
      /// </summary>
      [EnumMember(Value = "WA")]
      WAEnum = 56,

      /// <summary>
      /// Enum WVEnum for WV
      /// </summary>
      [EnumMember(Value = "WV")]
      WVEnum = 57,

      /// <summary>
      /// Enum WIEnum for WI
      /// </summary>
      [EnumMember(Value = "WI")]
      WIEnum = 58,

      /// <summary>
      /// Enum WYEnum for WY
      /// </summary>
      [EnumMember(Value = "WY")]
      WYEnum = 59,

      /// <summary>
      /// Enum AEEnum for AE
      /// </summary>
      [EnumMember(Value = "AE")]
      AEEnum = 60,

      /// <summary>
      /// Enum AAEnum for AA
      /// </summary>
      [EnumMember(Value = "AA")]
      AAEnum = 61,

      /// <summary>
      /// Enum APEnum for AP
      /// </summary>
      [EnumMember(Value = "AP")]
      APEnum = 62
    }

    /// <summary>
    /// The owner&#39;s state per county tax assessor records.
    /// </summary>
    /// <value>The owner&#39;s state per county tax assessor records. </value>
    [DataMember(Name = "OwnerState", EmitDefaultValue = false)]
    public OwnerStateEnum OwnerState { get; set; }

    /// <summary>
    /// Gets or Sets OwnerCityStateZip
    /// </summary>
    [DataMember(Name = "OwnerCityStateZip", EmitDefaultValue = false)]
    public string OwnerCityStateZip { get; set; }


    /// <summary>
    /// Whether or not the owner's mailing address has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses.
    /// </summary>
    /// <value>Whether or not the owner's mailing address has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses. </value>

    public enum IsMailVacantEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the owner&#39;s mailing address has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses.
    /// </summary>
    /// <value>Whether or not the owner&#39;s mailing address has been identified as vacant by the United States Postal Service. This data is made available in order to suppress mailing to undeliverable addresses. </value>
    [DataMember(Name = "isMailVacant", EmitDefaultValue = false)]
    public IsMailVacantEnum IsMailVacant { get; set; }


    /// <summary>
    /// The number of the owner's congressional district within the state, between 1st and 53rd, based on their mailing address.
    /// </summary>
    /// <value>The number of the owner's congressional district within the state, between 1st and 53rd, based on their mailing address. </value>
    [TypeConverter(typeof(CustomEnumConverter<MailCongressionalDistrictEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum MailCongressionalDistrictEnum
    {

      /// <summary>
      /// Enum _1stEnum for 1st
      /// </summary>
      [EnumMember(Value = "1st")]
      _1stEnum = 1,

      /// <summary>
      /// Enum _2ndEnum for 2nd
      /// </summary>
      [EnumMember(Value = "2nd")]
      _2ndEnum = 2,

      /// <summary>
      /// Enum _3rdEnum for 3rd
      /// </summary>
      [EnumMember(Value = "3rd")]
      _3rdEnum = 3,

      /// <summary>
      /// Enum _4thEnum for 4th
      /// </summary>
      [EnumMember(Value = "4th")]
      _4thEnum = 4,

      /// <summary>
      /// Enum _5thEnum for 5th
      /// </summary>
      [EnumMember(Value = "5th")]
      _5thEnum = 5,

      /// <summary>
      /// Enum _6thEnum for 6th
      /// </summary>
      [EnumMember(Value = "6th")]
      _6thEnum = 6,

      /// <summary>
      /// Enum _7thEnum for 7th
      /// </summary>
      [EnumMember(Value = "7th")]
      _7thEnum = 7,

      /// <summary>
      /// Enum _8thEnum for 8th
      /// </summary>
      [EnumMember(Value = "8th")]
      _8thEnum = 8,

      /// <summary>
      /// Enum _9thEnum for 9th
      /// </summary>
      [EnumMember(Value = "9th")]
      _9thEnum = 9,

      /// <summary>
      /// Enum _10thEnum for 10th
      /// </summary>
      [EnumMember(Value = "10th")]
      _10thEnum = 10,

      /// <summary>
      /// Enum _11thEnum for 11th
      /// </summary>
      [EnumMember(Value = "11th")]
      _11thEnum = 11,

      /// <summary>
      /// Enum _12thEnum for 12th
      /// </summary>
      [EnumMember(Value = "12th")]
      _12thEnum = 12,

      /// <summary>
      /// Enum _13thEnum for 13th
      /// </summary>
      [EnumMember(Value = "13th")]
      _13thEnum = 13,

      /// <summary>
      /// Enum _14thEnum for 14th
      /// </summary>
      [EnumMember(Value = "14th")]
      _14thEnum = 14,

      /// <summary>
      /// Enum _15thEnum for 15th
      /// </summary>
      [EnumMember(Value = "15th")]
      _15thEnum = 15,

      /// <summary>
      /// Enum _16thEnum for 16th
      /// </summary>
      [EnumMember(Value = "16th")]
      _16thEnum = 16,

      /// <summary>
      /// Enum _17thEnum for 17th
      /// </summary>
      [EnumMember(Value = "17th")]
      _17thEnum = 17,

      /// <summary>
      /// Enum _18thEnum for 18th
      /// </summary>
      [EnumMember(Value = "18th")]
      _18thEnum = 18,

      /// <summary>
      /// Enum _19thEnum for 19th
      /// </summary>
      [EnumMember(Value = "19th")]
      _19thEnum = 19,

      /// <summary>
      /// Enum _20thEnum for 20th
      /// </summary>
      [EnumMember(Value = "20th")]
      _20thEnum = 20,

      /// <summary>
      /// Enum _21stEnum for 21st
      /// </summary>
      [EnumMember(Value = "21st")]
      _21stEnum = 21,

      /// <summary>
      /// Enum _22ndEnum for 22nd
      /// </summary>
      [EnumMember(Value = "22nd")]
      _22ndEnum = 22,

      /// <summary>
      /// Enum _23rdEnum for 23rd
      /// </summary>
      [EnumMember(Value = "23rd")]
      _23rdEnum = 23,

      /// <summary>
      /// Enum _24thEnum for 24th
      /// </summary>
      [EnumMember(Value = "24th")]
      _24thEnum = 24,

      /// <summary>
      /// Enum _25thEnum for 25th
      /// </summary>
      [EnumMember(Value = "25th")]
      _25thEnum = 25,

      /// <summary>
      /// Enum _26thEnum for 26th
      /// </summary>
      [EnumMember(Value = "26th")]
      _26thEnum = 26,

      /// <summary>
      /// Enum _27thEnum for 27th
      /// </summary>
      [EnumMember(Value = "27th")]
      _27thEnum = 27,

      /// <summary>
      /// Enum _28thEnum for 28th
      /// </summary>
      [EnumMember(Value = "28th")]
      _28thEnum = 28,

      /// <summary>
      /// Enum _29thEnum for 29th
      /// </summary>
      [EnumMember(Value = "29th")]
      _29thEnum = 29,

      /// <summary>
      /// Enum _30thEnum for 30th
      /// </summary>
      [EnumMember(Value = "30th")]
      _30thEnum = 30,

      /// <summary>
      /// Enum _31stEnum for 31st
      /// </summary>
      [EnumMember(Value = "31st")]
      _31stEnum = 31,

      /// <summary>
      /// Enum _32ndEnum for 32nd
      /// </summary>
      [EnumMember(Value = "32nd")]
      _32ndEnum = 32,

      /// <summary>
      /// Enum _33rdEnum for 33rd
      /// </summary>
      [EnumMember(Value = "33rd")]
      _33rdEnum = 33,

      /// <summary>
      /// Enum _34thEnum for 34th
      /// </summary>
      [EnumMember(Value = "34th")]
      _34thEnum = 34,

      /// <summary>
      /// Enum _35thEnum for 35th
      /// </summary>
      [EnumMember(Value = "35th")]
      _35thEnum = 35,

      /// <summary>
      /// Enum _36thEnum for 36th
      /// </summary>
      [EnumMember(Value = "36th")]
      _36thEnum = 36,

      /// <summary>
      /// Enum _37thEnum for 37th
      /// </summary>
      [EnumMember(Value = "37th")]
      _37thEnum = 37,

      /// <summary>
      /// Enum _38thEnum for 38th
      /// </summary>
      [EnumMember(Value = "38th")]
      _38thEnum = 38,

      /// <summary>
      /// Enum _39thEnum for 39th
      /// </summary>
      [EnumMember(Value = "39th")]
      _39thEnum = 39,

      /// <summary>
      /// Enum _40thEnum for 40th
      /// </summary>
      [EnumMember(Value = "40th")]
      _40thEnum = 40,

      /// <summary>
      /// Enum _41stEnum for 41st
      /// </summary>
      [EnumMember(Value = "41st")]
      _41stEnum = 41,

      /// <summary>
      /// Enum _42ndEnum for 42nd
      /// </summary>
      [EnumMember(Value = "42nd")]
      _42ndEnum = 42,

      /// <summary>
      /// Enum _43rdEnum for 43rd
      /// </summary>
      [EnumMember(Value = "43rd")]
      _43rdEnum = 43,

      /// <summary>
      /// Enum _44thEnum for 44th
      /// </summary>
      [EnumMember(Value = "44th")]
      _44thEnum = 44,

      /// <summary>
      /// Enum _45thEnum for 45th
      /// </summary>
      [EnumMember(Value = "45th")]
      _45thEnum = 45,

      /// <summary>
      /// Enum _46thEnum for 46th
      /// </summary>
      [EnumMember(Value = "46th")]
      _46thEnum = 46,

      /// <summary>
      /// Enum _47thEnum for 47th
      /// </summary>
      [EnumMember(Value = "47th")]
      _47thEnum = 47,

      /// <summary>
      /// Enum _48thEnum for 48th
      /// </summary>
      [EnumMember(Value = "48th")]
      _48thEnum = 48,

      /// <summary>
      /// Enum _49thEnum for 49th
      /// </summary>
      [EnumMember(Value = "49th")]
      _49thEnum = 49,

      /// <summary>
      /// Enum _50thEnum for 50th
      /// </summary>
      [EnumMember(Value = "50th")]
      _50thEnum = 50,

      /// <summary>
      /// Enum _51stEnum for 51st
      /// </summary>
      [EnumMember(Value = "51st")]
      _51stEnum = 51,

      /// <summary>
      /// Enum _52ndEnum for 52nd
      /// </summary>
      [EnumMember(Value = "52nd")]
      _52ndEnum = 52,

      /// <summary>
      /// Enum _53rdEnum for 53rd
      /// </summary>
      [EnumMember(Value = "53rd")]
      _53rdEnum = 53,

      /// <summary>
      /// Enum AtLargeEnum for At-Large
      /// </summary>
      [EnumMember(Value = "At-Large")]
      AtLargeEnum = 54
    }

    /// <summary>
    /// The number of the owner&#39;s congressional district within the state, between 1st and 53rd, based on their mailing address.
    /// </summary>
    /// <value>The number of the owner&#39;s congressional district within the state, between 1st and 53rd, based on their mailing address. </value>
    [DataMember(Name = "MailCongressionalDistrict", EmitDefaultValue = false)]
    public MailCongressionalDistrictEnum MailCongressionalDistrict { get; set; }


    /// <summary>
    /// Whether or not the mailing address for the property tax bill is the same as the property address. <br>This is commonly used as an indicator of whether or not the property is Owner Occupied, and in many areas is a good way to determine which properties are likely to be rentals. In some areas, however, there is no mail delivery to the property and therefore the owner's mailing address may be different even though they do occupy the property.
    /// </summary>
    /// <value>Whether or not the mailing address for the property tax bill is the same as the property address. <br>This is commonly used as an indicator of whether or not the property is Owner Occupied, and in many areas is a good way to determine which properties are likely to be rentals. In some areas, however, there is no mail delivery to the property and therefore the owner's mailing address may be different even though they do occupy the property. </value>

    public enum IsSameMailingEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the mailing address for the property tax bill is the same as the property address. &lt;br&gt;This is commonly used as an indicator of whether or not the property is Owner Occupied, and in many areas is a good way to determine which properties are likely to be rentals. In some areas, however, there is no mail delivery to the property and therefore the owner&#39;s mailing address may be different even though they do occupy the property.
    /// </summary>
    /// <value>Whether or not the mailing address for the property tax bill is the same as the property address. &lt;br&gt;This is commonly used as an indicator of whether or not the property is Owner Occupied, and in many areas is a good way to determine which properties are likely to be rentals. In some areas, however, there is no mail delivery to the property and therefore the owner&#39;s mailing address may be different even though they do occupy the property. </value>
    [DataMember(Name = "isSameMailing", EmitDefaultValue = false)]
    public IsSameMailingEnum IsSameMailing { get; set; }

    /// <summary>
    /// The estimate of the property&#39;s value based on public records data. Referred to in the industry as an automated valuation model or AVM.
    /// </summary>
    /// <value>The estimate of the property&#39;s value based on public records data. Referred to in the industry as an automated valuation model or AVM. </value>
    [DataMember(Name = "AVM", EmitDefaultValue = false)]
    public string AVM { get; set; }

    /// <summary>
    /// The estimated value per square foot (estimated value divided by sq ft).
    /// </summary>
    /// <value>The estimated value per square foot (estimated value divided by sq ft). </value>
    [DataMember(Name = "ValuePerSF", EmitDefaultValue = false)]
    public string ValuePerSF { get; set; }

    /// <summary>
    /// Total taxable value of the property including land and improvements.
    /// </summary>
    /// <value>Total taxable value of the property including land and improvements. </value>
    [DataMember(Name = "AssessedValue", EmitDefaultValue = false)]
    public string AssessedValue { get; set; }

    /// <summary>
    /// Estimated rental value is based on HUD Fair Market Rental data.
    /// </summary>
    /// <value>Estimated rental value is based on HUD Fair Market Rental data. </value>
    [DataMember(Name = "EstimatedRent", EmitDefaultValue = false)]
    public string EstimatedRent { get; set; }

    /// <summary>
    /// The annual property taxes as a percentage of the total assessed value of the property.
    /// </summary>
    /// <value>The annual property taxes as a percentage of the total assessed value of the property. </value>
    [DataMember(Name = "EstimatedTaxRate", EmitDefaultValue = false)]
    public string EstimatedTaxRate { get; set; }


    /// <summary>
    /// Whether or not the owner of the property claimed the property as their primary residence in order to receive the homeowner's property tax exemption. In a resort area, which often have many second homes, lack of exemption more likely indicates second homes than rentals. Useful only in states or counties where homeowner exemption data is recorded.
    /// </summary>
    /// <value>Whether or not the owner of the property claimed the property as their primary residence in order to receive the homeowner's property tax exemption. In a resort area, which often have many second homes, lack of exemption more likely indicates second homes than rentals. Useful only in states or counties where homeowner exemption data is recorded. </value>

    public enum OwnerExemptionEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the owner of the property claimed the property as their primary residence in order to receive the homeowner&#39;s property tax exemption. In a resort area, which often have many second homes, lack of exemption more likely indicates second homes than rentals. Useful only in states or counties where homeowner exemption data is recorded.
    /// </summary>
    /// <value>Whether or not the owner of the property claimed the property as their primary residence in order to receive the homeowner&#39;s property tax exemption. In a resort area, which often have many second homes, lack of exemption more likely indicates second homes than rentals. Useful only in states or counties where homeowner exemption data is recorded. </value>
    [DataMember(Name = "OwnerExemption", EmitDefaultValue = false)]
    public OwnerExemptionEnum OwnerExemption { get; set; }

    /// <summary>
    /// The assessed value of the land.
    /// </summary>
    /// <value>The assessed value of the land. </value>
    [DataMember(Name = "LandValue", EmitDefaultValue = false)]
    public string LandValue { get; set; }

    /// <summary>
    /// The assessed value of the buildings, structures and other improvements to the land.
    /// </summary>
    /// <value>The assessed value of the buildings, structures and other improvements to the land. </value>
    [DataMember(Name = "ImpValue", EmitDefaultValue = false)]
    public string ImpValue { get; set; }

    /// <summary>
    /// Year the property was last assessed.
    /// </summary>
    /// <value>Year the property was last assessed. </value>
    [DataMember(Name = "AssessedYear", EmitDefaultValue = false)]
    public string AssessedYear { get; set; }

    /// <summary>
    /// Annual property taxes.
    /// </summary>
    /// <value>Annual property taxes. </value>
    [DataMember(Name = "AnnualTaxes", EmitDefaultValue = false)]
    public string AnnualTaxes { get; set; }

    /// <summary>
    /// Estimated equity as a percent of the estimated property value taking into account all loans which are modeled to be open on the property. For example a property with an open $80,000 first mortgage and a property value of $100,000 would have 20% equity. It is not possible to have more than 100% equity since it is impossible to own more than all of something. It is however possible to have less than 0% equity, or negative equity, as it is possible to have loans for more than the property is worth.
    /// </summary>
    /// <value>Estimated equity as a percent of the estimated property value taking into account all loans which are modeled to be open on the property. For example a property with an open $80,000 first mortgage and a property value of $100,000 would have 20% equity. It is not possible to have more than 100% equity since it is impossible to own more than all of something. It is however possible to have less than 0% equity, or negative equity, as it is possible to have loans for more than the property is worth. </value>
    [DataMember(Name = "EquityPercent", EmitDefaultValue = false)]
    public string EquityPercent { get; set; }

    /// <summary>
    /// The combined loan amounts of all loans modeled to be open on the property as a percentage of the estimated property value. For example a property with a first mortgage of $50,000, a second mortgage of $30,000 and an estimated value of $100,000 would have a combined loan to value (CLTV) of 80%.
    /// </summary>
    /// <value>The combined loan amounts of all loans modeled to be open on the property as a percentage of the estimated property value. For example a property with a first mortgage of $50,000, a second mortgage of $30,000 and an estimated value of $100,000 would have a combined loan to value (CLTV) of 80%. </value>
    [DataMember(Name = "CLTV", EmitDefaultValue = false)]
    public string CLTV { get; set; }

    /// <summary>
    /// The estimated combined amount of all open loans (noted as 1st, 2nd or 3rd) based on our computer model.
    /// </summary>
    /// <value>The estimated combined amount of all open loans (noted as 1st, 2nd or 3rd) based on our computer model. </value>
    [DataMember(Name = "TotalLoanBalance", EmitDefaultValue = false)]
    public string TotalLoanBalance { get; set; }

    /// <summary>
    /// Estimated dollar value of the equity in the property calculated as estimated property value minus the sum of all loans which are modeled to be open on the property. For example a property with a first mortgage of $50,000, a second mortgage of $30,000 and an estimated value of $100,000 would have $20,000 in estimated equity.
    /// </summary>
    /// <value>Estimated dollar value of the equity in the property calculated as estimated property value minus the sum of all loans which are modeled to be open on the property. For example a property with a first mortgage of $50,000, a second mortgage of $30,000 and an estimated value of $100,000 would have $20,000 in estimated equity. </value>
    [DataMember(Name = "AvailableEquity", EmitDefaultValue = false)]
    public string AvailableEquity { get; set; }

    /// <summary>
    /// The estimated number of loans that are currently open and outstanding on the property.
    /// </summary>
    /// <value>The estimated number of loans that are currently open and outstanding on the property.  </value>
    [DataMember(Name = "NumberLoans", EmitDefaultValue = false)]
    public int NumberLoans { get; set; }


    /// <summary>
    /// The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage.
    /// </summary>
    /// <value>The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage. </value>
    [TypeConverter(typeof(CustomEnumConverter<FirstPurposeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FirstPurposeEnum
    {

      /// <summary>
      /// Enum CashOutEnum for Cash Out
      /// </summary>
      [EnumMember(Value = "Cash Out")]
      CashOutEnum = 1,

      /// <summary>
      /// Enum ConstructionEnum for Construction
      /// </summary>
      [EnumMember(Value = "Construction")]
      ConstructionEnum = 2,

      /// <summary>
      /// Enum ELOCEnum for ELOC
      /// </summary>
      [EnumMember(Value = "ELOC")]
      ELOCEnum = 3,

      /// <summary>
      /// Enum PurchaseMoneyEnum for Purchase Money
      /// </summary>
      [EnumMember(Value = "Purchase Money")]
      PurchaseMoneyEnum = 4,

      /// <summary>
      /// Enum RTRefiEnum for R & T Refi
      /// </summary>
      [EnumMember(Value = "R & T Refi")]
      RTRefiEnum = 5,

      /// <summary>
      /// Enum ReverseEnum for Reverse
      /// </summary>
      [EnumMember(Value = "Reverse")]
      ReverseEnum = 6,

      /// <summary>
      /// Enum WrapEnum for Wrap
      /// </summary>
      [EnumMember(Value = "Wrap")]
      WrapEnum = 7,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 8
    }

    /// <summary>
    /// The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage.
    /// </summary>
    /// <value>The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage. </value>
    [DataMember(Name = "FirstPurpose", EmitDefaultValue = false)]
    public FirstPurposeEnum FirstPurpose { get; set; }


    /// <summary>
    /// The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional.
    /// </summary>
    /// <value>The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional. </value>
    [TypeConverter(typeof(CustomEnumConverter<FirstLoanTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FirstLoanTypeEnum
    {

      /// <summary>
      /// Enum SBAEnum for SBA
      /// </summary>
      [EnumMember(Value = "SBA")]
      SBAEnum = 1,

      /// <summary>
      /// Enum ConformingEnum for Conforming
      /// </summary>
      [EnumMember(Value = "Conforming")]
      ConformingEnum = 2,

      /// <summary>
      /// Enum FHAEnum for FHA
      /// </summary>
      [EnumMember(Value = "FHA")]
      FHAEnum = 3,

      /// <summary>
      /// Enum NonConformingJumboEnum for Non-Conforming (Jumbo)
      /// </summary>
      [EnumMember(Value = "Non-Conforming (Jumbo)")]
      NonConformingJumboEnum = 4,

      /// <summary>
      /// Enum ConventionalEnum for Conventional
      /// </summary>
      [EnumMember(Value = "Conventional")]
      ConventionalEnum = 5,

      /// <summary>
      /// Enum PrivateEnum for Private
      /// </summary>
      [EnumMember(Value = "Private")]
      PrivateEnum = 6,

      /// <summary>
      /// Enum SellerEnum for Seller
      /// </summary>
      [EnumMember(Value = "Seller")]
      SellerEnum = 7,

      /// <summary>
      /// Enum VAEnum for VA
      /// </summary>
      [EnumMember(Value = "VA")]
      VAEnum = 8,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 9
    }

    /// <summary>
    /// The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional.
    /// </summary>
    /// <value>The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional. </value>
    [DataMember(Name = "FirstLoanType", EmitDefaultValue = false)]
    public FirstLoanTypeEnum FirstLoanType { get; set; }


    /// <summary>
    /// The date the mortgage was recorded at the county.
    /// </summary>
    /// <value>The date the mortgage was recorded at the county. </value>
    [TypeConverter(typeof(CustomEnumConverter<FirstDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FirstDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date the mortgage was recorded at the county.
    /// </summary>
    /// <value>The date the mortgage was recorded at the county. </value>
    [DataMember(Name = "FirstDate", EmitDefaultValue = false)]
    public FirstDateEnum FirstDate { get; set; }


    /// <summary>
    /// Whether or not this loan was made concurrently (at the same time) as another.
    /// </summary>
    /// <value>Whether or not this loan was made concurrently (at the same time) as another. </value>

    public enum FirstConcurrentEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not this loan was made concurrently (at the same time) as another.
    /// </summary>
    /// <value>Whether or not this loan was made concurrently (at the same time) as another. </value>
    [DataMember(Name = "FirstConcurrent", EmitDefaultValue = false)]
    public FirstConcurrentEnum FirstConcurrent { get; set; }

    /// <summary>
    /// The loan amount of the mortgage.
    /// </summary>
    /// <value>The loan amount of the mortgage. </value>
    [DataMember(Name = "FirstAmount", EmitDefaultValue = false)]
    public string FirstAmount { get; set; }

    /// <summary>
    /// The estimated cash available to the borrower after refinancing or taking additional financing.
    /// </summary>
    /// <value>The estimated cash available to the borrower after refinancing or taking additional financing. </value>
    [DataMember(Name = "FirstCashOut", EmitDefaultValue = false)]
    public string FirstCashOut { get; set; }

    /// <summary>
    /// The loan amount as a percentage of the estimated value at the time the loan was made.
    /// </summary>
    /// <value>The loan amount as a percentage of the estimated value at the time the loan was made. </value>
    [DataMember(Name = "FirstAmountLTV", EmitDefaultValue = false)]
    public string FirstAmountLTV { get; set; }


    /// <summary>
    /// The amortization period of the mortgage.
    /// </summary>
    /// <value>The amortization period of the mortgage. </value>
    [TypeConverter(typeof(CustomEnumConverter<FirstTermInYearsEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FirstTermInYearsEnum
    {

      /// <summary>
      /// Enum _1YearEnum for 1 year
      /// </summary>
      [EnumMember(Value = "1 year")]
      _1YearEnum = 1,

      /// <summary>
      /// Enum _2YearsEnum for 2 years
      /// </summary>
      [EnumMember(Value = "2 years")]
      _2YearsEnum = 2,

      /// <summary>
      /// Enum _3YearsEnum for 3 years
      /// </summary>
      [EnumMember(Value = "3 years")]
      _3YearsEnum = 3,

      /// <summary>
      /// Enum _5YearsEnum for 5 years
      /// </summary>
      [EnumMember(Value = "5 years")]
      _5YearsEnum = 4,

      /// <summary>
      /// Enum _7YearsEnum for 7 years
      /// </summary>
      [EnumMember(Value = "7 years")]
      _7YearsEnum = 5,

      /// <summary>
      /// Enum _10YearsEnum for 10 years
      /// </summary>
      [EnumMember(Value = "10 years")]
      _10YearsEnum = 6,

      /// <summary>
      /// Enum _15YearsEnum for 15 years
      /// </summary>
      [EnumMember(Value = "15 years")]
      _15YearsEnum = 7,

      /// <summary>
      /// Enum _20YearsEnum for 20 years
      /// </summary>
      [EnumMember(Value = "20 years")]
      _20YearsEnum = 8,

      /// <summary>
      /// Enum _25YearsEnum for 25 years
      /// </summary>
      [EnumMember(Value = "25 years")]
      _25YearsEnum = 9,

      /// <summary>
      /// Enum _30YearsEnum for 30 years
      /// </summary>
      [EnumMember(Value = "30 years")]
      _30YearsEnum = 10,

      /// <summary>
      /// Enum _35YearsEnum for 35 years
      /// </summary>
      [EnumMember(Value = "35 years")]
      _35YearsEnum = 11,

      /// <summary>
      /// Enum _40YearsEnum for 40 years
      /// </summary>
      [EnumMember(Value = "40 years")]
      _40YearsEnum = 12,

      /// <summary>
      /// Enum OtherEnum for Other
      /// </summary>
      [EnumMember(Value = "Other")]
      OtherEnum = 13,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 14
    }

    /// <summary>
    /// The amortization period of the mortgage.
    /// </summary>
    /// <value>The amortization period of the mortgage. </value>
    [DataMember(Name = "FirstTermInYears", EmitDefaultValue = false)]
    public FirstTermInYearsEnum FirstTermInYears { get; set; }

    /// <summary>
    /// The lender name for the mortgage as originally recorded.
    /// </summary>
    /// <value>The lender name for the mortgage as originally recorded. </value>
    [DataMember(Name = "FirstLenderOriginal", EmitDefaultValue = false)]
    public string FirstLenderOriginal { get; set; }


    /// <summary>
    /// The type of interest rate - fixed, adjustable, or variable.
    /// </summary>
    /// <value>The type of interest rate - fixed, adjustable, or variable. </value>
    [TypeConverter(typeof(CustomEnumConverter<FirstRateTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FirstRateTypeEnum
    {

      /// <summary>
      /// Enum FixedEnum for Fixed
      /// </summary>
      [EnumMember(Value = "Fixed")]
      FixedEnum = 1,

      /// <summary>
      /// Enum AdjustableEnum for Adjustable
      /// </summary>
      [EnumMember(Value = "Adjustable")]
      AdjustableEnum = 2,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 3
    }

    /// <summary>
    /// The type of interest rate - fixed, adjustable, or variable.
    /// </summary>
    /// <value>The type of interest rate - fixed, adjustable, or variable. </value>
    [DataMember(Name = "FirstRateType", EmitDefaultValue = false)]
    public FirstRateTypeEnum FirstRateType { get; set; }

    /// <summary>
    /// The interest rate of the mortgage. Note that this will be estimated for fixed rate mortgages as the actual rate is not public record.
    /// </summary>
    /// <value>The interest rate of the mortgage. Note that this will be estimated for fixed rate mortgages as the actual rate is not public record.  </value>
    [DataMember(Name = "FirstRate", EmitDefaultValue = false)]
    public decimal FirstRate { get; set; }


    /// <summary>
    /// The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage.
    /// </summary>
    /// <value>The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage. </value>
    [TypeConverter(typeof(CustomEnumConverter<SecondPurposeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SecondPurposeEnum
    {

      /// <summary>
      /// Enum CashOutEnum for Cash Out
      /// </summary>
      [EnumMember(Value = "Cash Out")]
      CashOutEnum = 1,

      /// <summary>
      /// Enum ConstructionEnum for Construction
      /// </summary>
      [EnumMember(Value = "Construction")]
      ConstructionEnum = 2,

      /// <summary>
      /// Enum ELOCEnum for ELOC
      /// </summary>
      [EnumMember(Value = "ELOC")]
      ELOCEnum = 3,

      /// <summary>
      /// Enum PurchaseMoneyEnum for Purchase Money
      /// </summary>
      [EnumMember(Value = "Purchase Money")]
      PurchaseMoneyEnum = 4,

      /// <summary>
      /// Enum RTRefiEnum for R & T Refi
      /// </summary>
      [EnumMember(Value = "R & T Refi")]
      RTRefiEnum = 5,

      /// <summary>
      /// Enum ReverseEnum for Reverse
      /// </summary>
      [EnumMember(Value = "Reverse")]
      ReverseEnum = 6,

      /// <summary>
      /// Enum WrapEnum for Wrap
      /// </summary>
      [EnumMember(Value = "Wrap")]
      WrapEnum = 7,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 8
    }

    /// <summary>
    /// The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage.
    /// </summary>
    /// <value>The purpose of the mortgage - purchase, rate and term refinance, cash out refinance, construction, home equity line (HELOC), or reverse mortgage. </value>
    [DataMember(Name = "SecondPurpose", EmitDefaultValue = false)]
    public SecondPurposeEnum SecondPurpose { get; set; }


    /// <summary>
    /// The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional.
    /// </summary>
    /// <value>The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional. </value>
    [TypeConverter(typeof(CustomEnumConverter<SecondLoanTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SecondLoanTypeEnum
    {

      /// <summary>
      /// Enum SBAEnum for SBA
      /// </summary>
      [EnumMember(Value = "SBA")]
      SBAEnum = 1,

      /// <summary>
      /// Enum ConformingEnum for Conforming
      /// </summary>
      [EnumMember(Value = "Conforming")]
      ConformingEnum = 2,

      /// <summary>
      /// Enum FHAEnum for FHA
      /// </summary>
      [EnumMember(Value = "FHA")]
      FHAEnum = 3,

      /// <summary>
      /// Enum NonConformingJumboEnum for Non-Conforming (Jumbo)
      /// </summary>
      [EnumMember(Value = "Non-Conforming (Jumbo)")]
      NonConformingJumboEnum = 4,

      /// <summary>
      /// Enum ConventionalEnum for Conventional
      /// </summary>
      [EnumMember(Value = "Conventional")]
      ConventionalEnum = 5,

      /// <summary>
      /// Enum PrivateEnum for Private
      /// </summary>
      [EnumMember(Value = "Private")]
      PrivateEnum = 6,

      /// <summary>
      /// Enum SellerEnum for Seller
      /// </summary>
      [EnumMember(Value = "Seller")]
      SellerEnum = 7,

      /// <summary>
      /// Enum VAEnum for VA
      /// </summary>
      [EnumMember(Value = "VA")]
      VAEnum = 8,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 9
    }

    /// <summary>
    /// The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional.
    /// </summary>
    /// <value>The type of loan - Conforming, Non-Conforming (Jumbo), Private, Seller (carryback), FHA, VA, SBA, Conventional. </value>
    [DataMember(Name = "SecondLoanType", EmitDefaultValue = false)]
    public SecondLoanTypeEnum SecondLoanType { get; set; }


    /// <summary>
    /// The date the mortgage was recorded at the county.
    /// </summary>
    /// <value>The date the mortgage was recorded at the county. </value>
    [TypeConverter(typeof(CustomEnumConverter<SecondDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SecondDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date the mortgage was recorded at the county.
    /// </summary>
    /// <value>The date the mortgage was recorded at the county. </value>
    [DataMember(Name = "SecondDate", EmitDefaultValue = false)]
    public SecondDateEnum SecondDate { get; set; }


    /// <summary>
    /// Whether or not this loan was made concurrently (at the same time) as another.
    /// </summary>
    /// <value>Whether or not this loan was made concurrently (at the same time) as another. </value>

    public enum SecondConcurrentEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not this loan was made concurrently (at the same time) as another.
    /// </summary>
    /// <value>Whether or not this loan was made concurrently (at the same time) as another. </value>
    [DataMember(Name = "SecondConcurrent", EmitDefaultValue = false)]
    public SecondConcurrentEnum SecondConcurrent { get; set; }

    /// <summary>
    /// The loan amount of the mortgage.
    /// </summary>
    /// <value>The loan amount of the mortgage. </value>
    [DataMember(Name = "SecondAmount", EmitDefaultValue = false)]
    public string SecondAmount { get; set; }

    /// <summary>
    /// The estimated cash available to the borrower after refinancing or taking additional financing.
    /// </summary>
    /// <value>The estimated cash available to the borrower after refinancing or taking additional financing. </value>
    [DataMember(Name = "SecondCashOut", EmitDefaultValue = false)]
    public string SecondCashOut { get; set; }

    /// <summary>
    /// The loan amount as a percentage of the estimated value at the time the loan was made.
    /// </summary>
    /// <value>The loan amount as a percentage of the estimated value at the time the loan was made. </value>
    [DataMember(Name = "SecondAmountLTV", EmitDefaultValue = false)]
    public string SecondAmountLTV { get; set; }


    /// <summary>
    /// The amortization period of the mortgage.
    /// </summary>
    /// <value>The amortization period of the mortgage. </value>
    [TypeConverter(typeof(CustomEnumConverter<SecondTermInYearsEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SecondTermInYearsEnum
    {

      /// <summary>
      /// Enum _1YearEnum for 1 year
      /// </summary>
      [EnumMember(Value = "1 year")]
      _1YearEnum = 1,

      /// <summary>
      /// Enum _2YearsEnum for 2 years
      /// </summary>
      [EnumMember(Value = "2 years")]
      _2YearsEnum = 2,

      /// <summary>
      /// Enum _3YearsEnum for 3 years
      /// </summary>
      [EnumMember(Value = "3 years")]
      _3YearsEnum = 3,

      /// <summary>
      /// Enum _5YearsEnum for 5 years
      /// </summary>
      [EnumMember(Value = "5 years")]
      _5YearsEnum = 4,

      /// <summary>
      /// Enum _7YearsEnum for 7 years
      /// </summary>
      [EnumMember(Value = "7 years")]
      _7YearsEnum = 5,

      /// <summary>
      /// Enum _10YearsEnum for 10 years
      /// </summary>
      [EnumMember(Value = "10 years")]
      _10YearsEnum = 6,

      /// <summary>
      /// Enum _15YearsEnum for 15 years
      /// </summary>
      [EnumMember(Value = "15 years")]
      _15YearsEnum = 7,

      /// <summary>
      /// Enum _20YearsEnum for 20 years
      /// </summary>
      [EnumMember(Value = "20 years")]
      _20YearsEnum = 8,

      /// <summary>
      /// Enum _25YearsEnum for 25 years
      /// </summary>
      [EnumMember(Value = "25 years")]
      _25YearsEnum = 9,

      /// <summary>
      /// Enum _30YearsEnum for 30 years
      /// </summary>
      [EnumMember(Value = "30 years")]
      _30YearsEnum = 10,

      /// <summary>
      /// Enum _35YearsEnum for 35 years
      /// </summary>
      [EnumMember(Value = "35 years")]
      _35YearsEnum = 11,

      /// <summary>
      /// Enum _40YearsEnum for 40 years
      /// </summary>
      [EnumMember(Value = "40 years")]
      _40YearsEnum = 12,

      /// <summary>
      /// Enum OtherEnum for Other
      /// </summary>
      [EnumMember(Value = "Other")]
      OtherEnum = 13,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 14
    }

    /// <summary>
    /// The amortization period of the mortgage.
    /// </summary>
    /// <value>The amortization period of the mortgage. </value>
    [DataMember(Name = "SecondTermInYears", EmitDefaultValue = false)]
    public SecondTermInYearsEnum SecondTermInYears { get; set; }

    /// <summary>
    /// The lender name for the mortgage as originally recorded.
    /// </summary>
    /// <value>The lender name for the mortgage as originally recorded. </value>
    [DataMember(Name = "SecondLenderOriginal", EmitDefaultValue = false)]
    public string SecondLenderOriginal { get; set; }


    /// <summary>
    /// The type of interest rate - fixed, adjustable, or variable.
    /// </summary>
    /// <value>The type of interest rate - fixed, adjustable, or variable. </value>
    [TypeConverter(typeof(CustomEnumConverter<SecondRateTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SecondRateTypeEnum
    {

      /// <summary>
      /// Enum FixedEnum for Fixed
      /// </summary>
      [EnumMember(Value = "Fixed")]
      FixedEnum = 1,

      /// <summary>
      /// Enum AdjustableEnum for Adjustable
      /// </summary>
      [EnumMember(Value = "Adjustable")]
      AdjustableEnum = 2,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 3
    }

    /// <summary>
    /// The type of interest rate - fixed, adjustable, or variable.
    /// </summary>
    /// <value>The type of interest rate - fixed, adjustable, or variable. </value>
    [DataMember(Name = "SecondRateType", EmitDefaultValue = false)]
    public SecondRateTypeEnum SecondRateType { get; set; }

    /// <summary>
    /// The interest rate of the mortgage. Note that this will be estimated for fixed rate mortgages as the actual rate is not public record.
    /// </summary>
    /// <value>The interest rate of the mortgage. Note that this will be estimated for fixed rate mortgages as the actual rate is not public record.  </value>
    [DataMember(Name = "SecondRate", EmitDefaultValue = false)]
    public decimal SecondRate { get; set; }

    /// <summary>
    /// Gets or Sets ForeclosureSelector
    /// </summary>
    [DataMember(Name = "ForeclosureSelector", EmitDefaultValue = false)]
    public string ForeclosureSelector { get; set; }

    /// <summary>
    /// Gets or Sets NoticeKey
    /// </summary>
    [DataMember(Name = "NoticeKey", EmitDefaultValue = false)]
    public int NoticeKey { get; set; }


    /// <summary>
    /// Whether or not the property is considered to be currently in foreclosure.<br>In Foreclosure includes properties that are currently in one of the following stages of foreclosure: Preforeclosure (have recently had a notice of default filed and have not yet been sold or had a notice of trustee sale filed); Auction (A notice of trustee sale has been filed, and the sale has not yet been held or cancelled); or the property is Bank Owned (foreclosure sale was held, but did not receive any bids and the property is now bank owned and has not yet been resold).
    /// </summary>
    /// <value>Whether or not the property is considered to be currently in foreclosure.<br>In Foreclosure includes properties that are currently in one of the following stages of foreclosure: Preforeclosure (have recently had a notice of default filed and have not yet been sold or had a notice of trustee sale filed); Auction (A notice of trustee sale has been filed, and the sale has not yet been held or cancelled); or the property is Bank Owned (foreclosure sale was held, but did not receive any bids and the property is now bank owned and has not yet been resold). </value>

    public enum InForeclosureEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property is considered to be currently in foreclosure.&lt;br&gt;In Foreclosure includes properties that are currently in one of the following stages of foreclosure: Preforeclosure (have recently had a notice of default filed and have not yet been sold or had a notice of trustee sale filed); Auction (A notice of trustee sale has been filed, and the sale has not yet been held or cancelled); or the property is Bank Owned (foreclosure sale was held, but did not receive any bids and the property is now bank owned and has not yet been resold).
    /// </summary>
    /// <value>Whether or not the property is considered to be currently in foreclosure.&lt;br&gt;In Foreclosure includes properties that are currently in one of the following stages of foreclosure: Preforeclosure (have recently had a notice of default filed and have not yet been sold or had a notice of trustee sale filed); Auction (A notice of trustee sale has been filed, and the sale has not yet been held or cancelled); or the property is Bank Owned (foreclosure sale was held, but did not receive any bids and the property is now bank owned and has not yet been resold). </value>
    [DataMember(Name = "inForeclosure", EmitDefaultValue = false)]
    public InForeclosureEnum InForeclosure { get; set; }


    /// <summary>
    /// Whether or not this property had delinquent property taxes as of the last tax status update.
    /// </summary>
    /// <value>Whether or not this property had delinquent property taxes as of the last tax status update. </value>

    public enum InTaxDelinquencyEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not this property had delinquent property taxes as of the last tax status update.
    /// </summary>
    /// <value>Whether or not this property had delinquent property taxes as of the last tax status update. </value>
    [DataMember(Name = "inTaxDelinquency", EmitDefaultValue = false)]
    public InTaxDelinquencyEnum InTaxDelinquency { get; set; }

    /// <summary>
    /// The estimated amount of property taxes delinquent as of the last tax status update.
    /// </summary>
    /// <value>The estimated amount of property taxes delinquent as of the last tax status update. </value>
    [DataMember(Name = "DelinquentAmount", EmitDefaultValue = false)]
    public string DelinquentAmount { get; set; }

    /// <summary>
    /// The tax year for which the property taxes first became delinquent.
    /// </summary>
    /// <value>The tax year for which the property taxes first became delinquent. </value>
    [DataMember(Name = "DelinquentYear", EmitDefaultValue = false)]
    public string DelinquentYear { get; set; }

    /// <summary>
    /// The estimated number of missed property tax payments as of the last tax status update.
    /// </summary>
    /// <value>The estimated number of missed property tax payments as of the last tax status update. </value>
    [DataMember(Name = "NumberDelinquentInstallments", EmitDefaultValue = false)]
    public int NumberDelinquentInstallments { get; set; }

    /// <summary>
    /// The tax year for which the tax payment amounts and delinquent status were last updated.
    /// </summary>
    /// <value>The tax year for which the tax payment amounts and delinquent status were last updated. </value>
    [DataMember(Name = "TaxYear", EmitDefaultValue = false)]
    public string TaxYear { get; set; }

    /// <summary>
    /// Gets or Sets TaxYearBegin
    /// </summary>
    [DataMember(Name = "TaxYearBegin", EmitDefaultValue = false)]
    public string TaxYearBegin { get; set; }

    /// <summary>
    /// Gets or Sets TaxYearEnd
    /// </summary>
    [DataMember(Name = "TaxYearEnd", EmitDefaultValue = false)]
    public string TaxYearEnd { get; set; }

    /// <summary>
    /// The first property tax installment amount and payment status as of the last tax status update.
    /// </summary>
    /// <value>The first property tax installment amount and payment status as of the last tax status update. </value>
    [DataMember(Name = "FirstPaymentInstallment", EmitDefaultValue = false)]
    public string FirstPaymentInstallment { get; set; }

    /// <summary>
    /// Gets or Sets FirstInstallmentAmount
    /// </summary>
    [DataMember(Name = "FirstInstallmentAmount", EmitDefaultValue = false)]
    public string FirstInstallmentAmount { get; set; }


    /// <summary>
    /// Gets or Sets FirstInstallmentPaid
    /// </summary>
    [TypeConverter(typeof(CustomEnumConverter<FirstInstallmentPaidEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FirstInstallmentPaidEnum
    {

      /// <summary>
      /// Enum PaidEnum for Paid
      /// </summary>
      [EnumMember(Value = "Paid")]
      PaidEnum = 1,

      /// <summary>
      /// Enum UnpaidEnum for Unpaid
      /// </summary>
      [EnumMember(Value = "Unpaid")]
      UnpaidEnum = 2
    }

    /// <summary>
    /// Gets or Sets FirstInstallmentPaid
    /// </summary>
    [DataMember(Name = "FirstInstallmentPaid", EmitDefaultValue = false)]
    public FirstInstallmentPaidEnum FirstInstallmentPaid { get; set; }

    /// <summary>
    /// The second property tax installment amount and payment status as of the last tax status update.
    /// </summary>
    /// <value>The second property tax installment amount and payment status as of the last tax status update. </value>
    [DataMember(Name = "SecondPaymentInstallment", EmitDefaultValue = false)]
    public string SecondPaymentInstallment { get; set; }

    /// <summary>
    /// Gets or Sets SecondInstallmentAmount
    /// </summary>
    [DataMember(Name = "SecondInstallmentAmount", EmitDefaultValue = false)]
    public string SecondInstallmentAmount { get; set; }


    /// <summary>
    /// Gets or Sets SecondInstallmentPaid
    /// </summary>
    [TypeConverter(typeof(CustomEnumConverter<SecondInstallmentPaidEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SecondInstallmentPaidEnum
    {

      /// <summary>
      /// Enum PaidEnum for Paid
      /// </summary>
      [EnumMember(Value = "Paid")]
      PaidEnum = 1,

      /// <summary>
      /// Enum UnpaidEnum for Unpaid
      /// </summary>
      [EnumMember(Value = "Unpaid")]
      UnpaidEnum = 2
    }

    /// <summary>
    /// Gets or Sets SecondInstallmentPaid
    /// </summary>
    [DataMember(Name = "SecondInstallmentPaid", EmitDefaultValue = false)]
    public SecondInstallmentPaidEnum SecondInstallmentPaid { get; set; }

    /// <summary>
    /// The third property tax installment amount and payment status as of the last tax status update.
    /// </summary>
    /// <value>The third property tax installment amount and payment status as of the last tax status update. </value>
    [DataMember(Name = "ThirdPaymentInstallment", EmitDefaultValue = false)]
    public string ThirdPaymentInstallment { get; set; }

    /// <summary>
    /// Gets or Sets ThirdInstallmentAmount
    /// </summary>
    [DataMember(Name = "ThirdInstallmentAmount", EmitDefaultValue = false)]
    public string ThirdInstallmentAmount { get; set; }


    /// <summary>
    /// Gets or Sets ThirdInstallmentPaid
    /// </summary>
    [TypeConverter(typeof(CustomEnumConverter<ThirdInstallmentPaidEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ThirdInstallmentPaidEnum
    {

      /// <summary>
      /// Enum PaidEnum for Paid
      /// </summary>
      [EnumMember(Value = "Paid")]
      PaidEnum = 1,

      /// <summary>
      /// Enum UnpaidEnum for Unpaid
      /// </summary>
      [EnumMember(Value = "Unpaid")]
      UnpaidEnum = 2
    }

    /// <summary>
    /// Gets or Sets ThirdInstallmentPaid
    /// </summary>
    [DataMember(Name = "ThirdInstallmentPaid", EmitDefaultValue = false)]
    public ThirdInstallmentPaidEnum ThirdInstallmentPaid { get; set; }

    /// <summary>
    /// The fourth property tax installment amount and payment status as of the last tax status update.
    /// </summary>
    /// <value>The fourth property tax installment amount and payment status as of the last tax status update. </value>
    [DataMember(Name = "FourthPaymentInstallment", EmitDefaultValue = false)]
    public string FourthPaymentInstallment { get; set; }

    /// <summary>
    /// Gets or Sets FourthInstallmentAmount
    /// </summary>
    [DataMember(Name = "FourthInstallmentAmount", EmitDefaultValue = false)]
    public string FourthInstallmentAmount { get; set; }


    /// <summary>
    /// Gets or Sets FourthInstallmentPaid
    /// </summary>
    [TypeConverter(typeof(CustomEnumConverter<FourthInstallmentPaidEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FourthInstallmentPaidEnum
    {

      /// <summary>
      /// Enum PaidEnum for Paid
      /// </summary>
      [EnumMember(Value = "Paid")]
      PaidEnum = 1,

      /// <summary>
      /// Enum UnpaidEnum for Unpaid
      /// </summary>
      [EnumMember(Value = "Unpaid")]
      UnpaidEnum = 2
    }

    /// <summary>
    /// Gets or Sets FourthInstallmentPaid
    /// </summary>
    [DataMember(Name = "FourthInstallmentPaid", EmitDefaultValue = false)]
    public FourthInstallmentPaidEnum FourthInstallmentPaid { get; set; }


    /// <summary>
    /// The date the most recent change of ownership was recorded at the county recorder's office.
    /// </summary>
    /// <value>The date the most recent change of ownership was recorded at the county recorder's office. </value>
    [TypeConverter(typeof(CustomEnumConverter<LastTransferRecDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum LastTransferRecDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date the most recent change of ownership was recorded at the county recorder&#39;s office.
    /// </summary>
    /// <value>The date the most recent change of ownership was recorded at the county recorder&#39;s office. </value>
    [DataMember(Name = "LastTransferRecDate", EmitDefaultValue = false)]
    public LastTransferRecDateEnum LastTransferRecDate { get; set; }


    /// <summary>
    /// The transfer type of the most recent ownership change.
    /// </summary>
    /// <value>The transfer type of the most recent ownership change. </value>
    [TypeConverter(typeof(CustomEnumConverter<LastTransferTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum LastTransferTypeEnum
    {

      /// <summary>
      /// Enum MarketEnum for Market
      /// </summary>
      [EnumMember(Value = "Market")]
      MarketEnum = 1,

      /// <summary>
      /// Enum MarketFlipEnum for Market Flip
      /// </summary>
      [EnumMember(Value = "Market Flip")]
      MarketFlipEnum = 2,

      /// <summary>
      /// Enum ShortSaleEnum for Short Sale
      /// </summary>
      [EnumMember(Value = "Short Sale")]
      ShortSaleEnum = 3,

      /// <summary>
      /// Enum ShortSaleFlipEnum for Short Sale Flip
      /// </summary>
      [EnumMember(Value = "Short Sale Flip")]
      ShortSaleFlipEnum = 4,

      /// <summary>
      /// Enum ShortSaleFCLEnum for Short Sale-FCL
      /// </summary>
      [EnumMember(Value = "Short Sale-FCL")]
      ShortSaleFCLEnum = 5,

      /// <summary>
      /// Enum REOResaleEnum for REO Resale
      /// </summary>
      [EnumMember(Value = "REO Resale")]
      REOResaleEnum = 6,

      /// <summary>
      /// Enum REOFlipEnum for REO Flip
      /// </summary>
      [EnumMember(Value = "REO Flip")]
      REOFlipEnum = 7,

      /// <summary>
      /// Enum _3rdResaleEnum for 3rd Resale
      /// </summary>
      [EnumMember(Value = "3rd Resale")]
      _3rdResaleEnum = 8
    }

    /// <summary>
    /// The transfer type of the most recent ownership change.
    /// </summary>
    /// <value>The transfer type of the most recent ownership change. </value>
    [DataMember(Name = "LastTransferType", EmitDefaultValue = false)]
    public LastTransferTypeEnum LastTransferType { get; set; }

    /// <summary>
    /// The amount of the most recent change of ownership recorded at the county recorder&#39;s office. Not all change of ownerships will have an amount.
    /// </summary>
    /// <value>The amount of the most recent change of ownership recorded at the county recorder&#39;s office. Not all change of ownerships will have an amount. </value>
    [DataMember(Name = "LastTransferValue", EmitDefaultValue = false)]
    public string LastTransferValue { get; set; }

    /// <summary>
    /// Gets or Sets LastTransferDownPayment
    /// </summary>
    [DataMember(Name = "LastTransferDownPayment", EmitDefaultValue = false)]
    public string LastTransferDownPayment { get; set; }

    /// <summary>
    /// Down payment at most recent change of ownership. Down payment is the percentage of money the buyer put into the purchase in addition to any financing they may have received. Calculated as purchase price - total of all loans taken against property on day of purchase. Not all change of ownerships will have a down payment.
    /// </summary>
    /// <value>Down payment at most recent change of ownership. Down payment is the percentage of money the buyer put into the purchase in addition to any financing they may have received. Calculated as purchase price - total of all loans taken against property on day of purchase. Not all change of ownerships will have a down payment. </value>
    [DataMember(Name = "LastTransferDownPaymentPercent", EmitDefaultValue = false)]
    public string LastTransferDownPaymentPercent { get; set; }

    /// <summary>
    /// The person transferring title to or an interest in real property for the most recent change of ownership
    /// </summary>
    /// <value>The person transferring title to or an interest in real property for the most recent change of ownership </value>
    [DataMember(Name = "LastTransferSeller", EmitDefaultValue = false)]
    public string LastTransferSeller { get; set; }

    /// <summary>
    /// The dollar increase or decrease in purchase amount from the previous change in ownership. Calculated as most recent change in ownership purchase amount minus the previous purchase amount.
    /// </summary>
    /// <value>The dollar increase or decrease in purchase amount from the previous change in ownership. Calculated as most recent change in ownership purchase amount minus the previous purchase amount. </value>
    [DataMember(Name = "PriorTransferChangeInPrice", EmitDefaultValue = false)]
    public string PriorTransferChangeInPrice { get; set; }

    /// <summary>
    /// The percentage change in purchase amount from the previous change in ownership. Calculated as (most recent purchase amount - previous purchase amount) / previous purchase amount.
    /// </summary>
    /// <value>The percentage change in purchase amount from the previous change in ownership. Calculated as (most recent purchase amount - previous purchase amount) / previous purchase amount. </value>
    [DataMember(Name = "PriorTransferChangeInPricePercent", EmitDefaultValue = false)]
    public string PriorTransferChangeInPricePercent { get; set; }

    /// <summary>
    /// The number of months between the most recent change in ownership and the previous change in ownership.
    /// </summary>
    /// <value>The number of months between the most recent change in ownership and the previous change in ownership.  </value>
    [DataMember(Name = "PriorTransferMonthsSince", EmitDefaultValue = false)]
    public int PriorTransferMonthsSince { get; set; }


    /// <summary>
    /// The current status of the most recent listing on the property. Listing data is from 3rd parties and may be incomplete.
    /// </summary>
    /// <value>The current status of the most recent listing on the property. Listing data is from 3rd parties and may be incomplete. </value>
    [TypeConverter(typeof(CustomEnumConverter<ListingStatusEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ListingStatusEnum
    {

      /// <summary>
      /// Enum ActiveEnum for Active
      /// </summary>
      [EnumMember(Value = "Active")]
      ActiveEnum = 1,

      /// <summary>
      /// Enum ContingentEnum for Contingent
      /// </summary>
      [EnumMember(Value = "Contingent")]
      ContingentEnum = 2,

      /// <summary>
      /// Enum PendingEnum for Pending
      /// </summary>
      [EnumMember(Value = "Pending")]
      PendingEnum = 3,

      /// <summary>
      /// Enum SoldEnum for Sold
      /// </summary>
      [EnumMember(Value = "Sold")]
      SoldEnum = 4,

      /// <summary>
      /// Enum WithdrawnEnum for Withdrawn
      /// </summary>
      [EnumMember(Value = "Withdrawn")]
      WithdrawnEnum = 5,

      /// <summary>
      /// Enum ExpiredEnum for Expired
      /// </summary>
      [EnumMember(Value = "Expired")]
      ExpiredEnum = 6,

      /// <summary>
      /// Enum CancelledEnum for Cancelled
      /// </summary>
      [EnumMember(Value = "Cancelled")]
      CancelledEnum = 7
    }

    /// <summary>
    /// The current status of the most recent listing on the property. Listing data is from 3rd parties and may be incomplete.
    /// </summary>
    /// <value>The current status of the most recent listing on the property. Listing data is from 3rd parties and may be incomplete. </value>
    [DataMember(Name = "ListingStatus", EmitDefaultValue = false)]
    public ListingStatusEnum ListingStatus { get; set; }


    /// <summary>
    /// The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required.
    /// </summary>
    /// <value>The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required. </value>
    [TypeConverter(typeof(CustomEnumConverter<ListingTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ListingTypeEnum
    {

      /// <summary>
      /// Enum MarketEnum for Market
      /// </summary>
      [EnumMember(Value = "Market")]
      MarketEnum = 1,

      /// <summary>
      /// Enum ShortSaleEnum for Short Sale
      /// </summary>
      [EnumMember(Value = "Short Sale")]
      ShortSaleEnum = 2,

      /// <summary>
      /// Enum REOEnum for REO
      /// </summary>
      [EnumMember(Value = "REO")]
      REOEnum = 3,

      /// <summary>
      /// Enum QuickSaleEnum for Quick Sale
      /// </summary>
      [EnumMember(Value = "Quick Sale")]
      QuickSaleEnum = 4,

      /// <summary>
      /// Enum DistressedEnum for Distressed
      /// </summary>
      [EnumMember(Value = "Distressed")]
      DistressedEnum = 5,

      /// <summary>
      /// Enum NonMarketEnum for Non-Market
      /// </summary>
      [EnumMember(Value = "Non-Market")]
      NonMarketEnum = 6,

      /// <summary>
      /// Enum AuctionEnum for Auction
      /// </summary>
      [EnumMember(Value = "Auction")]
      AuctionEnum = 7,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 8
    }

    /// <summary>
    /// The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required.
    /// </summary>
    /// <value>The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required. </value>
    [DataMember(Name = "ListingType", EmitDefaultValue = false)]
    public ListingTypeEnum ListingType { get; set; }

    /// <summary>
    /// The asking price of the property listed for sale.
    /// </summary>
    /// <value>The asking price of the property listed for sale. </value>
    [DataMember(Name = "ListingPrice", EmitDefaultValue = false)]
    public string ListingPrice { get; set; }

    /// <summary>
    /// The listing price divided by the square footage of the property.
    /// </summary>
    /// <value>The listing price divided by the square footage of the property. </value>
    [DataMember(Name = "ListingPricePerSqFt", EmitDefaultValue = false)]
    public string ListingPricePerSqFt { get; set; }


    /// <summary>
    /// The date the property was listed for sale.
    /// </summary>
    /// <value>The date the property was listed for sale. </value>
    [TypeConverter(typeof(CustomEnumConverter<ListingDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ListingDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date the property was listed for sale.
    /// </summary>
    /// <value>The date the property was listed for sale. </value>
    [DataMember(Name = "ListingDate", EmitDefaultValue = false)]
    public ListingDateEnum ListingDate { get; set; }

    /// <summary>
    /// Number of days since the property was listed for sale. For properties that are no longer active, this is the number of days between the date the property was originally listed, and its final status (sold, expired, etc).
    /// </summary>
    /// <value>Number of days since the property was listed for sale. For properties that are no longer active, this is the number of days between the date the property was originally listed, and its final status (sold, expired, etc). </value>
    [DataMember(Name = "DaysOnMarket", EmitDefaultValue = false)]
    public int DaysOnMarket { get; set; }


    /// <summary>
    /// Your interest level in the property.
    /// </summary>
    /// <value>Your interest level in the property. </value>

    public enum InterestLevelEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum Star for 1 star
      /// </summary>

      Star1 = 1,

      /// <summary>
      /// Enum Star2 for 2 stars
      /// </summary>

      Star2 = 2,

      /// <summary>
      /// Enum Star3 for 3 stars
      /// </summary>

      Star3 = 3,

      /// <summary>
      /// Enum Star4 for 4 stars
      /// </summary>

      Star4 = 4,

      /// <summary>
      /// Enum Star5 for 5 stars
      /// </summary>

      Star5 = 5
    }

    /// <summary>
    /// Your interest level in the property.
    /// </summary>
    /// <value>Your interest level in the property. </value>
    [DataMember(Name = "InterestLevel", EmitDefaultValue = false)]
    public InterestLevelEnum InterestLevel { get; set; }

    /// <summary>
    /// &gt;**⚠️** The enumerated list below shows the ***default*** statuses, which you may have adjusted. Use the [View status level labels](#operation/GET/accounts/preferences/statuses) endpoint to see the labels for ***your*** statuses.    &gt;**ℹ️** Status values begin with 1, not 0.   &gt;**⚠️** The enumerated list below shows the ***default*** statuses, which you may have adjusted. Use the [View status level labels](#operation/GET/accounts/preferences/statuses) endpoint to see the labels for ***your*** statuses.    &gt;**ℹ️** Status values begin with 1, not 0.   The status you assigned to the property. You can define possible values for status by selecting Edit Status Settings.
    /// </summary>
    /// <value>&gt;**⚠️** The enumerated list below shows the ***default*** statuses, which you may have adjusted. Use the [View status level labels](#operation/GET/accounts/preferences/statuses) endpoint to see the labels for ***your*** statuses.    &gt;**ℹ️** Status values begin with 1, not 0.   &gt;**⚠️** The enumerated list below shows the ***default*** statuses, which you may have adjusted. Use the [View status level labels](#operation/GET/accounts/preferences/statuses) endpoint to see the labels for ***your*** statuses.    &gt;**ℹ️** Status values begin with 1, not 0.   The status you assigned to the property. You can define possible values for status by selecting Edit Status Settings. </value>
    [DataMember(Name = "StatusLevel", EmitDefaultValue = false)]
    public int StatusLevel { get; set; }


    /// <summary>
    /// Whether or not the property is currently listed for sale (there is a current listing, with a status of 'Active'). Listing data is from 3rd parties and may be incomplete.
    /// </summary>
    /// <value>Whether or not the property is currently listed for sale (there is a current listing, with a status of 'Active'). Listing data is from 3rd parties and may be incomplete. </value>

    public enum IsListedForSaleEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not the property is currently listed for sale (there is a current listing, with a status of &#39;Active&#39;). Listing data is from 3rd parties and may be incomplete.
    /// </summary>
    /// <value>Whether or not the property is currently listed for sale (there is a current listing, with a status of &#39;Active&#39;). Listing data is from 3rd parties and may be incomplete. </value>
    [DataMember(Name = "isListedForSale", EmitDefaultValue = false)]
    public IsListedForSaleEnum IsListedForSale { get; set; }

    /// <summary>
    /// An array of Person objects, one for each owner.  See the GET [Persons](#tag/Persons) endpoint documentation for descriptions of the fields (only fields in the \&quot;overview\&quot; fieldset display here.)
    /// </summary>
    /// <value>An array of Person objects, one for each owner.  See the GET [Persons](#tag/Persons) endpoint documentation for descriptions of the fields (only fields in the \&quot;overview\&quot; fieldset display here.)</value>
    [DataMember(Name = "Persons", EmitDefaultValue = false)]
    public List<Object> Persons { get; set; }


    /// <summary>
    /// Whether an owner of the property has an open lien. Liens on individual owners typically must be paid when the property is sold, and may impact purchases at foreclosure sale if the lien is senior to the foreclosing loan.
    /// </summary>
    /// <value>Whether an owner of the property has an open lien. Liens on individual owners typically must be paid when the property is sold, and may impact purchases at foreclosure sale if the lien is senior to the foreclosing loan. </value>

    public enum PropertyHasOpenPersonLiensEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether an owner of the property has an open lien. Liens on individual owners typically must be paid when the property is sold, and may impact purchases at foreclosure sale if the lien is senior to the foreclosing loan.
    /// </summary>
    /// <value>Whether an owner of the property has an open lien. Liens on individual owners typically must be paid when the property is sold, and may impact purchases at foreclosure sale if the lien is senior to the foreclosing loan. </value>
    [DataMember(Name = "PropertyHasOpenPersonLiens", EmitDefaultValue = false)]
    public PropertyHasOpenPersonLiensEnum PropertyHasOpenPersonLiens { get; set; }


    /// <summary>
    /// Whether a property has an open lien.
    /// </summary>
    /// <value>Whether a property has an open lien. </value>

    public enum PropertyHasOpenLiensEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether a property has an open lien.
    /// </summary>
    /// <value>Whether a property has an open lien. </value>
    [DataMember(Name = "PropertyHasOpenLiens", EmitDefaultValue = false)]
    public PropertyHasOpenLiensEnum PropertyHasOpenLiens { get; set; }


    /// <summary>
    /// Whether or not a current owner has been divorced after they purchased or otherwise owned the property. This is currently based on divorce records filed with the county recorder's office, not county court filings. Note that only a small percentage of divorces get filed with the county recorder.
    /// </summary>
    /// <value>Whether or not a current owner has been divorced after they purchased or otherwise owned the property. This is currently based on divorce records filed with the county recorder's office, not county court filings. Note that only a small percentage of divorces get filed with the county recorder. </value>

    public enum InDivorcePropertyEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not a current owner has been divorced after they purchased or otherwise owned the property. This is currently based on divorce records filed with the county recorder&#39;s office, not county court filings. Note that only a small percentage of divorces get filed with the county recorder.
    /// </summary>
    /// <value>Whether or not a current owner has been divorced after they purchased or otherwise owned the property. This is currently based on divorce records filed with the county recorder&#39;s office, not county court filings. Note that only a small percentage of divorces get filed with the county recorder. </value>
    [DataMember(Name = "inDivorceProperty", EmitDefaultValue = false)]
    public InDivorcePropertyEnum InDivorceProperty { get; set; }


    /// <summary>
    /// Whether or not an owner of the property is currently in bankruptcy.
    /// </summary>
    /// <value>Whether or not an owner of the property is currently in bankruptcy. </value>

    public enum InBankruptcyPropertyEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether or not an owner of the property is currently in bankruptcy.
    /// </summary>
    /// <value>Whether or not an owner of the property is currently in bankruptcy. </value>
    [DataMember(Name = "inBankruptcyProperty", EmitDefaultValue = false)]
    public InBankruptcyPropertyEnum InBankruptcyProperty { get; set; }

    /// <summary>
    /// The amount you expect the property to be resold for upon the conclusion of a flip. If repairs are planned this should be the after repairs value (ARV), rather than the current market value. By default this is set to the estimated value which is determined by an automated valuation model using public records data. It is important to consider many factors when determining price, including comps, the unique characteristics of the property, and market conditions &amp; direction.
    /// </summary>
    /// <value>The amount you expect the property to be resold for upon the conclusion of a flip. If repairs are planned this should be the after repairs value (ARV), rather than the current market value. By default this is set to the estimated value which is determined by an automated valuation model using public records data. It is important to consider many factors when determining price, including comps, the unique characteristics of the property, and market conditions &amp; direction.  </value>
    [DataMember(Name = "MyValue", EmitDefaultValue = false)]
    public string MyValue { get; set; }

    /// <summary>
    /// Gets or Sets MyValuePerSqFt
    /// </summary>
    [DataMember(Name = "MyValuePerSqFt", EmitDefaultValue = false)]
    public string MyValuePerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets MyValueDate
    /// </summary>
    [DataMember(Name = "MyValueDate", EmitDefaultValue = false)]
    public string MyValueDate { get; set; }

    /// <summary>
    /// The estimated value per square foot (estimated value divided by sq ft).
    /// </summary>
    /// <value>The estimated value per square foot (estimated value divided by sq ft). </value>
    [DataMember(Name = "AVMPerSqFt", EmitDefaultValue = false)]
    public string AVMPerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets AVMAsOf
    /// </summary>
    [DataMember(Name = "AVMAsOf", EmitDefaultValue = false)]
    public string AVMAsOf { get; set; }

    /// <summary>
    /// Gets or Sets AVMReliability
    /// </summary>
    [DataMember(Name = "AVMReliability", EmitDefaultValue = false)]
    public string AVMReliability { get; set; }

    /// <summary>
    /// Gets or Sets CompSalesPrice
    /// </summary>
    [DataMember(Name = "CompSalesPrice", EmitDefaultValue = false)]
    public string CompSalesPrice { get; set; }

    /// <summary>
    /// Gets or Sets CompSalesPricePerSqFt
    /// </summary>
    [DataMember(Name = "CompSalesPricePerSqFt", EmitDefaultValue = false)]
    public string CompSalesPricePerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets CompSalesPriceRange
    /// </summary>
    [DataMember(Name = "CompSalesPriceRange", EmitDefaultValue = false)]
    public string CompSalesPriceRange { get; set; }

    /// <summary>
    /// Gets or Sets CompSalesDate
    /// </summary>
    [DataMember(Name = "CompSalesDate", EmitDefaultValue = false)]
    public string CompSalesDate { get; set; }

    /// <summary>
    /// Gets or Sets CompListingPrice
    /// </summary>
    [DataMember(Name = "CompListingPrice", EmitDefaultValue = false)]
    public string CompListingPrice { get; set; }

    /// <summary>
    /// Gets or Sets CompListingPricePerSqFt
    /// </summary>
    [DataMember(Name = "CompListingPricePerSqFt", EmitDefaultValue = false)]
    public string CompListingPricePerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets CompListingPriceRange
    /// </summary>
    [DataMember(Name = "CompListingPriceRange", EmitDefaultValue = false)]
    public string CompListingPriceRange { get; set; }

    /// <summary>
    /// Gets or Sets CompListingDate
    /// </summary>
    [DataMember(Name = "CompListingDate", EmitDefaultValue = false)]
    public string CompListingDate { get; set; }

    /// <summary>
    /// The maximum amount you would pay for this property at which the rent (value entered in My Rent) would cover your estimated mortgage interest and taxes, assuming prevailing mortgage interest rates for a 30 year mortgage and basic lending guidelines.
    /// </summary>
    /// <value>The maximum amount you would pay for this property at which the rent (value entered in My Rent) would cover your estimated mortgage interest and taxes, assuming prevailing mortgage interest rates for a 30 year mortgage and basic lending guidelines. </value>
    [DataMember(Name = "RentBreakEven", EmitDefaultValue = false)]
    public string RentBreakEven { get; set; }

    /// <summary>
    /// Gets or Sets RentBreakEvenPerSqFt
    /// </summary>
    [DataMember(Name = "RentBreakEvenPerSqFt", EmitDefaultValue = false)]
    public string RentBreakEvenPerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets RentBreakEvenDate
    /// </summary>
    [DataMember(Name = "RentBreakEvenDate", EmitDefaultValue = false)]
    public string RentBreakEvenDate { get; set; }

    /// <summary>
    /// The expected monthly rental income for the property. By default this is set to the HUD fair market rent for the property.
    /// </summary>
    /// <value>The expected monthly rental income for the property. By default this is set to the HUD fair market rent for the property. </value>
    [DataMember(Name = "MyRent", EmitDefaultValue = false)]
    public string MyRent { get; set; }

    /// <summary>
    /// Gets or Sets MyRentPerSqFt
    /// </summary>
    [DataMember(Name = "MyRentPerSqFt", EmitDefaultValue = false)]
    public string MyRentPerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets MyRentDate
    /// </summary>
    [DataMember(Name = "MyRentDate", EmitDefaultValue = false)]
    public string MyRentDate { get; set; }

    /// <summary>
    /// HUD Fair Market Rent for similar properties in this zipcode.
    /// </summary>
    /// <value>HUD Fair Market Rent for similar properties in this zipcode. </value>
    [DataMember(Name = "HUDRent", EmitDefaultValue = false)]
    public string HUDRent { get; set; }

    /// <summary>
    /// Gets or Sets HUDRentPerSqFt
    /// </summary>
    [DataMember(Name = "HUDRentPerSqFt", EmitDefaultValue = false)]
    public string HUDRentPerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets HUDRentDate
    /// </summary>
    [DataMember(Name = "HUDRentDate", EmitDefaultValue = false)]
    public string HUDRentDate { get; set; }

    /// <summary>
    /// Minimum rent needed to cover the estimated mortgage interest and taxes for the purchase amount (value entered in My Value) assuming prevailing mortgage interest rates for a 30 year mortgage and basic lending guidelines.
    /// </summary>
    /// <value>Minimum rent needed to cover the estimated mortgage interest and taxes for the purchase amount (value entered in My Value) assuming prevailing mortgage interest rates for a 30 year mortgage and basic lending guidelines. </value>
    [DataMember(Name = "ValueBreakEven", EmitDefaultValue = false)]
    public string ValueBreakEven { get; set; }

    /// <summary>
    /// Gets or Sets ValueBreakEvenPerSqFt
    /// </summary>
    [DataMember(Name = "ValueBreakEvenPerSqFt", EmitDefaultValue = false)]
    public string ValueBreakEvenPerSqFt { get; set; }

    /// <summary>
    /// Gets or Sets ValueBreakEvenDate
    /// </summary>
    [DataMember(Name = "ValueBreakEvenDate", EmitDefaultValue = false)]
    public string ValueBreakEvenDate { get; set; }

    /// <summary>
    /// Gets or Sets Comparables
    /// </summary>
    [DataMember(Name = "Comparables", EmitDefaultValue = false)]
    public string Comparables { get; set; }

    /// <summary>
    /// Gets or Sets PhotoURL1
    /// </summary>
    [DataMember(Name = "PhotoURL1", EmitDefaultValue = false)]
    public string PhotoURL1 { get; set; }

    /// <summary>
    /// The full name of the primary contact associated with the property.
    /// </summary>
    /// <value>The full name of the primary contact associated with the property. </value>
    [DataMember(Name = "PrimaryName", EmitDefaultValue = false)]
    public string PrimaryName { get; set; }

    /// <summary>
    /// The first name of the primary contact associated with the property.
    /// </summary>
    /// <value>The first name of the primary contact associated with the property. </value>
    [DataMember(Name = "PrimaryFirstName", EmitDefaultValue = false)]
    public string PrimaryFirstName { get; set; }

    /// <summary>
    /// The last name of the primary contact associated with the property.
    /// </summary>
    /// <value>The last name of the primary contact associated with the property. </value>
    [DataMember(Name = "PrimaryLastName", EmitDefaultValue = false)]
    public string PrimaryLastName { get; set; }

    /// <summary>
    /// The status of the first phone number for the primary contact associated with the property.
    /// </summary>
    /// <value>The status of the first phone number for the primary contact associated with the property. </value>
    [DataMember(Name = "PrimaryPhone1Status", EmitDefaultValue = false)]
    public string PrimaryPhone1Status { get; set; }

    /// <summary>
    /// The status of the first mobile phone number for the primary contact associated with the property.
    /// </summary>
    /// <value>The status of the first mobile phone number for the primary contact associated with the property. </value>
    [DataMember(Name = "PrimaryMobilePhone1Status", EmitDefaultValue = false)]
    public string PrimaryMobilePhone1Status { get; set; }

    /// <summary>
    /// The status of the first phone number for the secondary contact associated with the property.
    /// </summary>
    /// <value>The status of the first phone number for the secondary contact associated with the property. </value>
    [DataMember(Name = "SecondaryPhone1Status", EmitDefaultValue = false)]
    public string SecondaryPhone1Status { get; set; }

    /// <summary>
    /// The status of the first mobile phone number for the secondary contact associated with the property.
    /// </summary>
    /// <value>The status of the first mobile phone number for the secondary contact associated with the property. </value>
    [DataMember(Name = "SecondaryMobilePhone1Status", EmitDefaultValue = false)]
    public string SecondaryMobilePhone1Status { get; set; }

    /// <summary>
    /// The first phone number for the primary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems.
    /// </summary>
    /// <value>The first phone number for the primary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems. </value>
    [DataMember(Name = "PrimaryPhone1Hashed", EmitDefaultValue = false)]
    public string PrimaryPhone1Hashed { get; set; }

    /// <summary>
    /// The first email address for the primary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems.
    /// </summary>
    /// <value>The first email address for the primary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems. </value>
    [DataMember(Name = "PrimaryEmail1Hashed", EmitDefaultValue = false)]
    public string PrimaryEmail1Hashed { get; set; }

    /// <summary>
    /// The full name of the secondary contact associated with the property.
    /// </summary>
    /// <value>The full name of the secondary contact associated with the property. </value>
    [DataMember(Name = "SecondaryName", EmitDefaultValue = false)]
    public string SecondaryName { get; set; }

    /// <summary>
    /// The first name of the secondary contact associated with the property.
    /// </summary>
    /// <value>The first name of the secondary contact associated with the property. </value>
    [DataMember(Name = "SecondaryFirstName", EmitDefaultValue = false)]
    public string SecondaryFirstName { get; set; }

    /// <summary>
    /// The last name of the secondary contact associated with the property.
    /// </summary>
    /// <value>The last name of the secondary contact associated with the property. </value>
    [DataMember(Name = "SecondaryLastName", EmitDefaultValue = false)]
    public string SecondaryLastName { get; set; }

    /// <summary>
    /// The first phone number for the secondary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems.
    /// </summary>
    /// <value>The first phone number for the secondary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems. </value>
    [DataMember(Name = "SecondaryPhone1Hashed", EmitDefaultValue = false)]
    public string SecondaryPhone1Hashed { get; set; }

    /// <summary>
    /// The first email address for the secondary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems.
    /// </summary>
    /// <value>The first email address for the secondary contact associated with the property, hashed into a unique hexadecimal string. Commonly used as a unique identifier in marketing systems. </value>
    [DataMember(Name = "SecondaryEmail1Hashed", EmitDefaultValue = false)]
    public string SecondaryEmail1Hashed { get; set; }

    /// <summary>
    /// Indicates whether a phone is available for an owner of this property.
    /// </summary>
    /// <value>Indicates whether a phone is available for an owner of this property. </value>
    [DataMember(Name = "PhoneAvailability", EmitDefaultValue = false)]
    public string PhoneAvailability { get; set; }

    /// <summary>
    /// Indicates whether an email is available for an owner of this property.
    /// </summary>
    /// <value>Indicates whether an email is available for an owner of this property. </value>
    [DataMember(Name = "EmailAvailability", EmitDefaultValue = false)]
    public string EmailAvailability { get; set; }

    /// <summary>
    /// Gets or Sets PropertyURL
    /// </summary>
    [DataMember(Name = "PropertyURL", EmitDefaultValue = false)]
    public string PropertyURL { get; set; }


    /// <summary>
    /// The flood zone designation as defined by the Federal Emergency Management Agency (FEMA).
    /// </summary>
    /// <value>The flood zone designation as defined by the Federal Emergency Management Agency (FEMA). </value>
    [TypeConverter(typeof(CustomEnumConverter<FloodZoneEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FloodZoneEnum
    {

      /// <summary>
      /// Enum AEnum for A
      /// </summary>
      [EnumMember(Value = "A")]
      AEnum = 1,

      /// <summary>
      /// Enum A99Enum for A99
      /// </summary>
      [EnumMember(Value = "A99")]
      A99Enum = 2,

      /// <summary>
      /// Enum AEEnum for AE
      /// </summary>
      [EnumMember(Value = "AE")]
      AEEnum = 3,

      /// <summary>
      /// Enum AHEnum for AH
      /// </summary>
      [EnumMember(Value = "AH")]
      AHEnum = 4,

      /// <summary>
      /// Enum AOEnum for AO
      /// </summary>
      [EnumMember(Value = "AO")]
      AOEnum = 5,

      /// <summary>
      /// Enum AREnum for AR
      /// </summary>
      [EnumMember(Value = "AR")]
      AREnum = 6,

      /// <summary>
      /// Enum DEnum for D
      /// </summary>
      [EnumMember(Value = "D")]
      DEnum = 7,

      /// <summary>
      /// Enum VEnum for V
      /// </summary>
      [EnumMember(Value = "V")]
      VEnum = 8,

      /// <summary>
      /// Enum VEEnum for VE
      /// </summary>
      [EnumMember(Value = "VE")]
      VEEnum = 9,

      /// <summary>
      /// Enum XEnum for X
      /// </summary>
      [EnumMember(Value = "X")]
      XEnum = 10
    }

    /// <summary>
    /// The flood zone designation as defined by the Federal Emergency Management Agency (FEMA).
    /// </summary>
    /// <value>The flood zone designation as defined by the Federal Emergency Management Agency (FEMA). </value>
    [DataMember(Name = "FloodZone", EmitDefaultValue = false)]
    public FloodZoneEnum FloodZone { get; set; }


    /// <summary>
    /// The flood risk as defined by the Federal Emergency Management Agency (FEMA).
    /// </summary>
    /// <value>The flood risk as defined by the Federal Emergency Management Agency (FEMA). </value>
    [TypeConverter(typeof(CustomEnumConverter<FloodZoneRiskEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FloodZoneRiskEnum
    {

      /// <summary>
      /// Enum HighEnum for High
      /// </summary>
      [EnumMember(Value = "High")]
      HighEnum = 1,

      /// <summary>
      /// Enum MinimalEnum for Minimal
      /// </summary>
      [EnumMember(Value = "Minimal")]
      MinimalEnum = 2,

      /// <summary>
      /// Enum ModerateEnum for Moderate
      /// </summary>
      [EnumMember(Value = "Moderate")]
      ModerateEnum = 3,

      /// <summary>
      /// Enum HighCoastalEnum for High Coastal
      /// </summary>
      [EnumMember(Value = "High Coastal")]
      HighCoastalEnum = 4,

      /// <summary>
      /// Enum UndeterminateEnum for Undeterminate
      /// </summary>
      [EnumMember(Value = "Undeterminate")]
      UndeterminateEnum = 5
    }

    /// <summary>
    /// The flood risk as defined by the Federal Emergency Management Agency (FEMA).
    /// </summary>
    /// <value>The flood risk as defined by the Federal Emergency Management Agency (FEMA). </value>
    [DataMember(Name = "FloodZoneRisk", EmitDefaultValue = false)]
    public FloodZoneRiskEnum FloodZoneRisk { get; set; }

    /// <summary>
    /// Gets or Sets FloodMapDate
    /// </summary>
    [DataMember(Name = "FloodMapDate", EmitDefaultValue = false)]
    public string FloodMapDate { get; set; }

    /// <summary>
    /// Gets or Sets FloodMapNumber
    /// </summary>
    [DataMember(Name = "FloodMapNumber", EmitDefaultValue = false)]
    public GETPropertiesRadarID200ResponseResultsInnerFloodMapNumber FloodMapNumber { get; set; }


    /// <summary>
    /// The current stage of foreclosure.
    /// </summary>
    /// <value>The current stage of foreclosure. </value>
    [TypeConverter(typeof(CustomEnumConverter<ForeclosureStageEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ForeclosureStageEnum
    {

      /// <summary>
      /// Enum PreforeclosureEnum for Preforeclosure
      /// </summary>
      [EnumMember(Value = "Preforeclosure")]
      PreforeclosureEnum = 1,

      /// <summary>
      /// Enum PFNewFilingEnum for PF New Filing
      /// </summary>
      [EnumMember(Value = "PF New Filing")]
      PFNewFilingEnum = 2,

      /// <summary>
      /// Enum PFSoldEnum for PF Sold
      /// </summary>
      [EnumMember(Value = "PF Sold")]
      PFSoldEnum = 3,

      /// <summary>
      /// Enum PFOutdatedEnum for PF Outdated
      /// </summary>
      [EnumMember(Value = "PF Outdated")]
      PFOutdatedEnum = 4,

      /// <summary>
      /// Enum PFReleasedEnum for PF Released
      /// </summary>
      [EnumMember(Value = "PF Released")]
      PFReleasedEnum = 5,

      /// <summary>
      /// Enum AuctionEnum for Auction
      /// </summary>
      [EnumMember(Value = "Auction")]
      AuctionEnum = 6,

      /// <summary>
      /// Enum AuctionOutdatedEnum for Auction Outdated
      /// </summary>
      [EnumMember(Value = "Auction Outdated")]
      AuctionOutdatedEnum = 7,

      /// <summary>
      /// Enum AuctionUnknownEnum for Auction Unknown
      /// </summary>
      [EnumMember(Value = "Auction Unknown")]
      AuctionUnknownEnum = 8,

      /// <summary>
      /// Enum SalePendingEnum for Sale Pending
      /// </summary>
      [EnumMember(Value = "Sale Pending")]
      SalePendingEnum = 9,

      /// <summary>
      /// Enum AuctionCancelledEnum for Auction Cancelled
      /// </summary>
      [EnumMember(Value = "Auction Cancelled")]
      AuctionCancelledEnum = 10,

      /// <summary>
      /// Enum AuctionCancelledResoldEnum for Auction Cancelled Resold
      /// </summary>
      [EnumMember(Value = "Auction Cancelled Resold")]
      AuctionCancelledResoldEnum = 11,

      /// <summary>
      /// Enum AuctionReleasedEnum for Auction Released
      /// </summary>
      [EnumMember(Value = "Auction Released")]
      AuctionReleasedEnum = 12,

      /// <summary>
      /// Enum BankOwnedEnum for Bank Owned
      /// </summary>
      [EnumMember(Value = "Bank Owned")]
      BankOwnedEnum = 13,

      /// <summary>
      /// Enum BankResoldEnum for Bank Resold
      /// </summary>
      [EnumMember(Value = "Bank Resold")]
      BankResoldEnum = 14,

      /// <summary>
      /// Enum BankRescindedEnum for Bank Rescinded
      /// </summary>
      [EnumMember(Value = "Bank Rescinded")]
      BankRescindedEnum = 15,

      /// <summary>
      /// Enum BankHeldEnum for Bank Held
      /// </summary>
      [EnumMember(Value = "Bank Held")]
      BankHeldEnum = 16,

      /// <summary>
      /// Enum _3rdOwnedEnum for 3rd Owned
      /// </summary>
      [EnumMember(Value = "3rd Owned")]
      _3rdOwnedEnum = 17,

      /// <summary>
      /// Enum _3rdResoldEnum for 3rd Resold
      /// </summary>
      [EnumMember(Value = "3rd Resold")]
      _3rdResoldEnum = 18,

      /// <summary>
      /// Enum _3rdRescindedEnum for 3rd Rescinded
      /// </summary>
      [EnumMember(Value = "3rd Rescinded")]
      _3rdRescindedEnum = 19,

      /// <summary>
      /// Enum _3rdHeldEnum for 3rd Held
      /// </summary>
      [EnumMember(Value = "3rd Held")]
      _3rdHeldEnum = 20
    }

    /// <summary>
    /// The current stage of foreclosure.
    /// </summary>
    /// <value>The current stage of foreclosure. </value>
    [DataMember(Name = "ForeclosureStage", EmitDefaultValue = false)]
    public ForeclosureStageEnum ForeclosureStage { get; set; }


    /// <summary>
    /// The time at which the foreclosure auction will be held.
    /// </summary>
    /// <value>The time at which the foreclosure auction will be held. </value>
    [TypeConverter(typeof(CustomEnumConverter<SaleTimeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SaleTimeEnum
    {

      /// <summary>
      /// Enum _830amEnum for 8:30am
      /// </summary>
      [EnumMember(Value = "8:30am")]
      _830amEnum = 1,

      /// <summary>
      /// Enum _845amEnum for 8:45am
      /// </summary>
      [EnumMember(Value = "8:45am")]
      _845amEnum = 2,

      /// <summary>
      /// Enum _900amEnum for 9:00am
      /// </summary>
      [EnumMember(Value = "9:00am")]
      _900amEnum = 3,

      /// <summary>
      /// Enum _915amEnum for 9:15am
      /// </summary>
      [EnumMember(Value = "9:15am")]
      _915amEnum = 4,

      /// <summary>
      /// Enum _930amEnum for 9:30am
      /// </summary>
      [EnumMember(Value = "9:30am")]
      _930amEnum = 5,

      /// <summary>
      /// Enum _945amEnum for 9:45am
      /// </summary>
      [EnumMember(Value = "9:45am")]
      _945amEnum = 6,

      /// <summary>
      /// Enum _1000amEnum for 10:00am
      /// </summary>
      [EnumMember(Value = "10:00am")]
      _1000amEnum = 7,

      /// <summary>
      /// Enum _1015amEnum for 10:15am
      /// </summary>
      [EnumMember(Value = "10:15am")]
      _1015amEnum = 8,

      /// <summary>
      /// Enum _1030amEnum for 10:30am
      /// </summary>
      [EnumMember(Value = "10:30am")]
      _1030amEnum = 9,

      /// <summary>
      /// Enum _1045amEnum for 10:45am
      /// </summary>
      [EnumMember(Value = "10:45am")]
      _1045amEnum = 10,

      /// <summary>
      /// Enum _1100amEnum for 11:00am
      /// </summary>
      [EnumMember(Value = "11:00am")]
      _1100amEnum = 11,

      /// <summary>
      /// Enum _1115amEnum for 11:15am
      /// </summary>
      [EnumMember(Value = "11:15am")]
      _1115amEnum = 12,

      /// <summary>
      /// Enum _1130amEnum for 11:30am
      /// </summary>
      [EnumMember(Value = "11:30am")]
      _1130amEnum = 13,

      /// <summary>
      /// Enum _1145amEnum for 11:45am
      /// </summary>
      [EnumMember(Value = "11:45am")]
      _1145amEnum = 14,

      /// <summary>
      /// Enum _1200pmEnum for 12:00pm
      /// </summary>
      [EnumMember(Value = "12:00pm")]
      _1200pmEnum = 15,

      /// <summary>
      /// Enum _1215pmEnum for 12:15pm
      /// </summary>
      [EnumMember(Value = "12:15pm")]
      _1215pmEnum = 16,

      /// <summary>
      /// Enum _1230pmEnum for 12:30pm
      /// </summary>
      [EnumMember(Value = "12:30pm")]
      _1230pmEnum = 17,

      /// <summary>
      /// Enum _1245pmEnum for 12:45pm
      /// </summary>
      [EnumMember(Value = "12:45pm")]
      _1245pmEnum = 18,

      /// <summary>
      /// Enum _100pmEnum for 1:00pm
      /// </summary>
      [EnumMember(Value = "1:00pm")]
      _100pmEnum = 19,

      /// <summary>
      /// Enum _115pmEnum for 1:15pm
      /// </summary>
      [EnumMember(Value = "1:15pm")]
      _115pmEnum = 20,

      /// <summary>
      /// Enum _130pmEnum for 1:30pm
      /// </summary>
      [EnumMember(Value = "1:30pm")]
      _130pmEnum = 21,

      /// <summary>
      /// Enum _145pmEnum for 1:45pm
      /// </summary>
      [EnumMember(Value = "1:45pm")]
      _145pmEnum = 22,

      /// <summary>
      /// Enum _200pmEnum for 2:00pm
      /// </summary>
      [EnumMember(Value = "2:00pm")]
      _200pmEnum = 23,

      /// <summary>
      /// Enum _215pmEnum for 2:15pm
      /// </summary>
      [EnumMember(Value = "2:15pm")]
      _215pmEnum = 24,

      /// <summary>
      /// Enum _230pmEnum for 2:30pm
      /// </summary>
      [EnumMember(Value = "2:30pm")]
      _230pmEnum = 25,

      /// <summary>
      /// Enum _245pmEnum for 2:45pm
      /// </summary>
      [EnumMember(Value = "2:45pm")]
      _245pmEnum = 26,

      /// <summary>
      /// Enum _300pmEnum for 3:00pm
      /// </summary>
      [EnumMember(Value = "3:00pm")]
      _300pmEnum = 27,

      /// <summary>
      /// Enum _315pmEnum for 3:15pm
      /// </summary>
      [EnumMember(Value = "3:15pm")]
      _315pmEnum = 28,

      /// <summary>
      /// Enum _330pmEnum for 3:30pm
      /// </summary>
      [EnumMember(Value = "3:30pm")]
      _330pmEnum = 29,

      /// <summary>
      /// Enum _345pmEnum for 3:45pm
      /// </summary>
      [EnumMember(Value = "3:45pm")]
      _345pmEnum = 30,

      /// <summary>
      /// Enum _400pmEnum for 4:00pm
      /// </summary>
      [EnumMember(Value = "4:00pm")]
      _400pmEnum = 31,

      /// <summary>
      /// Enum _415pmEnum for 4:15pm
      /// </summary>
      [EnumMember(Value = "4:15pm")]
      _415pmEnum = 32,

      /// <summary>
      /// Enum _430pmEnum for 4:30pm
      /// </summary>
      [EnumMember(Value = "4:30pm")]
      _430pmEnum = 33,

      /// <summary>
      /// Enum _445pmEnum for 4:45pm
      /// </summary>
      [EnumMember(Value = "4:45pm")]
      _445pmEnum = 34,

      /// <summary>
      /// Enum _500pmEnum for 5:00pm
      /// </summary>
      [EnumMember(Value = "5:00pm")]
      _500pmEnum = 35,

      /// <summary>
      /// Enum _515pmEnum for 5:15pm
      /// </summary>
      [EnumMember(Value = "5:15pm")]
      _515pmEnum = 36
    }

    /// <summary>
    /// The time at which the foreclosure auction will be held.
    /// </summary>
    /// <value>The time at which the foreclosure auction will be held. </value>
    [DataMember(Name = "SaleTime", EmitDefaultValue = false)]
    public SaleTimeEnum SaleTime { get; set; }

    /// <summary>
    /// The address and city for the foreclosure auction.
    /// </summary>
    /// <value>The address and city for the foreclosure auction. </value>
    [DataMember(Name = "SalePlace", EmitDefaultValue = false)]
    public string SalePlace { get; set; }

    /// <summary>
    /// The published bid in the notice of trustee sale. Typically represents the total amount owed on the loan as of the original sale date. May be discounted when the lender sets the opening bid.
    /// </summary>
    /// <value>The published bid in the notice of trustee sale. Typically represents the total amount owed on the loan as of the original sale date. May be discounted when the lender sets the opening bid. </value>
    [DataMember(Name = "SaleAmount", EmitDefaultValue = false)]
    public string SaleAmount { get; set; }

    /// <summary>
    /// The amount the bidding will or did start at. May be discounted from the published bid.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information.
    /// </summary>
    /// <value>The amount the bidding will or did start at. May be discounted from the published bid.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information. </value>
    [DataMember(Name = "OpeningBid", EmitDefaultValue = false)]
    public string OpeningBid { get; set; }

    /// <summary>
    /// The winning bid at auction. If the property is sold back to the lender this is the same amount as the opening bid. If it is sold to a 3rd party this is at least $.01 more.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information.
    /// </summary>
    /// <value>The winning bid at auction. If the property is sold back to the lender this is the same amount as the opening bid. If it is sold to a 3rd party this is at least $.01 more.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information. </value>
    [DataMember(Name = "WinningBid", EmitDefaultValue = false)]
    public string WinningBid { get; set; }


    /// <summary>
    /// The estimated position of the loan in foreclosure versus other open loans on the property at the time of foreclosure. Possible positions include the first, second or third mortgage. Note that we estimate these positions using a computer model and they should not be relied upon for purchasing without verification.
    /// </summary>
    /// <value>The estimated position of the loan in foreclosure versus other open loans on the property at the time of foreclosure. Possible positions include the first, second or third mortgage. Note that we estimate these positions using a computer model and they should not be relied upon for purchasing without verification. </value>
    [TypeConverter(typeof(CustomEnumConverter<DOTPositionEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DOTPositionEnum
    {

      /// <summary>
      /// Enum FirstEnum for First
      /// </summary>
      [EnumMember(Value = "First")]
      FirstEnum = 1,

      /// <summary>
      /// Enum SecondEnum for Second
      /// </summary>
      [EnumMember(Value = "Second")]
      SecondEnum = 2,

      /// <summary>
      /// Enum ThirdEnum for Third
      /// </summary>
      [EnumMember(Value = "Third")]
      ThirdEnum = 3
    }

    /// <summary>
    /// The estimated position of the loan in foreclosure versus other open loans on the property at the time of foreclosure. Possible positions include the first, second or third mortgage. Note that we estimate these positions using a computer model and they should not be relied upon for purchasing without verification.
    /// </summary>
    /// <value>The estimated position of the loan in foreclosure versus other open loans on the property at the time of foreclosure. Possible positions include the first, second or third mortgage. Note that we estimate these positions using a computer model and they should not be relied upon for purchasing without verification. </value>
    [DataMember(Name = "DOTPosition", EmitDefaultValue = false)]
    public DOTPositionEnum DOTPosition { get; set; }


    /// <summary>
    /// For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.<br>For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information.
    /// </summary>
    /// <value>For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.<br>For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information. </value>
    [TypeConverter(typeof(CustomEnumConverter<SaleDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SaleDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.&lt;br&gt;For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information.
    /// </summary>
    /// <value>For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.&lt;br&gt;For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information. </value>
    [DataMember(Name = "SaleDate", EmitDefaultValue = false)]
    public SaleDateEnum SaleDate { get; set; }


    /// <summary>
    /// The reason the sale was postponed to a future sale date. If the sale has not yet been postponed then the reason is set to original indicating that the current sale date is the original sale date. Multiple reasons can be selected.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information.
    /// </summary>
    /// <value>The reason the sale was postponed to a future sale date. If the sale has not yet been postponed then the reason is set to original indicating that the current sale date is the original sale date. Multiple reasons can be selected.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information. </value>
    [TypeConverter(typeof(CustomEnumConverter<PostReasonEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PostReasonEnum
    {

      /// <summary>
      /// Enum Empty for
      /// </summary>
      [EnumMember(Value = "")]
      Empty = 1,

      /// <summary>
      /// Enum TrusteesDiscretionEnum for Trustees Discretion
      /// </summary>
      [EnumMember(Value = "Trustees Discretion")]
      TrusteesDiscretionEnum = 2,

      /// <summary>
      /// Enum MutualAgreementEnum for Mutual Agreement
      /// </summary>
      [EnumMember(Value = "Mutual Agreement")]
      MutualAgreementEnum = 3,

      /// <summary>
      /// Enum UnknownEnum for Unknown
      /// </summary>
      [EnumMember(Value = "Unknown")]
      UnknownEnum = 4,

      /// <summary>
      /// Enum BankruptcyEnum for Bankruptcy
      /// </summary>
      [EnumMember(Value = "Bankruptcy")]
      BankruptcyEnum = 5,

      /// <summary>
      /// Enum OriginalEnum for Original
      /// </summary>
      [EnumMember(Value = "Original")]
      OriginalEnum = 6,

      /// <summary>
      /// Enum OperationOfLawEnum for Operation of Law
      /// </summary>
      [EnumMember(Value = "Operation of Law")]
      OperationOfLawEnum = 7,

      /// <summary>
      /// Enum BeneficiaryRequestEnum for Beneficiary Request
      /// </summary>
      [EnumMember(Value = "Beneficiary Request")]
      BeneficiaryRequestEnum = 8
    }

    /// <summary>
    /// The reason the sale was postponed to a future sale date. If the sale has not yet been postponed then the reason is set to original indicating that the current sale date is the original sale date. Multiple reasons can be selected.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information.
    /// </summary>
    /// <value>The reason the sale was postponed to a future sale date. If the sale has not yet been postponed then the reason is set to original indicating that the current sale date is the original sale date. Multiple reasons can be selected.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information. </value>
    [DataMember(Name = "PostReason", EmitDefaultValue = false)]
    public PostReasonEnum PostReason { get; set; }

    /// <summary>
    /// The unique number assigned by trustee to identify a particular foreclosure.
    /// </summary>
    /// <value>The unique number assigned by trustee to identify a particular foreclosure. </value>
    [DataMember(Name = "TrusteeSaleNum", EmitDefaultValue = false)]
    public string TrusteeSaleNum { get; set; }


    /// <summary>
    /// Trustee sales can be postponed one or more times. The prior sale date is the date the foreclosure was scheduled for prior to the current sale date.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information.
    /// </summary>
    /// <value>Trustee sales can be postponed one or more times. The prior sale date is the date the foreclosure was scheduled for prior to the current sale date.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information. </value>
    [TypeConverter(typeof(CustomEnumConverter<PreviousSaleDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum PreviousSaleDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// Trustee sales can be postponed one or more times. The prior sale date is the date the foreclosure was scheduled for prior to the current sale date.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information.
    /// </summary>
    /// <value>Trustee sales can be postponed one or more times. The prior sale date is the date the foreclosure was scheduled for prior to the current sale date.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information. </value>
    [DataMember(Name = "PreviousSaleDate", EmitDefaultValue = false)]
    public PreviousSaleDateEnum PreviousSaleDate { get; set; }


    /// <summary>
    /// Trustee sales can be postponed one or more times. The original sale date is the date the foreclosure sale was initially published to be held on.
    /// </summary>
    /// <value>Trustee sales can be postponed one or more times. The original sale date is the date the foreclosure sale was initially published to be held on. </value>
    [TypeConverter(typeof(CustomEnumConverter<OriginalSaleDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum OriginalSaleDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// Trustee sales can be postponed one or more times. The original sale date is the date the foreclosure sale was initially published to be held on.
    /// </summary>
    /// <value>Trustee sales can be postponed one or more times. The original sale date is the date the foreclosure sale was initially published to be held on. </value>
    [DataMember(Name = "OriginalSaleDate", EmitDefaultValue = false)]
    public OriginalSaleDateEnum OriginalSaleDate { get; set; }

    /// <summary>
    /// The name of the trustee handling the foreclosure.
    /// </summary>
    /// <value>The name of the trustee handling the foreclosure. </value>
    [DataMember(Name = "Trustee", EmitDefaultValue = false)]
    public string Trustee { get; set; }

    /// <summary>
    /// The phone number to call for updated information on the trustee sale, displayed in the format: 916-555-1212
    /// </summary>
    /// <value>The phone number to call for updated information on the trustee sale, displayed in the format: 916-555-1212 </value>
    [DataMember(Name = "TrusteePhone", EmitDefaultValue = false)]
    public string TrusteePhone { get; set; }

    /// <summary>
    /// The name of the foreclosing lender.
    /// </summary>
    /// <value>The name of the foreclosing lender. </value>
    [DataMember(Name = "ForeclosingLender", EmitDefaultValue = false)]
    public string ForeclosingLender { get; set; }

    /// <summary>
    /// The amount of the loan in foreclosure.
    /// </summary>
    /// <value>The amount of the loan in foreclosure. </value>
    [DataMember(Name = "DOTAmount", EmitDefaultValue = false)]
    public string DOTAmount { get; set; }


    /// <summary>
    /// The date the loan document (Deed of Trust) was recorded at the county recorder's office.
    /// </summary>
    /// <value>The date the loan document (Deed of Trust) was recorded at the county recorder's office.  </value>
    [TypeConverter(typeof(CustomEnumConverter<DOTRecDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DOTRecDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date the loan document (Deed of Trust) was recorded at the county recorder&#39;s office.
    /// </summary>
    /// <value>The date the loan document (Deed of Trust) was recorded at the county recorder&#39;s office.  </value>
    [DataMember(Name = "DOTRecDate", EmitDefaultValue = false)]
    public DOTRecDateEnum DOTRecDate { get; set; }

    /// <summary>
    /// Gets or Sets DOTDocNum
    /// </summary>
    [DataMember(Name = "DOTDocNum", EmitDefaultValue = false)]
    public string DOTDocNum { get; set; }


    /// <summary>
    /// The date the document was recorded at the county recorder's office. In some counties this may also be shown as the page.
    /// </summary>
    /// <value>The date the document was recorded at the county recorder's office. In some counties this may also be shown as the page. </value>
    [TypeConverter(typeof(CustomEnumConverter<ForeclosureRecDateEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ForeclosureRecDateEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date the document was recorded at the county recorder&#39;s office. In some counties this may also be shown as the page.
    /// </summary>
    /// <value>The date the document was recorded at the county recorder&#39;s office. In some counties this may also be shown as the page. </value>
    [DataMember(Name = "ForeclosureRecDate", EmitDefaultValue = false)]
    public ForeclosureRecDateEnum ForeclosureRecDate { get; set; }


    /// <summary>
    /// The type of foreclosure document, grouped by judicial and non-judicial foreclosures. In judicial foreclosures the process usually starts with a Lis Pendens or Final Judgement document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Sheriff Sale or, in Florida, the Final Judgement document (Auction). In non-judicial foreclosures the process usually starts with a Notice of Default or Substitution of Trustee document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Trustee Sale (Auction). Be sure to review our Foreclosure Stage criteria which works for both judicial and non-judicial foreclosures and takes into account the current status of the foreclosure as well as the document type.
    /// </summary>
    /// <value>The type of foreclosure document, grouped by judicial and non-judicial foreclosures. In judicial foreclosures the process usually starts with a Lis Pendens or Final Judgement document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Sheriff Sale or, in Florida, the Final Judgement document (Auction). In non-judicial foreclosures the process usually starts with a Notice of Default or Substitution of Trustee document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Trustee Sale (Auction). Be sure to review our Foreclosure Stage criteria which works for both judicial and non-judicial foreclosures and takes into account the current status of the foreclosure as well as the document type. </value>
    [TypeConverter(typeof(CustomEnumConverter<ForeclosureDocTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ForeclosureDocTypeEnum
    {

      /// <summary>
      /// Enum LisPendensEnum for Lis Pendens
      /// </summary>
      [EnumMember(Value = "Lis Pendens")]
      LisPendensEnum = 1,

      /// <summary>
      /// Enum FinalJudgementEnum for Final Judgement
      /// </summary>
      [EnumMember(Value = "Final Judgement")]
      FinalJudgementEnum = 2,

      /// <summary>
      /// Enum FinalJudgementFloridaEnum for Final Judgement Florida
      /// </summary>
      [EnumMember(Value = "Final Judgement Florida")]
      FinalJudgementFloridaEnum = 3,

      /// <summary>
      /// Enum NoticeOfSheriffSaleEnum for Notice of Sheriff Sale
      /// </summary>
      [EnumMember(Value = "Notice of Sheriff Sale")]
      NoticeOfSheriffSaleEnum = 4,

      /// <summary>
      /// Enum NoticeOfDefaultEnum for Notice of Default
      /// </summary>
      [EnumMember(Value = "Notice of Default")]
      NoticeOfDefaultEnum = 5,

      /// <summary>
      /// Enum SubstitutionOfTrusteeEnum for Substitution of Trustee
      /// </summary>
      [EnumMember(Value = "Substitution of Trustee")]
      SubstitutionOfTrusteeEnum = 6,

      /// <summary>
      /// Enum NoticeOfTrusteeSaleEnum for Notice of Trustee Sale
      /// </summary>
      [EnumMember(Value = "Notice of Trustee Sale")]
      NoticeOfTrusteeSaleEnum = 7
    }

    /// <summary>
    /// The type of foreclosure document, grouped by judicial and non-judicial foreclosures. In judicial foreclosures the process usually starts with a Lis Pendens or Final Judgement document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Sheriff Sale or, in Florida, the Final Judgement document (Auction). In non-judicial foreclosures the process usually starts with a Notice of Default or Substitution of Trustee document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Trustee Sale (Auction). Be sure to review our Foreclosure Stage criteria which works for both judicial and non-judicial foreclosures and takes into account the current status of the foreclosure as well as the document type.
    /// </summary>
    /// <value>The type of foreclosure document, grouped by judicial and non-judicial foreclosures. In judicial foreclosures the process usually starts with a Lis Pendens or Final Judgement document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Sheriff Sale or, in Florida, the Final Judgement document (Auction). In non-judicial foreclosures the process usually starts with a Notice of Default or Substitution of Trustee document (Preforeclosure). The foreclosure auction is then scheduled by a Notice of Trustee Sale (Auction). Be sure to review our Foreclosure Stage criteria which works for both judicial and non-judicial foreclosures and takes into account the current status of the foreclosure as well as the document type. </value>
    [DataMember(Name = "ForeclosureDocType", EmitDefaultValue = false)]
    public ForeclosureDocTypeEnum ForeclosureDocType { get; set; }

    /// <summary>
    /// The document number is a unique number assigned by the recorder&#39;s office to identify a particular document.
    /// </summary>
    /// <value>The document number is a unique number assigned by the recorder&#39;s office to identify a particular document. </value>
    [DataMember(Name = "ForeclosureDocNumber", EmitDefaultValue = false)]
    public string ForeclosureDocNumber { get; set; }

    /// <summary>
    /// Recorder&#39;s book, used by some counties to record transactions.
    /// </summary>
    /// <value>Recorder&#39;s book, used by some counties to record transactions. </value>
    [DataMember(Name = "ForeclosureBookNumber", EmitDefaultValue = false)]
    public string ForeclosureBookNumber { get; set; }

    /// <summary>
    /// Page in recorder&#39;s book, used by some counties to record transactions.
    /// </summary>
    /// <value>Page in recorder&#39;s book, used by some counties to record transactions. </value>
    [DataMember(Name = "ForeclosurePageNumber", EmitDefaultValue = false)]
    public string ForeclosurePageNumber { get; set; }

    /// <summary>
    /// Name of attorney involved in the preparation of the notice.
    /// </summary>
    /// <value>Name of attorney involved in the preparation of the notice. </value>
    [DataMember(Name = "Attorney", EmitDefaultValue = false)]
    public string Attorney { get; set; }

    /// <summary>
    /// Telephone number for attorney involved in preparation of the notice.
    /// </summary>
    /// <value>Telephone number for attorney involved in preparation of the notice. </value>
    [DataMember(Name = "AttorneyPhone", EmitDefaultValue = false)]
    public string AttorneyPhone { get; set; }

    /// <summary>
    /// Case number assigned by courthouse.
    /// </summary>
    /// <value>Case number assigned by courthouse. </value>
    [DataMember(Name = "CaseNumber", EmitDefaultValue = false)]
    public string CaseNumber { get; set; }


    /// <summary>
    /// One of the four following types of lawsuits that is being noticed as pending. 1) Foreclosure on mortgage, 2) foreclosure on HOA lien, 3) foreclosure on non-HOA property lien, or 4) other non-foreclosure legal action.
    /// </summary>
    /// <value>One of the four following types of lawsuits that is being noticed as pending. 1) Foreclosure on mortgage, 2) foreclosure on HOA lien, 3) foreclosure on non-HOA property lien, or 4) other non-foreclosure legal action. </value>
    [TypeConverter(typeof(CustomEnumConverter<LisPendensTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum LisPendensTypeEnum
    {

      /// <summary>
      /// Enum NonForeclosureEnum for Non-Foreclosure
      /// </summary>
      [EnumMember(Value = "Non-Foreclosure")]
      NonForeclosureEnum = 1,

      /// <summary>
      /// Enum MortgageForeclosureEnum for Mortgage Foreclosure
      /// </summary>
      [EnumMember(Value = "Mortgage Foreclosure")]
      MortgageForeclosureEnum = 2,

      /// <summary>
      /// Enum HOAForeclosureEnum for HOA Foreclosure
      /// </summary>
      [EnumMember(Value = "HOA Foreclosure")]
      HOAForeclosureEnum = 3,

      /// <summary>
      /// Enum LienForeclosureEnum for Lien Foreclosure
      /// </summary>
      [EnumMember(Value = "Lien Foreclosure")]
      LienForeclosureEnum = 4
    }

    /// <summary>
    /// One of the four following types of lawsuits that is being noticed as pending. 1) Foreclosure on mortgage, 2) foreclosure on HOA lien, 3) foreclosure on non-HOA property lien, or 4) other non-foreclosure legal action.
    /// </summary>
    /// <value>One of the four following types of lawsuits that is being noticed as pending. 1) Foreclosure on mortgage, 2) foreclosure on HOA lien, 3) foreclosure on non-HOA property lien, or 4) other non-foreclosure legal action. </value>
    [DataMember(Name = "LisPendensType", EmitDefaultValue = false)]
    public LisPendensTypeEnum LisPendensType { get; set; }

    /// <summary>
    /// The opening bid as a percentage of the estimated property value (AVM).
    /// </summary>
    /// <value>The opening bid as a percentage of the estimated property value (AVM).  </value>
    [DataMember(Name = "OpeningBidDividedByAVM", EmitDefaultValue = false)]
    public decimal OpeningBidDividedByAVM { get; set; }

    /// <summary>
    /// The amount shown in the notice of default which is required to bring the loan current as of the default date.
    /// </summary>
    /// <value>The amount shown in the notice of default which is required to bring the loan current as of the default date. </value>
    [DataMember(Name = "DefaultAmount", EmitDefaultValue = false)]
    public string DefaultAmount { get; set; }


    /// <summary>
    /// The date on which the default amount was calculated.
    /// </summary>
    /// <value>The date on which the default amount was calculated. </value>
    [TypeConverter(typeof(CustomEnumConverter<DefaultAsOfEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum DefaultAsOfEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// The date on which the default amount was calculated.
    /// </summary>
    /// <value>The date on which the default amount was calculated. </value>
    [DataMember(Name = "DefaultAsOf", EmitDefaultValue = false)]
    public DefaultAsOfEnum DefaultAsOf { get; set; }

    /// <summary>
    /// Gets or Sets TrusteeAddress
    /// </summary>
    [DataMember(Name = "TrusteeAddress", EmitDefaultValue = false)]
    public string TrusteeAddress { get; set; }

    /// <summary>
    /// Gets or Sets TrusteeCityStZip
    /// </summary>
    [DataMember(Name = "TrusteeCityStZip", EmitDefaultValue = false)]
    public string TrusteeCityStZip { get; set; }

    /// <summary>
    /// Gets or Sets LenderAddress
    /// </summary>
    [DataMember(Name = "LenderAddress", EmitDefaultValue = false)]
    public string LenderAddress { get; set; }

    /// <summary>
    /// Gets or Sets LenderCityStZip
    /// </summary>
    [DataMember(Name = "LenderCityStZip", EmitDefaultValue = false)]
    public string LenderCityStZip { get; set; }


    /// <summary>
    /// For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.<br>For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information.
    /// </summary>
    /// <value>For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.<br>For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.<br><br>Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our <a target=\"_blank\" href=\"https://www.propertyradar.com/coverage\">coverage page</a> and <a target=\"_blank\" href=\"https://www.foreclosureradar.com/#pricing\">ForeclosureRadar pricing</a> for more information. </value>
    [TypeConverter(typeof(CustomEnumConverter<SaleDateRelativeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SaleDateRelativeEnum
    {

      /// <summary>
      /// Enum TodayEnum for Today
      /// </summary>
      [EnumMember(Value = "Today")]
      TodayEnum = 1,

      /// <summary>
      /// Enum TomorrowEnum for Tomorrow
      /// </summary>
      [EnumMember(Value = "Tomorrow")]
      TomorrowEnum = 2,

      /// <summary>
      /// Enum YesterdayEnum for Yesterday
      /// </summary>
      [EnumMember(Value = "Yesterday")]
      YesterdayEnum = 3,

      /// <summary>
      /// Enum ThisWeekEnum for This Week
      /// </summary>
      [EnumMember(Value = "This Week")]
      ThisWeekEnum = 4,

      /// <summary>
      /// Enum ThisMonthEnum for This Month
      /// </summary>
      [EnumMember(Value = "This Month")]
      ThisMonthEnum = 5,

      /// <summary>
      /// Enum ThisQuarterEnum for This Quarter
      /// </summary>
      [EnumMember(Value = "This Quarter")]
      ThisQuarterEnum = 6,

      /// <summary>
      /// Enum ThisYearEnum for This Year
      /// </summary>
      [EnumMember(Value = "This Year")]
      ThisYearEnum = 7,

      /// <summary>
      /// Enum LastWeekEnum for Last Week
      /// </summary>
      [EnumMember(Value = "Last Week")]
      LastWeekEnum = 8,

      /// <summary>
      /// Enum LastMonthEnum for Last Month
      /// </summary>
      [EnumMember(Value = "Last Month")]
      LastMonthEnum = 9,

      /// <summary>
      /// Enum LastQuarterEnum for Last Quarter
      /// </summary>
      [EnumMember(Value = "Last Quarter")]
      LastQuarterEnum = 10,

      /// <summary>
      /// Enum LastYearEnum for Last Year
      /// </summary>
      [EnumMember(Value = "Last Year")]
      LastYearEnum = 11,

      /// <summary>
      /// Enum Last7DaysEnum for Last 7 Days
      /// </summary>
      [EnumMember(Value = "Last 7 Days")]
      Last7DaysEnum = 12,

      /// <summary>
      /// Enum Last30DaysEnum for Last 30 Days
      /// </summary>
      [EnumMember(Value = "Last 30 Days")]
      Last30DaysEnum = 13,

      /// <summary>
      /// Enum Last90DaysEnum for Last 90 Days
      /// </summary>
      [EnumMember(Value = "Last 90 Days")]
      Last90DaysEnum = 14,

      /// <summary>
      /// Enum Last365DaysEnum for Last 365 Days
      /// </summary>
      [EnumMember(Value = "Last 365 Days")]
      Last365DaysEnum = 15,

      /// <summary>
      /// Enum NextWeekEnum for Next Week
      /// </summary>
      [EnumMember(Value = "Next Week")]
      NextWeekEnum = 16,

      /// <summary>
      /// Enum NextMonthEnum for Next Month
      /// </summary>
      [EnumMember(Value = "Next Month")]
      NextMonthEnum = 17,

      /// <summary>
      /// Enum NextQuarterEnum for Next Quarter
      /// </summary>
      [EnumMember(Value = "Next Quarter")]
      NextQuarterEnum = 18,

      /// <summary>
      /// Enum NextYearEnum for Next Year
      /// </summary>
      [EnumMember(Value = "Next Year")]
      NextYearEnum = 19,

      /// <summary>
      /// Enum Next7DaysEnum for Next 7 Days
      /// </summary>
      [EnumMember(Value = "Next 7 Days")]
      Next7DaysEnum = 20,

      /// <summary>
      /// Enum Next30DaysEnum for Next 30 Days
      /// </summary>
      [EnumMember(Value = "Next 30 Days")]
      Next30DaysEnum = 21,

      /// <summary>
      /// Enum Next90DaysEnum for Next 90 Days
      /// </summary>
      [EnumMember(Value = "Next 90 Days")]
      Next90DaysEnum = 22,

      /// <summary>
      /// Enum Next365DaysEnum for Next 365 Days
      /// </summary>
      [EnumMember(Value = "Next 365 Days")]
      Next365DaysEnum = 23
    }

    /// <summary>
    /// For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.&lt;br&gt;For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information.
    /// </summary>
    /// <value>For notices of trustee sale: the date on which the sale is currently scheduled to occur for active foreclosures, or the last scheduled date for sales that have occurred or been cancelled.&lt;br&gt;For notices of default (preforeclosures): this is the estimated date of when the sale could first occur.&lt;br&gt;&lt;br&gt;Sale Tracking criteria are only available in the counties where we offer coverage for and you have subscribed to our Trustee Sale Tracking feature. Please see our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.propertyradar.com/coverage\&quot;&gt;coverage page&lt;/a&gt; and &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.foreclosureradar.com/#pricing\&quot;&gt;ForeclosureRadar pricing&lt;/a&gt; for more information. </value>
    [DataMember(Name = "SaleDateRelative", EmitDefaultValue = false)]
    public SaleDateRelativeEnum SaleDateRelative { get; set; }

    /// <summary>
    /// Gets or Sets Transactions
    /// </summary>
    [DataMember(Name = "Transactions", EmitDefaultValue = false)]
    public string Transactions { get; set; }

    /// <summary>
    /// Gets or Sets CountyRecorderLink
    /// </summary>
    [DataMember(Name = "CountyRecorderLink", EmitDefaultValue = false)]
    public string CountyRecorderLink { get; set; }

    /// <summary>
    /// Gets or Sets DisclaimerDetails
    /// </summary>
    [DataMember(Name = "DisclaimerDetails", EmitDefaultValue = false)]
    public string DisclaimerDetails { get; set; }

    /// <summary>
    /// Gets or Sets CompsSales
    /// </summary>
    [DataMember(Name = "CompsSales", EmitDefaultValue = false)]
    public string CompsSales { get; set; }

    /// <summary>
    /// Gets or Sets CompsListingsForSale
    /// </summary>
    [DataMember(Name = "CompsListingsForSale", EmitDefaultValue = false)]
    public string CompsListingsForSale { get; set; }

    /// <summary>
    /// HATEOS links for this resource.  http://stateless.co/hal_specification.html
    /// </summary>
    /// <value>HATEOS links for this resource.  http://stateless.co/hal_specification.html</value>
    [DataMember(Name = "_links", EmitDefaultValue = false)]
    public string Links { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class GETPropertiesRadarID200ResponseResultsInner {\n");
      sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
      sb.Append("  Longitude: ").Append(Longitude).Append("\n");
      sb.Append("  Latitude: ").Append(Latitude).Append("\n");
      sb.Append("  State: ").Append(State).Append("\n");
      sb.Append("  FIPS: ").Append(FIPS).Append("\n");
      sb.Append("  County: ").Append(County).Append("\n");
      sb.Append("  City: ").Append(City).Append("\n");
      sb.Append("  ZipFive: ").Append(ZipFive).Append("\n");
      sb.Append("  CarrierRoute: ").Append(CarrierRoute).Append("\n");
      sb.Append("  SiteCongressionalDistrict: ").Append(SiteCongressionalDistrict).Append("\n");
      sb.Append("  SchoolDistrict: ").Append(SchoolDistrict).Append("\n");
      sb.Append("  FullAddress: ").Append(FullAddress).Append("\n");
      sb.Append("  Address: ").Append(Address).Append("\n");
      sb.Append("  IsStreetNumberOdd: ").Append(IsStreetNumberOdd).Append("\n");
      sb.Append("  SiteStreetName: ").Append(SiteStreetName).Append("\n");
      sb.Append("  RadarID: ").Append(RadarID).Append("\n");
      sb.Append("  APN: ").Append(APN).Append("\n");
      sb.Append("  Subdivision: ").Append(Subdivision).Append("\n");
      sb.Append("  Zoning: ").Append(Zoning).Append("\n");
      sb.Append("  TaxRateArea: ").Append(TaxRateArea).Append("\n");
      sb.Append("  TaxSearchURL: ").Append(TaxSearchURL).Append("\n");
      sb.Append("  AssessorURL: ").Append(AssessorURL).Append("\n");
      sb.Append("  RecorderSearchURL: ").Append(RecorderSearchURL).Append("\n");
      sb.Append("  Range: ").Append(Range).Append("\n");
      sb.Append("  Township: ").Append(Township).Append("\n");
      sb.Append("  Section: ").Append(Section).Append("\n");
      sb.Append("  LegalBookPage: ").Append(LegalBookPage).Append("\n");
      sb.Append("  LegalBlock: ").Append(LegalBlock).Append("\n");
      sb.Append("  LegalLots: ").Append(LegalLots).Append("\n");
      sb.Append("  LegalTractNumber: ").Append(LegalTractNumber).Append("\n");
      sb.Append("  FullLegal: ").Append(FullLegal).Append("\n");
      sb.Append("  Taxpayer: ").Append(Taxpayer).Append("\n");
      sb.Append("  DirectionsURL: ").Append(DirectionsURL).Append("\n");
      sb.Append("  CensusTract: ").Append(CensusTract).Append("\n");
      sb.Append("  CensusBlock: ").Append(CensusBlock).Append("\n");
      sb.Append("  PType: ").Append(PType).Append("\n");
      sb.Append("  AdvancedPropertyType: ").Append(AdvancedPropertyType).Append("\n");
      sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
      sb.Append("  Beds: ").Append(Beds).Append("\n");
      sb.Append("  Baths: ").Append(Baths).Append("\n");
      sb.Append("  SqFt: ").Append(SqFt).Append("\n");
      sb.Append("  LotSize: ").Append(LotSize).Append("\n");
      sb.Append("  LotSizeAcres: ").Append(LotSizeAcres).Append("\n");
      sb.Append("  YearBuilt: ").Append(YearBuilt).Append("\n");
      sb.Append("  Units: ").Append(Units).Append("\n");
      sb.Append("  Rooms: ").Append(Rooms).Append("\n");
      sb.Append("  Stories: ").Append(Stories).Append("\n");
      sb.Append("  GarageSize: ").Append(GarageSize).Append("\n");
      sb.Append("  HVAC: ").Append(HVAC).Append("\n");
      sb.Append("  AirCond: ").Append(AirCond).Append("\n");
      sb.Append("  Heating: ").Append(Heating).Append("\n");
      sb.Append("  Pool: ").Append(Pool).Append("\n");
      sb.Append("  Fireplace: ").Append(Fireplace).Append("\n");
      sb.Append("  BasementType: ").Append(BasementType).Append("\n");
      sb.Append("  BasementFinishType: ").Append(BasementFinishType).Append("\n");
      sb.Append("  BasementSqFt: ").Append(BasementSqFt).Append("\n");
      sb.Append("  ImprovementCondition: ").Append(ImprovementCondition).Append("\n");
      sb.Append("  BuildingQuality: ").Append(BuildingQuality).Append("\n");
      sb.Append("  ConstructionType: ").Append(ConstructionType).Append("\n");
      sb.Append("  FoundationType: ").Append(FoundationType).Append("\n");
      sb.Append("  FrameType: ").Append(FrameType).Append("\n");
      sb.Append("  ExteriorWallType: ").Append(ExteriorWallType).Append("\n");
      sb.Append("  FloorType: ").Append(FloorType).Append("\n");
      sb.Append("  RoofType: ").Append(RoofType).Append("\n");
      sb.Append("  UtilitiesType: ").Append(UtilitiesType).Append("\n");
      sb.Append("  ViewType: ").Append(ViewType).Append("\n");
      sb.Append("  LocationInfluence: ").Append(LocationInfluence).Append("\n");
      sb.Append("  GarageSqFt: ").Append(GarageSqFt).Append("\n");
      sb.Append("  LotFrontFootage: ").Append(LotFrontFootage).Append("\n");
      sb.Append("  LotDepthFootage: ").Append(LotDepthFootage).Append("\n");
      sb.Append("  IsSameMailingOrExempt: ").Append(IsSameMailingOrExempt).Append("\n");
      sb.Append("  IsSiteVacant: ").Append(IsSiteVacant).Append("\n");
      sb.Append("  OwnershipType: ").Append(OwnershipType).Append("\n");
      sb.Append("  Owner: ").Append(Owner).Append("\n");
      sb.Append("  Owner2: ").Append(Owner2).Append("\n");
      sb.Append("  OwnerFirstName: ").Append(OwnerFirstName).Append("\n");
      sb.Append("  OwnerLastName: ").Append(OwnerLastName).Append("\n");
      sb.Append("  OwnerSpouseFirstName: ").Append(OwnerSpouseFirstName).Append("\n");
      sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
      sb.Append("  OwnerCity: ").Append(OwnerCity).Append("\n");
      sb.Append("  OwnerZipFive: ").Append(OwnerZipFive).Append("\n");
      sb.Append("  OwnerState: ").Append(OwnerState).Append("\n");
      sb.Append("  OwnerCityStateZip: ").Append(OwnerCityStateZip).Append("\n");
      sb.Append("  IsMailVacant: ").Append(IsMailVacant).Append("\n");
      sb.Append("  MailCongressionalDistrict: ").Append(MailCongressionalDistrict).Append("\n");
      sb.Append("  IsSameMailing: ").Append(IsSameMailing).Append("\n");
      sb.Append("  AVM: ").Append(AVM).Append("\n");
      sb.Append("  ValuePerSF: ").Append(ValuePerSF).Append("\n");
      sb.Append("  AssessedValue: ").Append(AssessedValue).Append("\n");
      sb.Append("  EstimatedRent: ").Append(EstimatedRent).Append("\n");
      sb.Append("  EstimatedTaxRate: ").Append(EstimatedTaxRate).Append("\n");
      sb.Append("  OwnerExemption: ").Append(OwnerExemption).Append("\n");
      sb.Append("  LandValue: ").Append(LandValue).Append("\n");
      sb.Append("  ImpValue: ").Append(ImpValue).Append("\n");
      sb.Append("  AssessedYear: ").Append(AssessedYear).Append("\n");
      sb.Append("  AnnualTaxes: ").Append(AnnualTaxes).Append("\n");
      sb.Append("  EquityPercent: ").Append(EquityPercent).Append("\n");
      sb.Append("  CLTV: ").Append(CLTV).Append("\n");
      sb.Append("  TotalLoanBalance: ").Append(TotalLoanBalance).Append("\n");
      sb.Append("  AvailableEquity: ").Append(AvailableEquity).Append("\n");
      sb.Append("  NumberLoans: ").Append(NumberLoans).Append("\n");
      sb.Append("  FirstPurpose: ").Append(FirstPurpose).Append("\n");
      sb.Append("  FirstLoanType: ").Append(FirstLoanType).Append("\n");
      sb.Append("  FirstDate: ").Append(FirstDate).Append("\n");
      sb.Append("  FirstConcurrent: ").Append(FirstConcurrent).Append("\n");
      sb.Append("  FirstAmount: ").Append(FirstAmount).Append("\n");
      sb.Append("  FirstCashOut: ").Append(FirstCashOut).Append("\n");
      sb.Append("  FirstAmountLTV: ").Append(FirstAmountLTV).Append("\n");
      sb.Append("  FirstTermInYears: ").Append(FirstTermInYears).Append("\n");
      sb.Append("  FirstLenderOriginal: ").Append(FirstLenderOriginal).Append("\n");
      sb.Append("  FirstRateType: ").Append(FirstRateType).Append("\n");
      sb.Append("  FirstRate: ").Append(FirstRate).Append("\n");
      sb.Append("  SecondPurpose: ").Append(SecondPurpose).Append("\n");
      sb.Append("  SecondLoanType: ").Append(SecondLoanType).Append("\n");
      sb.Append("  SecondDate: ").Append(SecondDate).Append("\n");
      sb.Append("  SecondConcurrent: ").Append(SecondConcurrent).Append("\n");
      sb.Append("  SecondAmount: ").Append(SecondAmount).Append("\n");
      sb.Append("  SecondCashOut: ").Append(SecondCashOut).Append("\n");
      sb.Append("  SecondAmountLTV: ").Append(SecondAmountLTV).Append("\n");
      sb.Append("  SecondTermInYears: ").Append(SecondTermInYears).Append("\n");
      sb.Append("  SecondLenderOriginal: ").Append(SecondLenderOriginal).Append("\n");
      sb.Append("  SecondRateType: ").Append(SecondRateType).Append("\n");
      sb.Append("  SecondRate: ").Append(SecondRate).Append("\n");
      sb.Append("  ForeclosureSelector: ").Append(ForeclosureSelector).Append("\n");
      sb.Append("  NoticeKey: ").Append(NoticeKey).Append("\n");
      sb.Append("  InForeclosure: ").Append(InForeclosure).Append("\n");
      sb.Append("  InTaxDelinquency: ").Append(InTaxDelinquency).Append("\n");
      sb.Append("  DelinquentAmount: ").Append(DelinquentAmount).Append("\n");
      sb.Append("  DelinquentYear: ").Append(DelinquentYear).Append("\n");
      sb.Append("  NumberDelinquentInstallments: ").Append(NumberDelinquentInstallments).Append("\n");
      sb.Append("  TaxYear: ").Append(TaxYear).Append("\n");
      sb.Append("  TaxYearBegin: ").Append(TaxYearBegin).Append("\n");
      sb.Append("  TaxYearEnd: ").Append(TaxYearEnd).Append("\n");
      sb.Append("  FirstPaymentInstallment: ").Append(FirstPaymentInstallment).Append("\n");
      sb.Append("  FirstInstallmentAmount: ").Append(FirstInstallmentAmount).Append("\n");
      sb.Append("  FirstInstallmentPaid: ").Append(FirstInstallmentPaid).Append("\n");
      sb.Append("  SecondPaymentInstallment: ").Append(SecondPaymentInstallment).Append("\n");
      sb.Append("  SecondInstallmentAmount: ").Append(SecondInstallmentAmount).Append("\n");
      sb.Append("  SecondInstallmentPaid: ").Append(SecondInstallmentPaid).Append("\n");
      sb.Append("  ThirdPaymentInstallment: ").Append(ThirdPaymentInstallment).Append("\n");
      sb.Append("  ThirdInstallmentAmount: ").Append(ThirdInstallmentAmount).Append("\n");
      sb.Append("  ThirdInstallmentPaid: ").Append(ThirdInstallmentPaid).Append("\n");
      sb.Append("  FourthPaymentInstallment: ").Append(FourthPaymentInstallment).Append("\n");
      sb.Append("  FourthInstallmentAmount: ").Append(FourthInstallmentAmount).Append("\n");
      sb.Append("  FourthInstallmentPaid: ").Append(FourthInstallmentPaid).Append("\n");
      sb.Append("  LastTransferRecDate: ").Append(LastTransferRecDate).Append("\n");
      sb.Append("  LastTransferType: ").Append(LastTransferType).Append("\n");
      sb.Append("  LastTransferValue: ").Append(LastTransferValue).Append("\n");
      sb.Append("  LastTransferDownPayment: ").Append(LastTransferDownPayment).Append("\n");
      sb.Append("  LastTransferDownPaymentPercent: ").Append(LastTransferDownPaymentPercent).Append("\n");
      sb.Append("  LastTransferSeller: ").Append(LastTransferSeller).Append("\n");
      sb.Append("  PriorTransferChangeInPrice: ").Append(PriorTransferChangeInPrice).Append("\n");
      sb.Append("  PriorTransferChangeInPricePercent: ").Append(PriorTransferChangeInPricePercent).Append("\n");
      sb.Append("  PriorTransferMonthsSince: ").Append(PriorTransferMonthsSince).Append("\n");
      sb.Append("  ListingStatus: ").Append(ListingStatus).Append("\n");
      sb.Append("  ListingType: ").Append(ListingType).Append("\n");
      sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
      sb.Append("  ListingPricePerSqFt: ").Append(ListingPricePerSqFt).Append("\n");
      sb.Append("  ListingDate: ").Append(ListingDate).Append("\n");
      sb.Append("  DaysOnMarket: ").Append(DaysOnMarket).Append("\n");
      sb.Append("  InterestLevel: ").Append(InterestLevel).Append("\n");
      sb.Append("  StatusLevel: ").Append(StatusLevel).Append("\n");
      sb.Append("  IsListedForSale: ").Append(IsListedForSale).Append("\n");
      sb.Append("  Persons: ").Append(Persons).Append("\n");
      sb.Append("  PropertyHasOpenPersonLiens: ").Append(PropertyHasOpenPersonLiens).Append("\n");
      sb.Append("  PropertyHasOpenLiens: ").Append(PropertyHasOpenLiens).Append("\n");
      sb.Append("  InDivorceProperty: ").Append(InDivorceProperty).Append("\n");
      sb.Append("  InBankruptcyProperty: ").Append(InBankruptcyProperty).Append("\n");
      sb.Append("  MyValue: ").Append(MyValue).Append("\n");
      sb.Append("  MyValuePerSqFt: ").Append(MyValuePerSqFt).Append("\n");
      sb.Append("  MyValueDate: ").Append(MyValueDate).Append("\n");
      sb.Append("  AVMPerSqFt: ").Append(AVMPerSqFt).Append("\n");
      sb.Append("  AVMAsOf: ").Append(AVMAsOf).Append("\n");
      sb.Append("  AVMReliability: ").Append(AVMReliability).Append("\n");
      sb.Append("  CompSalesPrice: ").Append(CompSalesPrice).Append("\n");
      sb.Append("  CompSalesPricePerSqFt: ").Append(CompSalesPricePerSqFt).Append("\n");
      sb.Append("  CompSalesPriceRange: ").Append(CompSalesPriceRange).Append("\n");
      sb.Append("  CompSalesDate: ").Append(CompSalesDate).Append("\n");
      sb.Append("  CompListingPrice: ").Append(CompListingPrice).Append("\n");
      sb.Append("  CompListingPricePerSqFt: ").Append(CompListingPricePerSqFt).Append("\n");
      sb.Append("  CompListingPriceRange: ").Append(CompListingPriceRange).Append("\n");
      sb.Append("  CompListingDate: ").Append(CompListingDate).Append("\n");
      sb.Append("  RentBreakEven: ").Append(RentBreakEven).Append("\n");
      sb.Append("  RentBreakEvenPerSqFt: ").Append(RentBreakEvenPerSqFt).Append("\n");
      sb.Append("  RentBreakEvenDate: ").Append(RentBreakEvenDate).Append("\n");
      sb.Append("  MyRent: ").Append(MyRent).Append("\n");
      sb.Append("  MyRentPerSqFt: ").Append(MyRentPerSqFt).Append("\n");
      sb.Append("  MyRentDate: ").Append(MyRentDate).Append("\n");
      sb.Append("  HUDRent: ").Append(HUDRent).Append("\n");
      sb.Append("  HUDRentPerSqFt: ").Append(HUDRentPerSqFt).Append("\n");
      sb.Append("  HUDRentDate: ").Append(HUDRentDate).Append("\n");
      sb.Append("  ValueBreakEven: ").Append(ValueBreakEven).Append("\n");
      sb.Append("  ValueBreakEvenPerSqFt: ").Append(ValueBreakEvenPerSqFt).Append("\n");
      sb.Append("  ValueBreakEvenDate: ").Append(ValueBreakEvenDate).Append("\n");
      sb.Append("  Comparables: ").Append(Comparables).Append("\n");
      sb.Append("  PhotoURL1: ").Append(PhotoURL1).Append("\n");
      sb.Append("  PrimaryName: ").Append(PrimaryName).Append("\n");
      sb.Append("  PrimaryFirstName: ").Append(PrimaryFirstName).Append("\n");
      sb.Append("  PrimaryLastName: ").Append(PrimaryLastName).Append("\n");
      sb.Append("  PrimaryPhone1Status: ").Append(PrimaryPhone1Status).Append("\n");
      sb.Append("  PrimaryMobilePhone1Status: ").Append(PrimaryMobilePhone1Status).Append("\n");
      sb.Append("  SecondaryPhone1Status: ").Append(SecondaryPhone1Status).Append("\n");
      sb.Append("  SecondaryMobilePhone1Status: ").Append(SecondaryMobilePhone1Status).Append("\n");
      sb.Append("  PrimaryPhone1Hashed: ").Append(PrimaryPhone1Hashed).Append("\n");
      sb.Append("  PrimaryEmail1Hashed: ").Append(PrimaryEmail1Hashed).Append("\n");
      sb.Append("  SecondaryName: ").Append(SecondaryName).Append("\n");
      sb.Append("  SecondaryFirstName: ").Append(SecondaryFirstName).Append("\n");
      sb.Append("  SecondaryLastName: ").Append(SecondaryLastName).Append("\n");
      sb.Append("  SecondaryPhone1Hashed: ").Append(SecondaryPhone1Hashed).Append("\n");
      sb.Append("  SecondaryEmail1Hashed: ").Append(SecondaryEmail1Hashed).Append("\n");
      sb.Append("  PhoneAvailability: ").Append(PhoneAvailability).Append("\n");
      sb.Append("  EmailAvailability: ").Append(EmailAvailability).Append("\n");
      sb.Append("  PropertyURL: ").Append(PropertyURL).Append("\n");
      sb.Append("  FloodZone: ").Append(FloodZone).Append("\n");
      sb.Append("  FloodZoneRisk: ").Append(FloodZoneRisk).Append("\n");
      sb.Append("  FloodMapDate: ").Append(FloodMapDate).Append("\n");
      sb.Append("  FloodMapNumber: ").Append(FloodMapNumber).Append("\n");
      sb.Append("  ForeclosureStage: ").Append(ForeclosureStage).Append("\n");
      sb.Append("  SaleTime: ").Append(SaleTime).Append("\n");
      sb.Append("  SalePlace: ").Append(SalePlace).Append("\n");
      sb.Append("  SaleAmount: ").Append(SaleAmount).Append("\n");
      sb.Append("  OpeningBid: ").Append(OpeningBid).Append("\n");
      sb.Append("  WinningBid: ").Append(WinningBid).Append("\n");
      sb.Append("  DOTPosition: ").Append(DOTPosition).Append("\n");
      sb.Append("  SaleDate: ").Append(SaleDate).Append("\n");
      sb.Append("  PostReason: ").Append(PostReason).Append("\n");
      sb.Append("  TrusteeSaleNum: ").Append(TrusteeSaleNum).Append("\n");
      sb.Append("  PreviousSaleDate: ").Append(PreviousSaleDate).Append("\n");
      sb.Append("  OriginalSaleDate: ").Append(OriginalSaleDate).Append("\n");
      sb.Append("  Trustee: ").Append(Trustee).Append("\n");
      sb.Append("  TrusteePhone: ").Append(TrusteePhone).Append("\n");
      sb.Append("  ForeclosingLender: ").Append(ForeclosingLender).Append("\n");
      sb.Append("  DOTAmount: ").Append(DOTAmount).Append("\n");
      sb.Append("  DOTRecDate: ").Append(DOTRecDate).Append("\n");
      sb.Append("  DOTDocNum: ").Append(DOTDocNum).Append("\n");
      sb.Append("  ForeclosureRecDate: ").Append(ForeclosureRecDate).Append("\n");
      sb.Append("  ForeclosureDocType: ").Append(ForeclosureDocType).Append("\n");
      sb.Append("  ForeclosureDocNumber: ").Append(ForeclosureDocNumber).Append("\n");
      sb.Append("  ForeclosureBookNumber: ").Append(ForeclosureBookNumber).Append("\n");
      sb.Append("  ForeclosurePageNumber: ").Append(ForeclosurePageNumber).Append("\n");
      sb.Append("  Attorney: ").Append(Attorney).Append("\n");
      sb.Append("  AttorneyPhone: ").Append(AttorneyPhone).Append("\n");
      sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
      sb.Append("  LisPendensType: ").Append(LisPendensType).Append("\n");
      sb.Append("  OpeningBidDividedByAVM: ").Append(OpeningBidDividedByAVM).Append("\n");
      sb.Append("  DefaultAmount: ").Append(DefaultAmount).Append("\n");
      sb.Append("  DefaultAsOf: ").Append(DefaultAsOf).Append("\n");
      sb.Append("  TrusteeAddress: ").Append(TrusteeAddress).Append("\n");
      sb.Append("  TrusteeCityStZip: ").Append(TrusteeCityStZip).Append("\n");
      sb.Append("  LenderAddress: ").Append(LenderAddress).Append("\n");
      sb.Append("  LenderCityStZip: ").Append(LenderCityStZip).Append("\n");
      sb.Append("  SaleDateRelative: ").Append(SaleDateRelative).Append("\n");
      sb.Append("  Transactions: ").Append(Transactions).Append("\n");
      sb.Append("  CountyRecorderLink: ").Append(CountyRecorderLink).Append("\n");
      sb.Append("  DisclaimerDetails: ").Append(DisclaimerDetails).Append("\n");
      sb.Append("  CompsSales: ").Append(CompsSales).Append("\n");
      sb.Append("  CompsListingsForSale: ").Append(CompsListingsForSale).Append("\n");
      sb.Append("  Links: ").Append(Links).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      if (obj is null) return false;
      if (ReferenceEquals(this, obj)) return true;
      return obj.GetType() == GetType() && Equals((GETPropertiesRadarID200ResponseResultsInner)obj);
    }

    /// <summary>
    /// Returns true if GETPropertiesRadarID200ResponseResultsInner instances are equal
    /// </summary>
    /// <param name="other">Instance of GETPropertiesRadarID200ResponseResultsInner to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(GETPropertiesRadarID200ResponseResultsInner other)
    {
      if (other is null) return false;
      if (ReferenceEquals(this, other)) return true;

      return
          (
              PropertyKey == other.PropertyKey ||

              PropertyKey.Equals(other.PropertyKey)
          ) &&
          (
              Longitude == other.Longitude ||

              Longitude.Equals(other.Longitude)
          ) &&
          (
              Latitude == other.Latitude ||

              Latitude.Equals(other.Latitude)
          ) &&
          (
              State == other.State ||

              State.Equals(other.State)
          ) &&
          (
              FIPS == other.FIPS ||
              FIPS != null &&
              FIPS.Equals(other.FIPS)
          ) &&
          (
              County == other.County ||
              County != null &&
              County.Equals(other.County)
          ) &&
          (
              City == other.City ||
              City != null &&
              City.Equals(other.City)
          ) &&
          (
              ZipFive == other.ZipFive ||

              ZipFive.Equals(other.ZipFive)
          ) &&
          (
              CarrierRoute == other.CarrierRoute ||
              CarrierRoute != null &&
              CarrierRoute.Equals(other.CarrierRoute)
          ) &&
          (
              SiteCongressionalDistrict == other.SiteCongressionalDistrict ||

              SiteCongressionalDistrict.Equals(other.SiteCongressionalDistrict)
          ) &&
          (
              SchoolDistrict == other.SchoolDistrict ||
              SchoolDistrict != null &&
              SchoolDistrict.Equals(other.SchoolDistrict)
          ) &&
          (
              FullAddress == other.FullAddress ||
              FullAddress != null &&
              FullAddress.Equals(other.FullAddress)
          ) &&
          (
              Address == other.Address ||
              Address != null &&
              Address.Equals(other.Address)
          ) &&
          (
              IsStreetNumberOdd == other.IsStreetNumberOdd ||

              IsStreetNumberOdd.Equals(other.IsStreetNumberOdd)
          ) &&
          (
              SiteStreetName == other.SiteStreetName ||
              SiteStreetName != null &&
              SiteStreetName.Equals(other.SiteStreetName)
          ) &&
          (
              RadarID == other.RadarID ||
              RadarID != null &&
              RadarID.Equals(other.RadarID)
          ) &&
          (
              APN == other.APN ||
              APN != null &&
              APN.Equals(other.APN)
          ) &&
          (
              Subdivision == other.Subdivision ||
              Subdivision != null &&
              Subdivision.Equals(other.Subdivision)
          ) &&
          (
              Zoning == other.Zoning ||
              Zoning != null &&
              Zoning.Equals(other.Zoning)
          ) &&
          (
              TaxRateArea == other.TaxRateArea ||
              TaxRateArea != null &&
              TaxRateArea.Equals(other.TaxRateArea)
          ) &&
          (
              TaxSearchURL == other.TaxSearchURL ||
              TaxSearchURL != null &&
              TaxSearchURL.Equals(other.TaxSearchURL)
          ) &&
          (
              AssessorURL == other.AssessorURL ||
              AssessorURL != null &&
              AssessorURL.Equals(other.AssessorURL)
          ) &&
          (
              RecorderSearchURL == other.RecorderSearchURL ||
              RecorderSearchURL != null &&
              RecorderSearchURL.Equals(other.RecorderSearchURL)
          ) &&
          (
              Range == other.Range ||
              Range != null &&
              Range.Equals(other.Range)
          ) &&
          (
              Township == other.Township ||
              Township != null &&
              Township.Equals(other.Township)
          ) &&
          (
              Section == other.Section ||
              Section != null &&
              Section.Equals(other.Section)
          ) &&
          (
              LegalBookPage == other.LegalBookPage ||
              LegalBookPage != null &&
              LegalBookPage.Equals(other.LegalBookPage)
          ) &&
          (
              LegalBlock == other.LegalBlock ||
              LegalBlock != null &&
              LegalBlock.Equals(other.LegalBlock)
          ) &&
          (
              LegalLots == other.LegalLots ||
              LegalLots != null &&
              LegalLots.Equals(other.LegalLots)
          ) &&
          (
              LegalTractNumber == other.LegalTractNumber ||
              LegalTractNumber != null &&
              LegalTractNumber.Equals(other.LegalTractNumber)
          ) &&
          (
              FullLegal == other.FullLegal ||
              FullLegal != null &&
              FullLegal.Equals(other.FullLegal)
          ) &&
          (
              Taxpayer == other.Taxpayer ||
              Taxpayer != null &&
              Taxpayer.Equals(other.Taxpayer)
          ) &&
          (
              DirectionsURL == other.DirectionsURL ||
              DirectionsURL != null &&
              DirectionsURL.Equals(other.DirectionsURL)
          ) &&
          (
              CensusTract == other.CensusTract ||
              CensusTract != null &&
              CensusTract.Equals(other.CensusTract)
          ) &&
          (
              CensusBlock == other.CensusBlock ||
              CensusBlock != null &&
              CensusBlock.Equals(other.CensusBlock)
          ) &&
          (
              PType == other.PType ||

              PType.Equals(other.PType)
          ) &&
          (
              AdvancedPropertyType == other.AdvancedPropertyType ||

              AdvancedPropertyType.Equals(other.AdvancedPropertyType)
          ) &&
          (
              PropertyType == other.PropertyType ||
              PropertyType != null &&
              other.PropertyType != null &&
              PropertyType.SequenceEqual(other.PropertyType)
          ) &&
          (
              Beds == other.Beds ||

              Beds.Equals(other.Beds)
          ) &&
          (
              Baths == other.Baths ||
              Baths != null &&
              Baths.Equals(other.Baths)
          ) &&
          (
              SqFt == other.SqFt ||

              SqFt.Equals(other.SqFt)
          ) &&
          (
              LotSize == other.LotSize ||

              LotSize.Equals(other.LotSize)
          ) &&
          (
              LotSizeAcres == other.LotSizeAcres ||

              LotSizeAcres.Equals(other.LotSizeAcres)
          ) &&
          (
              YearBuilt == other.YearBuilt ||
              YearBuilt != null &&
              YearBuilt.Equals(other.YearBuilt)
          ) &&
          (
              Units == other.Units ||

              Units.Equals(other.Units)
          ) &&
          (
              Rooms == other.Rooms ||

              Rooms.Equals(other.Rooms)
          ) &&
          (
              Stories == other.Stories ||

              Stories.Equals(other.Stories)
          ) &&
          (
              GarageSize == other.GarageSize ||
              GarageSize != null &&
              GarageSize.Equals(other.GarageSize)
          ) &&
          (
              HVAC == other.HVAC ||

              HVAC.Equals(other.HVAC)
          ) &&
          (
              AirCond == other.AirCond ||

              AirCond.Equals(other.AirCond)
          ) &&
          (
              Heating == other.Heating ||

              Heating.Equals(other.Heating)
          ) &&
          (
              Pool == other.Pool ||

              Pool.Equals(other.Pool)
          ) &&
          (
              Fireplace == other.Fireplace ||

              Fireplace.Equals(other.Fireplace)
          ) &&
          (
              BasementType == other.BasementType ||

              BasementType.Equals(other.BasementType)
          ) &&
          (
              BasementFinishType == other.BasementFinishType ||

              BasementFinishType.Equals(other.BasementFinishType)
          ) &&
          (
              BasementSqFt == other.BasementSqFt ||

              BasementSqFt.Equals(other.BasementSqFt)
          ) &&
          (
              ImprovementCondition == other.ImprovementCondition ||

              ImprovementCondition.Equals(other.ImprovementCondition)
          ) &&
          (
              BuildingQuality == other.BuildingQuality ||

              BuildingQuality.Equals(other.BuildingQuality)
          ) &&
          (
              ConstructionType == other.ConstructionType ||

              ConstructionType.Equals(other.ConstructionType)
          ) &&
          (
              FoundationType == other.FoundationType ||

              FoundationType.Equals(other.FoundationType)
          ) &&
          (
              FrameType == other.FrameType ||

              FrameType.Equals(other.FrameType)
          ) &&
          (
              ExteriorWallType == other.ExteriorWallType ||

              ExteriorWallType.Equals(other.ExteriorWallType)
          ) &&
          (
              FloorType == other.FloorType ||

              FloorType.Equals(other.FloorType)
          ) &&
          (
              RoofType == other.RoofType ||

              RoofType.Equals(other.RoofType)
          ) &&
          (
              UtilitiesType == other.UtilitiesType ||

              UtilitiesType.Equals(other.UtilitiesType)
          ) &&
          (
              ViewType == other.ViewType ||

              ViewType.Equals(other.ViewType)
          ) &&
          (
              LocationInfluence == other.LocationInfluence ||

              LocationInfluence.Equals(other.LocationInfluence)
          ) &&
          (
              GarageSqFt == other.GarageSqFt ||

              GarageSqFt.Equals(other.GarageSqFt)
          ) &&
          (
              LotFrontFootage == other.LotFrontFootage ||

              LotFrontFootage.Equals(other.LotFrontFootage)
          ) &&
          (
              LotDepthFootage == other.LotDepthFootage ||

              LotDepthFootage.Equals(other.LotDepthFootage)
          ) &&
          (
              IsSameMailingOrExempt == other.IsSameMailingOrExempt ||

              IsSameMailingOrExempt.Equals(other.IsSameMailingOrExempt)
          ) &&
          (
              IsSiteVacant == other.IsSiteVacant ||

              IsSiteVacant.Equals(other.IsSiteVacant)
          ) &&
          (
              OwnershipType == other.OwnershipType ||

              OwnershipType.Equals(other.OwnershipType)
          ) &&
          (
              Owner == other.Owner ||
              Owner != null &&
              Owner.Equals(other.Owner)
          ) &&
          (
              Owner2 == other.Owner2 ||
              Owner2 != null &&
              Owner2.Equals(other.Owner2)
          ) &&
          (
              OwnerFirstName == other.OwnerFirstName ||
              OwnerFirstName != null &&
              OwnerFirstName.Equals(other.OwnerFirstName)
          ) &&
          (
              OwnerLastName == other.OwnerLastName ||
              OwnerLastName != null &&
              OwnerLastName.Equals(other.OwnerLastName)
          ) &&
          (
              OwnerSpouseFirstName == other.OwnerSpouseFirstName ||
              OwnerSpouseFirstName != null &&
              OwnerSpouseFirstName.Equals(other.OwnerSpouseFirstName)
          ) &&
          (
              OwnerAddress == other.OwnerAddress ||
              OwnerAddress != null &&
              OwnerAddress.Equals(other.OwnerAddress)
          ) &&
          (
              OwnerCity == other.OwnerCity ||
              OwnerCity != null &&
              OwnerCity.Equals(other.OwnerCity)
          ) &&
          (
              OwnerZipFive == other.OwnerZipFive ||

              OwnerZipFive.Equals(other.OwnerZipFive)
          ) &&
          (
              OwnerState == other.OwnerState ||

              OwnerState.Equals(other.OwnerState)
          ) &&
          (
              OwnerCityStateZip == other.OwnerCityStateZip ||
              OwnerCityStateZip != null &&
              OwnerCityStateZip.Equals(other.OwnerCityStateZip)
          ) &&
          (
              IsMailVacant == other.IsMailVacant ||

              IsMailVacant.Equals(other.IsMailVacant)
          ) &&
          (
              MailCongressionalDistrict == other.MailCongressionalDistrict ||

              MailCongressionalDistrict.Equals(other.MailCongressionalDistrict)
          ) &&
          (
              IsSameMailing == other.IsSameMailing ||

              IsSameMailing.Equals(other.IsSameMailing)
          ) &&
          (
              AVM == other.AVM ||
              AVM != null &&
              AVM.Equals(other.AVM)
          ) &&
          (
              ValuePerSF == other.ValuePerSF ||
              ValuePerSF != null &&
              ValuePerSF.Equals(other.ValuePerSF)
          ) &&
          (
              AssessedValue == other.AssessedValue ||
              AssessedValue != null &&
              AssessedValue.Equals(other.AssessedValue)
          ) &&
          (
              EstimatedRent == other.EstimatedRent ||
              EstimatedRent != null &&
              EstimatedRent.Equals(other.EstimatedRent)
          ) &&
          (
              EstimatedTaxRate == other.EstimatedTaxRate ||
              EstimatedTaxRate != null &&
              EstimatedTaxRate.Equals(other.EstimatedTaxRate)
          ) &&
          (
              OwnerExemption == other.OwnerExemption ||

              OwnerExemption.Equals(other.OwnerExemption)
          ) &&
          (
              LandValue == other.LandValue ||
              LandValue != null &&
              LandValue.Equals(other.LandValue)
          ) &&
          (
              ImpValue == other.ImpValue ||
              ImpValue != null &&
              ImpValue.Equals(other.ImpValue)
          ) &&
          (
              AssessedYear == other.AssessedYear ||
              AssessedYear != null &&
              AssessedYear.Equals(other.AssessedYear)
          ) &&
          (
              AnnualTaxes == other.AnnualTaxes ||
              AnnualTaxes != null &&
              AnnualTaxes.Equals(other.AnnualTaxes)
          ) &&
          (
              EquityPercent == other.EquityPercent ||
              EquityPercent != null &&
              EquityPercent.Equals(other.EquityPercent)
          ) &&
          (
              CLTV == other.CLTV ||
              CLTV != null &&
              CLTV.Equals(other.CLTV)
          ) &&
          (
              TotalLoanBalance == other.TotalLoanBalance ||
              TotalLoanBalance != null &&
              TotalLoanBalance.Equals(other.TotalLoanBalance)
          ) &&
          (
              AvailableEquity == other.AvailableEquity ||
              AvailableEquity != null &&
              AvailableEquity.Equals(other.AvailableEquity)
          ) &&
          (
              NumberLoans == other.NumberLoans ||

              NumberLoans.Equals(other.NumberLoans)
          ) &&
          (
              FirstPurpose == other.FirstPurpose ||

              FirstPurpose.Equals(other.FirstPurpose)
          ) &&
          (
              FirstLoanType == other.FirstLoanType ||

              FirstLoanType.Equals(other.FirstLoanType)
          ) &&
          (
              FirstDate == other.FirstDate ||

              FirstDate.Equals(other.FirstDate)
          ) &&
          (
              FirstConcurrent == other.FirstConcurrent ||

              FirstConcurrent.Equals(other.FirstConcurrent)
          ) &&
          (
              FirstAmount == other.FirstAmount ||
              FirstAmount != null &&
              FirstAmount.Equals(other.FirstAmount)
          ) &&
          (
              FirstCashOut == other.FirstCashOut ||
              FirstCashOut != null &&
              FirstCashOut.Equals(other.FirstCashOut)
          ) &&
          (
              FirstAmountLTV == other.FirstAmountLTV ||
              FirstAmountLTV != null &&
              FirstAmountLTV.Equals(other.FirstAmountLTV)
          ) &&
          (
              FirstTermInYears == other.FirstTermInYears ||

              FirstTermInYears.Equals(other.FirstTermInYears)
          ) &&
          (
              FirstLenderOriginal == other.FirstLenderOriginal ||
              FirstLenderOriginal != null &&
              FirstLenderOriginal.Equals(other.FirstLenderOriginal)
          ) &&
          (
              FirstRateType == other.FirstRateType ||

              FirstRateType.Equals(other.FirstRateType)
          ) &&
          (
              FirstRate == other.FirstRate ||

              FirstRate.Equals(other.FirstRate)
          ) &&
          (
              SecondPurpose == other.SecondPurpose ||

              SecondPurpose.Equals(other.SecondPurpose)
          ) &&
          (
              SecondLoanType == other.SecondLoanType ||

              SecondLoanType.Equals(other.SecondLoanType)
          ) &&
          (
              SecondDate == other.SecondDate ||

              SecondDate.Equals(other.SecondDate)
          ) &&
          (
              SecondConcurrent == other.SecondConcurrent ||

              SecondConcurrent.Equals(other.SecondConcurrent)
          ) &&
          (
              SecondAmount == other.SecondAmount ||
              SecondAmount != null &&
              SecondAmount.Equals(other.SecondAmount)
          ) &&
          (
              SecondCashOut == other.SecondCashOut ||
              SecondCashOut != null &&
              SecondCashOut.Equals(other.SecondCashOut)
          ) &&
          (
              SecondAmountLTV == other.SecondAmountLTV ||
              SecondAmountLTV != null &&
              SecondAmountLTV.Equals(other.SecondAmountLTV)
          ) &&
          (
              SecondTermInYears == other.SecondTermInYears ||

              SecondTermInYears.Equals(other.SecondTermInYears)
          ) &&
          (
              SecondLenderOriginal == other.SecondLenderOriginal ||
              SecondLenderOriginal != null &&
              SecondLenderOriginal.Equals(other.SecondLenderOriginal)
          ) &&
          (
              SecondRateType == other.SecondRateType ||

              SecondRateType.Equals(other.SecondRateType)
          ) &&
          (
              SecondRate == other.SecondRate ||

              SecondRate.Equals(other.SecondRate)
          ) &&
          (
              ForeclosureSelector == other.ForeclosureSelector ||
              ForeclosureSelector != null &&
              ForeclosureSelector.Equals(other.ForeclosureSelector)
          ) &&
          (
              NoticeKey == other.NoticeKey ||

              NoticeKey.Equals(other.NoticeKey)
          ) &&
          (
              InForeclosure == other.InForeclosure ||

              InForeclosure.Equals(other.InForeclosure)
          ) &&
          (
              InTaxDelinquency == other.InTaxDelinquency ||

              InTaxDelinquency.Equals(other.InTaxDelinquency)
          ) &&
          (
              DelinquentAmount == other.DelinquentAmount ||
              DelinquentAmount != null &&
              DelinquentAmount.Equals(other.DelinquentAmount)
          ) &&
          (
              DelinquentYear == other.DelinquentYear ||
              DelinquentYear != null &&
              DelinquentYear.Equals(other.DelinquentYear)
          ) &&
          (
              NumberDelinquentInstallments == other.NumberDelinquentInstallments ||

              NumberDelinquentInstallments.Equals(other.NumberDelinquentInstallments)
          ) &&
          (
              TaxYear == other.TaxYear ||
              TaxYear != null &&
              TaxYear.Equals(other.TaxYear)
          ) &&
          (
              TaxYearBegin == other.TaxYearBegin ||
              TaxYearBegin != null &&
              TaxYearBegin.Equals(other.TaxYearBegin)
          ) &&
          (
              TaxYearEnd == other.TaxYearEnd ||
              TaxYearEnd != null &&
              TaxYearEnd.Equals(other.TaxYearEnd)
          ) &&
          (
              FirstPaymentInstallment == other.FirstPaymentInstallment ||
              FirstPaymentInstallment != null &&
              FirstPaymentInstallment.Equals(other.FirstPaymentInstallment)
          ) &&
          (
              FirstInstallmentAmount == other.FirstInstallmentAmount ||
              FirstInstallmentAmount != null &&
              FirstInstallmentAmount.Equals(other.FirstInstallmentAmount)
          ) &&
          (
              FirstInstallmentPaid == other.FirstInstallmentPaid ||

              FirstInstallmentPaid.Equals(other.FirstInstallmentPaid)
          ) &&
          (
              SecondPaymentInstallment == other.SecondPaymentInstallment ||
              SecondPaymentInstallment != null &&
              SecondPaymentInstallment.Equals(other.SecondPaymentInstallment)
          ) &&
          (
              SecondInstallmentAmount == other.SecondInstallmentAmount ||
              SecondInstallmentAmount != null &&
              SecondInstallmentAmount.Equals(other.SecondInstallmentAmount)
          ) &&
          (
              SecondInstallmentPaid == other.SecondInstallmentPaid ||

              SecondInstallmentPaid.Equals(other.SecondInstallmentPaid)
          ) &&
          (
              ThirdPaymentInstallment == other.ThirdPaymentInstallment ||
              ThirdPaymentInstallment != null &&
              ThirdPaymentInstallment.Equals(other.ThirdPaymentInstallment)
          ) &&
          (
              ThirdInstallmentAmount == other.ThirdInstallmentAmount ||
              ThirdInstallmentAmount != null &&
              ThirdInstallmentAmount.Equals(other.ThirdInstallmentAmount)
          ) &&
          (
              ThirdInstallmentPaid == other.ThirdInstallmentPaid ||

              ThirdInstallmentPaid.Equals(other.ThirdInstallmentPaid)
          ) &&
          (
              FourthPaymentInstallment == other.FourthPaymentInstallment ||
              FourthPaymentInstallment != null &&
              FourthPaymentInstallment.Equals(other.FourthPaymentInstallment)
          ) &&
          (
              FourthInstallmentAmount == other.FourthInstallmentAmount ||
              FourthInstallmentAmount != null &&
              FourthInstallmentAmount.Equals(other.FourthInstallmentAmount)
          ) &&
          (
              FourthInstallmentPaid == other.FourthInstallmentPaid ||

              FourthInstallmentPaid.Equals(other.FourthInstallmentPaid)
          ) &&
          (
              LastTransferRecDate == other.LastTransferRecDate ||

              LastTransferRecDate.Equals(other.LastTransferRecDate)
          ) &&
          (
              LastTransferType == other.LastTransferType ||

              LastTransferType.Equals(other.LastTransferType)
          ) &&
          (
              LastTransferValue == other.LastTransferValue ||
              LastTransferValue != null &&
              LastTransferValue.Equals(other.LastTransferValue)
          ) &&
          (
              LastTransferDownPayment == other.LastTransferDownPayment ||
              LastTransferDownPayment != null &&
              LastTransferDownPayment.Equals(other.LastTransferDownPayment)
          ) &&
          (
              LastTransferDownPaymentPercent == other.LastTransferDownPaymentPercent ||
              LastTransferDownPaymentPercent != null &&
              LastTransferDownPaymentPercent.Equals(other.LastTransferDownPaymentPercent)
          ) &&
          (
              LastTransferSeller == other.LastTransferSeller ||
              LastTransferSeller != null &&
              LastTransferSeller.Equals(other.LastTransferSeller)
          ) &&
          (
              PriorTransferChangeInPrice == other.PriorTransferChangeInPrice ||
              PriorTransferChangeInPrice != null &&
              PriorTransferChangeInPrice.Equals(other.PriorTransferChangeInPrice)
          ) &&
          (
              PriorTransferChangeInPricePercent == other.PriorTransferChangeInPricePercent ||
              PriorTransferChangeInPricePercent != null &&
              PriorTransferChangeInPricePercent.Equals(other.PriorTransferChangeInPricePercent)
          ) &&
          (
              PriorTransferMonthsSince == other.PriorTransferMonthsSince ||

              PriorTransferMonthsSince.Equals(other.PriorTransferMonthsSince)
          ) &&
          (
              ListingStatus == other.ListingStatus ||

              ListingStatus.Equals(other.ListingStatus)
          ) &&
          (
              ListingType == other.ListingType ||

              ListingType.Equals(other.ListingType)
          ) &&
          (
              ListingPrice == other.ListingPrice ||
              ListingPrice != null &&
              ListingPrice.Equals(other.ListingPrice)
          ) &&
          (
              ListingPricePerSqFt == other.ListingPricePerSqFt ||
              ListingPricePerSqFt != null &&
              ListingPricePerSqFt.Equals(other.ListingPricePerSqFt)
          ) &&
          (
              ListingDate == other.ListingDate ||

              ListingDate.Equals(other.ListingDate)
          ) &&
          (
              DaysOnMarket == other.DaysOnMarket ||

              DaysOnMarket.Equals(other.DaysOnMarket)
          ) &&
          (
              InterestLevel == other.InterestLevel ||

              InterestLevel.Equals(other.InterestLevel)
          ) &&
          (
              StatusLevel == other.StatusLevel ||

              StatusLevel.Equals(other.StatusLevel)
          ) &&
          (
              IsListedForSale == other.IsListedForSale ||

              IsListedForSale.Equals(other.IsListedForSale)
          ) &&
          (
              Persons == other.Persons ||
              Persons != null &&
              other.Persons != null &&
              Persons.SequenceEqual(other.Persons)
          ) &&
          (
              PropertyHasOpenPersonLiens == other.PropertyHasOpenPersonLiens ||

              PropertyHasOpenPersonLiens.Equals(other.PropertyHasOpenPersonLiens)
          ) &&
          (
              PropertyHasOpenLiens == other.PropertyHasOpenLiens ||

              PropertyHasOpenLiens.Equals(other.PropertyHasOpenLiens)
          ) &&
          (
              InDivorceProperty == other.InDivorceProperty ||

              InDivorceProperty.Equals(other.InDivorceProperty)
          ) &&
          (
              InBankruptcyProperty == other.InBankruptcyProperty ||

              InBankruptcyProperty.Equals(other.InBankruptcyProperty)
          ) &&
          (
              MyValue == other.MyValue ||
              MyValue != null &&
              MyValue.Equals(other.MyValue)
          ) &&
          (
              MyValuePerSqFt == other.MyValuePerSqFt ||
              MyValuePerSqFt != null &&
              MyValuePerSqFt.Equals(other.MyValuePerSqFt)
          ) &&
          (
              MyValueDate == other.MyValueDate ||
              MyValueDate != null &&
              MyValueDate.Equals(other.MyValueDate)
          ) &&
          (
              AVMPerSqFt == other.AVMPerSqFt ||
              AVMPerSqFt != null &&
              AVMPerSqFt.Equals(other.AVMPerSqFt)
          ) &&
          (
              AVMAsOf == other.AVMAsOf ||
              AVMAsOf != null &&
              AVMAsOf.Equals(other.AVMAsOf)
          ) &&
          (
              AVMReliability == other.AVMReliability ||
              AVMReliability != null &&
              AVMReliability.Equals(other.AVMReliability)
          ) &&
          (
              CompSalesPrice == other.CompSalesPrice ||
              CompSalesPrice != null &&
              CompSalesPrice.Equals(other.CompSalesPrice)
          ) &&
          (
              CompSalesPricePerSqFt == other.CompSalesPricePerSqFt ||
              CompSalesPricePerSqFt != null &&
              CompSalesPricePerSqFt.Equals(other.CompSalesPricePerSqFt)
          ) &&
          (
              CompSalesPriceRange == other.CompSalesPriceRange ||
              CompSalesPriceRange != null &&
              CompSalesPriceRange.Equals(other.CompSalesPriceRange)
          ) &&
          (
              CompSalesDate == other.CompSalesDate ||
              CompSalesDate != null &&
              CompSalesDate.Equals(other.CompSalesDate)
          ) &&
          (
              CompListingPrice == other.CompListingPrice ||
              CompListingPrice != null &&
              CompListingPrice.Equals(other.CompListingPrice)
          ) &&
          (
              CompListingPricePerSqFt == other.CompListingPricePerSqFt ||
              CompListingPricePerSqFt != null &&
              CompListingPricePerSqFt.Equals(other.CompListingPricePerSqFt)
          ) &&
          (
              CompListingPriceRange == other.CompListingPriceRange ||
              CompListingPriceRange != null &&
              CompListingPriceRange.Equals(other.CompListingPriceRange)
          ) &&
          (
              CompListingDate == other.CompListingDate ||
              CompListingDate != null &&
              CompListingDate.Equals(other.CompListingDate)
          ) &&
          (
              RentBreakEven == other.RentBreakEven ||
              RentBreakEven != null &&
              RentBreakEven.Equals(other.RentBreakEven)
          ) &&
          (
              RentBreakEvenPerSqFt == other.RentBreakEvenPerSqFt ||
              RentBreakEvenPerSqFt != null &&
              RentBreakEvenPerSqFt.Equals(other.RentBreakEvenPerSqFt)
          ) &&
          (
              RentBreakEvenDate == other.RentBreakEvenDate ||
              RentBreakEvenDate != null &&
              RentBreakEvenDate.Equals(other.RentBreakEvenDate)
          ) &&
          (
              MyRent == other.MyRent ||
              MyRent != null &&
              MyRent.Equals(other.MyRent)
          ) &&
          (
              MyRentPerSqFt == other.MyRentPerSqFt ||
              MyRentPerSqFt != null &&
              MyRentPerSqFt.Equals(other.MyRentPerSqFt)
          ) &&
          (
              MyRentDate == other.MyRentDate ||
              MyRentDate != null &&
              MyRentDate.Equals(other.MyRentDate)
          ) &&
          (
              HUDRent == other.HUDRent ||
              HUDRent != null &&
              HUDRent.Equals(other.HUDRent)
          ) &&
          (
              HUDRentPerSqFt == other.HUDRentPerSqFt ||
              HUDRentPerSqFt != null &&
              HUDRentPerSqFt.Equals(other.HUDRentPerSqFt)
          ) &&
          (
              HUDRentDate == other.HUDRentDate ||
              HUDRentDate != null &&
              HUDRentDate.Equals(other.HUDRentDate)
          ) &&
          (
              ValueBreakEven == other.ValueBreakEven ||
              ValueBreakEven != null &&
              ValueBreakEven.Equals(other.ValueBreakEven)
          ) &&
          (
              ValueBreakEvenPerSqFt == other.ValueBreakEvenPerSqFt ||
              ValueBreakEvenPerSqFt != null &&
              ValueBreakEvenPerSqFt.Equals(other.ValueBreakEvenPerSqFt)
          ) &&
          (
              ValueBreakEvenDate == other.ValueBreakEvenDate ||
              ValueBreakEvenDate != null &&
              ValueBreakEvenDate.Equals(other.ValueBreakEvenDate)
          ) &&
          (
              Comparables == other.Comparables ||
              Comparables != null &&
              Comparables.Equals(other.Comparables)
          ) &&
          (
              PhotoURL1 == other.PhotoURL1 ||
              PhotoURL1 != null &&
              PhotoURL1.Equals(other.PhotoURL1)
          ) &&
          (
              PrimaryName == other.PrimaryName ||
              PrimaryName != null &&
              PrimaryName.Equals(other.PrimaryName)
          ) &&
          (
              PrimaryFirstName == other.PrimaryFirstName ||
              PrimaryFirstName != null &&
              PrimaryFirstName.Equals(other.PrimaryFirstName)
          ) &&
          (
              PrimaryLastName == other.PrimaryLastName ||
              PrimaryLastName != null &&
              PrimaryLastName.Equals(other.PrimaryLastName)
          ) &&
          (
              PrimaryPhone1Status == other.PrimaryPhone1Status ||
              PrimaryPhone1Status != null &&
              PrimaryPhone1Status.Equals(other.PrimaryPhone1Status)
          ) &&
          (
              PrimaryMobilePhone1Status == other.PrimaryMobilePhone1Status ||
              PrimaryMobilePhone1Status != null &&
              PrimaryMobilePhone1Status.Equals(other.PrimaryMobilePhone1Status)
          ) &&
          (
              SecondaryPhone1Status == other.SecondaryPhone1Status ||
              SecondaryPhone1Status != null &&
              SecondaryPhone1Status.Equals(other.SecondaryPhone1Status)
          ) &&
          (
              SecondaryMobilePhone1Status == other.SecondaryMobilePhone1Status ||
              SecondaryMobilePhone1Status != null &&
              SecondaryMobilePhone1Status.Equals(other.SecondaryMobilePhone1Status)
          ) &&
          (
              PrimaryPhone1Hashed == other.PrimaryPhone1Hashed ||
              PrimaryPhone1Hashed != null &&
              PrimaryPhone1Hashed.Equals(other.PrimaryPhone1Hashed)
          ) &&
          (
              PrimaryEmail1Hashed == other.PrimaryEmail1Hashed ||
              PrimaryEmail1Hashed != null &&
              PrimaryEmail1Hashed.Equals(other.PrimaryEmail1Hashed)
          ) &&
          (
              SecondaryName == other.SecondaryName ||
              SecondaryName != null &&
              SecondaryName.Equals(other.SecondaryName)
          ) &&
          (
              SecondaryFirstName == other.SecondaryFirstName ||
              SecondaryFirstName != null &&
              SecondaryFirstName.Equals(other.SecondaryFirstName)
          ) &&
          (
              SecondaryLastName == other.SecondaryLastName ||
              SecondaryLastName != null &&
              SecondaryLastName.Equals(other.SecondaryLastName)
          ) &&
          (
              SecondaryPhone1Hashed == other.SecondaryPhone1Hashed ||
              SecondaryPhone1Hashed != null &&
              SecondaryPhone1Hashed.Equals(other.SecondaryPhone1Hashed)
          ) &&
          (
              SecondaryEmail1Hashed == other.SecondaryEmail1Hashed ||
              SecondaryEmail1Hashed != null &&
              SecondaryEmail1Hashed.Equals(other.SecondaryEmail1Hashed)
          ) &&
          (
              PhoneAvailability == other.PhoneAvailability ||
              PhoneAvailability != null &&
              PhoneAvailability.Equals(other.PhoneAvailability)
          ) &&
          (
              EmailAvailability == other.EmailAvailability ||
              EmailAvailability != null &&
              EmailAvailability.Equals(other.EmailAvailability)
          ) &&
          (
              PropertyURL == other.PropertyURL ||
              PropertyURL != null &&
              PropertyURL.Equals(other.PropertyURL)
          ) &&
          (
              FloodZone == other.FloodZone ||

              FloodZone.Equals(other.FloodZone)
          ) &&
          (
              FloodZoneRisk == other.FloodZoneRisk ||

              FloodZoneRisk.Equals(other.FloodZoneRisk)
          ) &&
          (
              FloodMapDate == other.FloodMapDate ||
              FloodMapDate != null &&
              FloodMapDate.Equals(other.FloodMapDate)
          ) &&
          (
              FloodMapNumber == other.FloodMapNumber ||
              FloodMapNumber != null &&
              FloodMapNumber.Equals(other.FloodMapNumber)
          ) &&
          (
              ForeclosureStage == other.ForeclosureStage ||

              ForeclosureStage.Equals(other.ForeclosureStage)
          ) &&
          (
              SaleTime == other.SaleTime ||

              SaleTime.Equals(other.SaleTime)
          ) &&
          (
              SalePlace == other.SalePlace ||
              SalePlace != null &&
              SalePlace.Equals(other.SalePlace)
          ) &&
          (
              SaleAmount == other.SaleAmount ||
              SaleAmount != null &&
              SaleAmount.Equals(other.SaleAmount)
          ) &&
          (
              OpeningBid == other.OpeningBid ||
              OpeningBid != null &&
              OpeningBid.Equals(other.OpeningBid)
          ) &&
          (
              WinningBid == other.WinningBid ||
              WinningBid != null &&
              WinningBid.Equals(other.WinningBid)
          ) &&
          (
              DOTPosition == other.DOTPosition ||

              DOTPosition.Equals(other.DOTPosition)
          ) &&
          (
              SaleDate == other.SaleDate ||

              SaleDate.Equals(other.SaleDate)
          ) &&
          (
              PostReason == other.PostReason ||

              PostReason.Equals(other.PostReason)
          ) &&
          (
              TrusteeSaleNum == other.TrusteeSaleNum ||
              TrusteeSaleNum != null &&
              TrusteeSaleNum.Equals(other.TrusteeSaleNum)
          ) &&
          (
              PreviousSaleDate == other.PreviousSaleDate ||

              PreviousSaleDate.Equals(other.PreviousSaleDate)
          ) &&
          (
              OriginalSaleDate == other.OriginalSaleDate ||

              OriginalSaleDate.Equals(other.OriginalSaleDate)
          ) &&
          (
              Trustee == other.Trustee ||
              Trustee != null &&
              Trustee.Equals(other.Trustee)
          ) &&
          (
              TrusteePhone == other.TrusteePhone ||
              TrusteePhone != null &&
              TrusteePhone.Equals(other.TrusteePhone)
          ) &&
          (
              ForeclosingLender == other.ForeclosingLender ||
              ForeclosingLender != null &&
              ForeclosingLender.Equals(other.ForeclosingLender)
          ) &&
          (
              DOTAmount == other.DOTAmount ||
              DOTAmount != null &&
              DOTAmount.Equals(other.DOTAmount)
          ) &&
          (
              DOTRecDate == other.DOTRecDate ||

              DOTRecDate.Equals(other.DOTRecDate)
          ) &&
          (
              DOTDocNum == other.DOTDocNum ||
              DOTDocNum != null &&
              DOTDocNum.Equals(other.DOTDocNum)
          ) &&
          (
              ForeclosureRecDate == other.ForeclosureRecDate ||

              ForeclosureRecDate.Equals(other.ForeclosureRecDate)
          ) &&
          (
              ForeclosureDocType == other.ForeclosureDocType ||

              ForeclosureDocType.Equals(other.ForeclosureDocType)
          ) &&
          (
              ForeclosureDocNumber == other.ForeclosureDocNumber ||
              ForeclosureDocNumber != null &&
              ForeclosureDocNumber.Equals(other.ForeclosureDocNumber)
          ) &&
          (
              ForeclosureBookNumber == other.ForeclosureBookNumber ||
              ForeclosureBookNumber != null &&
              ForeclosureBookNumber.Equals(other.ForeclosureBookNumber)
          ) &&
          (
              ForeclosurePageNumber == other.ForeclosurePageNumber ||
              ForeclosurePageNumber != null &&
              ForeclosurePageNumber.Equals(other.ForeclosurePageNumber)
          ) &&
          (
              Attorney == other.Attorney ||
              Attorney != null &&
              Attorney.Equals(other.Attorney)
          ) &&
          (
              AttorneyPhone == other.AttorneyPhone ||
              AttorneyPhone != null &&
              AttorneyPhone.Equals(other.AttorneyPhone)
          ) &&
          (
              CaseNumber == other.CaseNumber ||
              CaseNumber != null &&
              CaseNumber.Equals(other.CaseNumber)
          ) &&
          (
              LisPendensType == other.LisPendensType ||

              LisPendensType.Equals(other.LisPendensType)
          ) &&
          (
              OpeningBidDividedByAVM == other.OpeningBidDividedByAVM ||

              OpeningBidDividedByAVM.Equals(other.OpeningBidDividedByAVM)
          ) &&
          (
              DefaultAmount == other.DefaultAmount ||
              DefaultAmount != null &&
              DefaultAmount.Equals(other.DefaultAmount)
          ) &&
          (
              DefaultAsOf == other.DefaultAsOf ||

              DefaultAsOf.Equals(other.DefaultAsOf)
          ) &&
          (
              TrusteeAddress == other.TrusteeAddress ||
              TrusteeAddress != null &&
              TrusteeAddress.Equals(other.TrusteeAddress)
          ) &&
          (
              TrusteeCityStZip == other.TrusteeCityStZip ||
              TrusteeCityStZip != null &&
              TrusteeCityStZip.Equals(other.TrusteeCityStZip)
          ) &&
          (
              LenderAddress == other.LenderAddress ||
              LenderAddress != null &&
              LenderAddress.Equals(other.LenderAddress)
          ) &&
          (
              LenderCityStZip == other.LenderCityStZip ||
              LenderCityStZip != null &&
              LenderCityStZip.Equals(other.LenderCityStZip)
          ) &&
          (
              SaleDateRelative == other.SaleDateRelative ||

              SaleDateRelative.Equals(other.SaleDateRelative)
          ) &&
          (
              Transactions == other.Transactions ||
              Transactions != null &&
              Transactions.Equals(other.Transactions)
          ) &&
          (
              CountyRecorderLink == other.CountyRecorderLink ||
              CountyRecorderLink != null &&
              CountyRecorderLink.Equals(other.CountyRecorderLink)
          ) &&
          (
              DisclaimerDetails == other.DisclaimerDetails ||
              DisclaimerDetails != null &&
              DisclaimerDetails.Equals(other.DisclaimerDetails)
          ) &&
          (
              CompsSales == other.CompsSales ||
              CompsSales != null &&
              CompsSales.Equals(other.CompsSales)
          ) &&
          (
              CompsListingsForSale == other.CompsListingsForSale ||
              CompsListingsForSale != null &&
              CompsListingsForSale.Equals(other.CompsListingsForSale)
          ) &&
          (
              Links == other.Links ||
              Links != null &&
              Links.Equals(other.Links)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        var hashCode = 41;
        // Suitable nullity checks etc, of course :)

        hashCode = hashCode * 59 + PropertyKey.GetHashCode();

        hashCode = hashCode * 59 + Longitude.GetHashCode();

        hashCode = hashCode * 59 + Latitude.GetHashCode();

        hashCode = hashCode * 59 + State.GetHashCode();
        if (FIPS != null)
          hashCode = hashCode * 59 + FIPS.GetHashCode();
        if (County != null)
          hashCode = hashCode * 59 + County.GetHashCode();
        if (City != null)
          hashCode = hashCode * 59 + City.GetHashCode();

        hashCode = hashCode * 59 + ZipFive.GetHashCode();
        if (CarrierRoute != null)
          hashCode = hashCode * 59 + CarrierRoute.GetHashCode();

        hashCode = hashCode * 59 + SiteCongressionalDistrict.GetHashCode();
        if (SchoolDistrict != null)
          hashCode = hashCode * 59 + SchoolDistrict.GetHashCode();
        if (FullAddress != null)
          hashCode = hashCode * 59 + FullAddress.GetHashCode();
        if (Address != null)
          hashCode = hashCode * 59 + Address.GetHashCode();

        hashCode = hashCode * 59 + IsStreetNumberOdd.GetHashCode();
        if (SiteStreetName != null)
          hashCode = hashCode * 59 + SiteStreetName.GetHashCode();
        if (RadarID != null)
          hashCode = hashCode * 59 + RadarID.GetHashCode();
        if (APN != null)
          hashCode = hashCode * 59 + APN.GetHashCode();
        if (Subdivision != null)
          hashCode = hashCode * 59 + Subdivision.GetHashCode();
        if (Zoning != null)
          hashCode = hashCode * 59 + Zoning.GetHashCode();
        if (TaxRateArea != null)
          hashCode = hashCode * 59 + TaxRateArea.GetHashCode();
        if (TaxSearchURL != null)
          hashCode = hashCode * 59 + TaxSearchURL.GetHashCode();
        if (AssessorURL != null)
          hashCode = hashCode * 59 + AssessorURL.GetHashCode();
        if (RecorderSearchURL != null)
          hashCode = hashCode * 59 + RecorderSearchURL.GetHashCode();
        if (Range != null)
          hashCode = hashCode * 59 + Range.GetHashCode();
        if (Township != null)
          hashCode = hashCode * 59 + Township.GetHashCode();
        if (Section != null)
          hashCode = hashCode * 59 + Section.GetHashCode();
        if (LegalBookPage != null)
          hashCode = hashCode * 59 + LegalBookPage.GetHashCode();
        if (LegalBlock != null)
          hashCode = hashCode * 59 + LegalBlock.GetHashCode();
        if (LegalLots != null)
          hashCode = hashCode * 59 + LegalLots.GetHashCode();
        if (LegalTractNumber != null)
          hashCode = hashCode * 59 + LegalTractNumber.GetHashCode();
        if (FullLegal != null)
          hashCode = hashCode * 59 + FullLegal.GetHashCode();
        if (Taxpayer != null)
          hashCode = hashCode * 59 + Taxpayer.GetHashCode();
        if (DirectionsURL != null)
          hashCode = hashCode * 59 + DirectionsURL.GetHashCode();
        if (CensusTract != null)
          hashCode = hashCode * 59 + CensusTract.GetHashCode();
        if (CensusBlock != null)
          hashCode = hashCode * 59 + CensusBlock.GetHashCode();

        hashCode = hashCode * 59 + PType.GetHashCode();

        hashCode = hashCode * 59 + AdvancedPropertyType.GetHashCode();
        if (PropertyType != null)
          hashCode = hashCode * 59 + PropertyType.GetHashCode();

        hashCode = hashCode * 59 + Beds.GetHashCode();
        if (Baths != null)
          hashCode = hashCode * 59 + Baths.GetHashCode();

        hashCode = hashCode * 59 + SqFt.GetHashCode();

        hashCode = hashCode * 59 + LotSize.GetHashCode();

        hashCode = hashCode * 59 + LotSizeAcres.GetHashCode();
        if (YearBuilt != null)
          hashCode = hashCode * 59 + YearBuilt.GetHashCode();

        hashCode = hashCode * 59 + Units.GetHashCode();

        hashCode = hashCode * 59 + Rooms.GetHashCode();

        hashCode = hashCode * 59 + Stories.GetHashCode();
        if (GarageSize != null)
          hashCode = hashCode * 59 + GarageSize.GetHashCode();

        hashCode = hashCode * 59 + HVAC.GetHashCode();

        hashCode = hashCode * 59 + AirCond.GetHashCode();

        hashCode = hashCode * 59 + Heating.GetHashCode();

        hashCode = hashCode * 59 + Pool.GetHashCode();

        hashCode = hashCode * 59 + Fireplace.GetHashCode();

        hashCode = hashCode * 59 + BasementType.GetHashCode();

        hashCode = hashCode * 59 + BasementFinishType.GetHashCode();

        hashCode = hashCode * 59 + BasementSqFt.GetHashCode();

        hashCode = hashCode * 59 + ImprovementCondition.GetHashCode();

        hashCode = hashCode * 59 + BuildingQuality.GetHashCode();

        hashCode = hashCode * 59 + ConstructionType.GetHashCode();

        hashCode = hashCode * 59 + FoundationType.GetHashCode();

        hashCode = hashCode * 59 + FrameType.GetHashCode();

        hashCode = hashCode * 59 + ExteriorWallType.GetHashCode();

        hashCode = hashCode * 59 + FloorType.GetHashCode();

        hashCode = hashCode * 59 + RoofType.GetHashCode();

        hashCode = hashCode * 59 + UtilitiesType.GetHashCode();

        hashCode = hashCode * 59 + ViewType.GetHashCode();

        hashCode = hashCode * 59 + LocationInfluence.GetHashCode();

        hashCode = hashCode * 59 + GarageSqFt.GetHashCode();

        hashCode = hashCode * 59 + LotFrontFootage.GetHashCode();

        hashCode = hashCode * 59 + LotDepthFootage.GetHashCode();

        hashCode = hashCode * 59 + IsSameMailingOrExempt.GetHashCode();

        hashCode = hashCode * 59 + IsSiteVacant.GetHashCode();

        hashCode = hashCode * 59 + OwnershipType.GetHashCode();
        if (Owner != null)
          hashCode = hashCode * 59 + Owner.GetHashCode();
        if (Owner2 != null)
          hashCode = hashCode * 59 + Owner2.GetHashCode();
        if (OwnerFirstName != null)
          hashCode = hashCode * 59 + OwnerFirstName.GetHashCode();
        if (OwnerLastName != null)
          hashCode = hashCode * 59 + OwnerLastName.GetHashCode();
        if (OwnerSpouseFirstName != null)
          hashCode = hashCode * 59 + OwnerSpouseFirstName.GetHashCode();
        if (OwnerAddress != null)
          hashCode = hashCode * 59 + OwnerAddress.GetHashCode();
        if (OwnerCity != null)
          hashCode = hashCode * 59 + OwnerCity.GetHashCode();

        hashCode = hashCode * 59 + OwnerZipFive.GetHashCode();

        hashCode = hashCode * 59 + OwnerState.GetHashCode();
        if (OwnerCityStateZip != null)
          hashCode = hashCode * 59 + OwnerCityStateZip.GetHashCode();

        hashCode = hashCode * 59 + IsMailVacant.GetHashCode();

        hashCode = hashCode * 59 + MailCongressionalDistrict.GetHashCode();

        hashCode = hashCode * 59 + IsSameMailing.GetHashCode();
        if (AVM != null)
          hashCode = hashCode * 59 + AVM.GetHashCode();
        if (ValuePerSF != null)
          hashCode = hashCode * 59 + ValuePerSF.GetHashCode();
        if (AssessedValue != null)
          hashCode = hashCode * 59 + AssessedValue.GetHashCode();
        if (EstimatedRent != null)
          hashCode = hashCode * 59 + EstimatedRent.GetHashCode();
        if (EstimatedTaxRate != null)
          hashCode = hashCode * 59 + EstimatedTaxRate.GetHashCode();

        hashCode = hashCode * 59 + OwnerExemption.GetHashCode();
        if (LandValue != null)
          hashCode = hashCode * 59 + LandValue.GetHashCode();
        if (ImpValue != null)
          hashCode = hashCode * 59 + ImpValue.GetHashCode();
        if (AssessedYear != null)
          hashCode = hashCode * 59 + AssessedYear.GetHashCode();
        if (AnnualTaxes != null)
          hashCode = hashCode * 59 + AnnualTaxes.GetHashCode();
        if (EquityPercent != null)
          hashCode = hashCode * 59 + EquityPercent.GetHashCode();
        if (CLTV != null)
          hashCode = hashCode * 59 + CLTV.GetHashCode();
        if (TotalLoanBalance != null)
          hashCode = hashCode * 59 + TotalLoanBalance.GetHashCode();
        if (AvailableEquity != null)
          hashCode = hashCode * 59 + AvailableEquity.GetHashCode();

        hashCode = hashCode * 59 + NumberLoans.GetHashCode();

        hashCode = hashCode * 59 + FirstPurpose.GetHashCode();

        hashCode = hashCode * 59 + FirstLoanType.GetHashCode();

        hashCode = hashCode * 59 + FirstDate.GetHashCode();

        hashCode = hashCode * 59 + FirstConcurrent.GetHashCode();
        if (FirstAmount != null)
          hashCode = hashCode * 59 + FirstAmount.GetHashCode();
        if (FirstCashOut != null)
          hashCode = hashCode * 59 + FirstCashOut.GetHashCode();
        if (FirstAmountLTV != null)
          hashCode = hashCode * 59 + FirstAmountLTV.GetHashCode();

        hashCode = hashCode * 59 + FirstTermInYears.GetHashCode();
        if (FirstLenderOriginal != null)
          hashCode = hashCode * 59 + FirstLenderOriginal.GetHashCode();

        hashCode = hashCode * 59 + FirstRateType.GetHashCode();

        hashCode = hashCode * 59 + FirstRate.GetHashCode();

        hashCode = hashCode * 59 + SecondPurpose.GetHashCode();

        hashCode = hashCode * 59 + SecondLoanType.GetHashCode();

        hashCode = hashCode * 59 + SecondDate.GetHashCode();

        hashCode = hashCode * 59 + SecondConcurrent.GetHashCode();
        if (SecondAmount != null)
          hashCode = hashCode * 59 + SecondAmount.GetHashCode();
        if (SecondCashOut != null)
          hashCode = hashCode * 59 + SecondCashOut.GetHashCode();
        if (SecondAmountLTV != null)
          hashCode = hashCode * 59 + SecondAmountLTV.GetHashCode();

        hashCode = hashCode * 59 + SecondTermInYears.GetHashCode();
        if (SecondLenderOriginal != null)
          hashCode = hashCode * 59 + SecondLenderOriginal.GetHashCode();

        hashCode = hashCode * 59 + SecondRateType.GetHashCode();

        hashCode = hashCode * 59 + SecondRate.GetHashCode();
        if (ForeclosureSelector != null)
          hashCode = hashCode * 59 + ForeclosureSelector.GetHashCode();

        hashCode = hashCode * 59 + NoticeKey.GetHashCode();

        hashCode = hashCode * 59 + InForeclosure.GetHashCode();

        hashCode = hashCode * 59 + InTaxDelinquency.GetHashCode();
        if (DelinquentAmount != null)
          hashCode = hashCode * 59 + DelinquentAmount.GetHashCode();
        if (DelinquentYear != null)
          hashCode = hashCode * 59 + DelinquentYear.GetHashCode();

        hashCode = hashCode * 59 + NumberDelinquentInstallments.GetHashCode();
        if (TaxYear != null)
          hashCode = hashCode * 59 + TaxYear.GetHashCode();
        if (TaxYearBegin != null)
          hashCode = hashCode * 59 + TaxYearBegin.GetHashCode();
        if (TaxYearEnd != null)
          hashCode = hashCode * 59 + TaxYearEnd.GetHashCode();
        if (FirstPaymentInstallment != null)
          hashCode = hashCode * 59 + FirstPaymentInstallment.GetHashCode();
        if (FirstInstallmentAmount != null)
          hashCode = hashCode * 59 + FirstInstallmentAmount.GetHashCode();

        hashCode = hashCode * 59 + FirstInstallmentPaid.GetHashCode();
        if (SecondPaymentInstallment != null)
          hashCode = hashCode * 59 + SecondPaymentInstallment.GetHashCode();
        if (SecondInstallmentAmount != null)
          hashCode = hashCode * 59 + SecondInstallmentAmount.GetHashCode();

        hashCode = hashCode * 59 + SecondInstallmentPaid.GetHashCode();
        if (ThirdPaymentInstallment != null)
          hashCode = hashCode * 59 + ThirdPaymentInstallment.GetHashCode();
        if (ThirdInstallmentAmount != null)
          hashCode = hashCode * 59 + ThirdInstallmentAmount.GetHashCode();

        hashCode = hashCode * 59 + ThirdInstallmentPaid.GetHashCode();
        if (FourthPaymentInstallment != null)
          hashCode = hashCode * 59 + FourthPaymentInstallment.GetHashCode();
        if (FourthInstallmentAmount != null)
          hashCode = hashCode * 59 + FourthInstallmentAmount.GetHashCode();

        hashCode = hashCode * 59 + FourthInstallmentPaid.GetHashCode();

        hashCode = hashCode * 59 + LastTransferRecDate.GetHashCode();

        hashCode = hashCode * 59 + LastTransferType.GetHashCode();
        if (LastTransferValue != null)
          hashCode = hashCode * 59 + LastTransferValue.GetHashCode();
        if (LastTransferDownPayment != null)
          hashCode = hashCode * 59 + LastTransferDownPayment.GetHashCode();
        if (LastTransferDownPaymentPercent != null)
          hashCode = hashCode * 59 + LastTransferDownPaymentPercent.GetHashCode();
        if (LastTransferSeller != null)
          hashCode = hashCode * 59 + LastTransferSeller.GetHashCode();
        if (PriorTransferChangeInPrice != null)
          hashCode = hashCode * 59 + PriorTransferChangeInPrice.GetHashCode();
        if (PriorTransferChangeInPricePercent != null)
          hashCode = hashCode * 59 + PriorTransferChangeInPricePercent.GetHashCode();

        hashCode = hashCode * 59 + PriorTransferMonthsSince.GetHashCode();

        hashCode = hashCode * 59 + ListingStatus.GetHashCode();

        hashCode = hashCode * 59 + ListingType.GetHashCode();
        if (ListingPrice != null)
          hashCode = hashCode * 59 + ListingPrice.GetHashCode();
        if (ListingPricePerSqFt != null)
          hashCode = hashCode * 59 + ListingPricePerSqFt.GetHashCode();

        hashCode = hashCode * 59 + ListingDate.GetHashCode();

        hashCode = hashCode * 59 + DaysOnMarket.GetHashCode();

        hashCode = hashCode * 59 + InterestLevel.GetHashCode();

        hashCode = hashCode * 59 + StatusLevel.GetHashCode();

        hashCode = hashCode * 59 + IsListedForSale.GetHashCode();
        if (Persons != null)
          hashCode = hashCode * 59 + Persons.GetHashCode();

        hashCode = hashCode * 59 + PropertyHasOpenPersonLiens.GetHashCode();

        hashCode = hashCode * 59 + PropertyHasOpenLiens.GetHashCode();

        hashCode = hashCode * 59 + InDivorceProperty.GetHashCode();

        hashCode = hashCode * 59 + InBankruptcyProperty.GetHashCode();
        if (MyValue != null)
          hashCode = hashCode * 59 + MyValue.GetHashCode();
        if (MyValuePerSqFt != null)
          hashCode = hashCode * 59 + MyValuePerSqFt.GetHashCode();
        if (MyValueDate != null)
          hashCode = hashCode * 59 + MyValueDate.GetHashCode();
        if (AVMPerSqFt != null)
          hashCode = hashCode * 59 + AVMPerSqFt.GetHashCode();
        if (AVMAsOf != null)
          hashCode = hashCode * 59 + AVMAsOf.GetHashCode();
        if (AVMReliability != null)
          hashCode = hashCode * 59 + AVMReliability.GetHashCode();
        if (CompSalesPrice != null)
          hashCode = hashCode * 59 + CompSalesPrice.GetHashCode();
        if (CompSalesPricePerSqFt != null)
          hashCode = hashCode * 59 + CompSalesPricePerSqFt.GetHashCode();
        if (CompSalesPriceRange != null)
          hashCode = hashCode * 59 + CompSalesPriceRange.GetHashCode();
        if (CompSalesDate != null)
          hashCode = hashCode * 59 + CompSalesDate.GetHashCode();
        if (CompListingPrice != null)
          hashCode = hashCode * 59 + CompListingPrice.GetHashCode();
        if (CompListingPricePerSqFt != null)
          hashCode = hashCode * 59 + CompListingPricePerSqFt.GetHashCode();
        if (CompListingPriceRange != null)
          hashCode = hashCode * 59 + CompListingPriceRange.GetHashCode();
        if (CompListingDate != null)
          hashCode = hashCode * 59 + CompListingDate.GetHashCode();
        if (RentBreakEven != null)
          hashCode = hashCode * 59 + RentBreakEven.GetHashCode();
        if (RentBreakEvenPerSqFt != null)
          hashCode = hashCode * 59 + RentBreakEvenPerSqFt.GetHashCode();
        if (RentBreakEvenDate != null)
          hashCode = hashCode * 59 + RentBreakEvenDate.GetHashCode();
        if (MyRent != null)
          hashCode = hashCode * 59 + MyRent.GetHashCode();
        if (MyRentPerSqFt != null)
          hashCode = hashCode * 59 + MyRentPerSqFt.GetHashCode();
        if (MyRentDate != null)
          hashCode = hashCode * 59 + MyRentDate.GetHashCode();
        if (HUDRent != null)
          hashCode = hashCode * 59 + HUDRent.GetHashCode();
        if (HUDRentPerSqFt != null)
          hashCode = hashCode * 59 + HUDRentPerSqFt.GetHashCode();
        if (HUDRentDate != null)
          hashCode = hashCode * 59 + HUDRentDate.GetHashCode();
        if (ValueBreakEven != null)
          hashCode = hashCode * 59 + ValueBreakEven.GetHashCode();
        if (ValueBreakEvenPerSqFt != null)
          hashCode = hashCode * 59 + ValueBreakEvenPerSqFt.GetHashCode();
        if (ValueBreakEvenDate != null)
          hashCode = hashCode * 59 + ValueBreakEvenDate.GetHashCode();
        if (Comparables != null)
          hashCode = hashCode * 59 + Comparables.GetHashCode();
        if (PhotoURL1 != null)
          hashCode = hashCode * 59 + PhotoURL1.GetHashCode();
        if (PrimaryName != null)
          hashCode = hashCode * 59 + PrimaryName.GetHashCode();
        if (PrimaryFirstName != null)
          hashCode = hashCode * 59 + PrimaryFirstName.GetHashCode();
        if (PrimaryLastName != null)
          hashCode = hashCode * 59 + PrimaryLastName.GetHashCode();
        if (PrimaryPhone1Status != null)
          hashCode = hashCode * 59 + PrimaryPhone1Status.GetHashCode();
        if (PrimaryMobilePhone1Status != null)
          hashCode = hashCode * 59 + PrimaryMobilePhone1Status.GetHashCode();
        if (SecondaryPhone1Status != null)
          hashCode = hashCode * 59 + SecondaryPhone1Status.GetHashCode();
        if (SecondaryMobilePhone1Status != null)
          hashCode = hashCode * 59 + SecondaryMobilePhone1Status.GetHashCode();
        if (PrimaryPhone1Hashed != null)
          hashCode = hashCode * 59 + PrimaryPhone1Hashed.GetHashCode();
        if (PrimaryEmail1Hashed != null)
          hashCode = hashCode * 59 + PrimaryEmail1Hashed.GetHashCode();
        if (SecondaryName != null)
          hashCode = hashCode * 59 + SecondaryName.GetHashCode();
        if (SecondaryFirstName != null)
          hashCode = hashCode * 59 + SecondaryFirstName.GetHashCode();
        if (SecondaryLastName != null)
          hashCode = hashCode * 59 + SecondaryLastName.GetHashCode();
        if (SecondaryPhone1Hashed != null)
          hashCode = hashCode * 59 + SecondaryPhone1Hashed.GetHashCode();
        if (SecondaryEmail1Hashed != null)
          hashCode = hashCode * 59 + SecondaryEmail1Hashed.GetHashCode();
        if (PhoneAvailability != null)
          hashCode = hashCode * 59 + PhoneAvailability.GetHashCode();
        if (EmailAvailability != null)
          hashCode = hashCode * 59 + EmailAvailability.GetHashCode();
        if (PropertyURL != null)
          hashCode = hashCode * 59 + PropertyURL.GetHashCode();

        hashCode = hashCode * 59 + FloodZone.GetHashCode();

        hashCode = hashCode * 59 + FloodZoneRisk.GetHashCode();
        if (FloodMapDate != null)
          hashCode = hashCode * 59 + FloodMapDate.GetHashCode();
        if (FloodMapNumber != null)
          hashCode = hashCode * 59 + FloodMapNumber.GetHashCode();

        hashCode = hashCode * 59 + ForeclosureStage.GetHashCode();

        hashCode = hashCode * 59 + SaleTime.GetHashCode();
        if (SalePlace != null)
          hashCode = hashCode * 59 + SalePlace.GetHashCode();
        if (SaleAmount != null)
          hashCode = hashCode * 59 + SaleAmount.GetHashCode();
        if (OpeningBid != null)
          hashCode = hashCode * 59 + OpeningBid.GetHashCode();
        if (WinningBid != null)
          hashCode = hashCode * 59 + WinningBid.GetHashCode();

        hashCode = hashCode * 59 + DOTPosition.GetHashCode();

        hashCode = hashCode * 59 + SaleDate.GetHashCode();

        hashCode = hashCode * 59 + PostReason.GetHashCode();
        if (TrusteeSaleNum != null)
          hashCode = hashCode * 59 + TrusteeSaleNum.GetHashCode();

        hashCode = hashCode * 59 + PreviousSaleDate.GetHashCode();

        hashCode = hashCode * 59 + OriginalSaleDate.GetHashCode();
        if (Trustee != null)
          hashCode = hashCode * 59 + Trustee.GetHashCode();
        if (TrusteePhone != null)
          hashCode = hashCode * 59 + TrusteePhone.GetHashCode();
        if (ForeclosingLender != null)
          hashCode = hashCode * 59 + ForeclosingLender.GetHashCode();
        if (DOTAmount != null)
          hashCode = hashCode * 59 + DOTAmount.GetHashCode();

        hashCode = hashCode * 59 + DOTRecDate.GetHashCode();
        if (DOTDocNum != null)
          hashCode = hashCode * 59 + DOTDocNum.GetHashCode();

        hashCode = hashCode * 59 + ForeclosureRecDate.GetHashCode();

        hashCode = hashCode * 59 + ForeclosureDocType.GetHashCode();
        if (ForeclosureDocNumber != null)
          hashCode = hashCode * 59 + ForeclosureDocNumber.GetHashCode();
        if (ForeclosureBookNumber != null)
          hashCode = hashCode * 59 + ForeclosureBookNumber.GetHashCode();
        if (ForeclosurePageNumber != null)
          hashCode = hashCode * 59 + ForeclosurePageNumber.GetHashCode();
        if (Attorney != null)
          hashCode = hashCode * 59 + Attorney.GetHashCode();
        if (AttorneyPhone != null)
          hashCode = hashCode * 59 + AttorneyPhone.GetHashCode();
        if (CaseNumber != null)
          hashCode = hashCode * 59 + CaseNumber.GetHashCode();

        hashCode = hashCode * 59 + LisPendensType.GetHashCode();

        hashCode = hashCode * 59 + OpeningBidDividedByAVM.GetHashCode();
        if (DefaultAmount != null)
          hashCode = hashCode * 59 + DefaultAmount.GetHashCode();

        hashCode = hashCode * 59 + DefaultAsOf.GetHashCode();
        if (TrusteeAddress != null)
          hashCode = hashCode * 59 + TrusteeAddress.GetHashCode();
        if (TrusteeCityStZip != null)
          hashCode = hashCode * 59 + TrusteeCityStZip.GetHashCode();
        if (LenderAddress != null)
          hashCode = hashCode * 59 + LenderAddress.GetHashCode();
        if (LenderCityStZip != null)
          hashCode = hashCode * 59 + LenderCityStZip.GetHashCode();

        hashCode = hashCode * 59 + SaleDateRelative.GetHashCode();
        if (Transactions != null)
          hashCode = hashCode * 59 + Transactions.GetHashCode();
        if (CountyRecorderLink != null)
          hashCode = hashCode * 59 + CountyRecorderLink.GetHashCode();
        if (DisclaimerDetails != null)
          hashCode = hashCode * 59 + DisclaimerDetails.GetHashCode();
        if (CompsSales != null)
          hashCode = hashCode * 59 + CompsSales.GetHashCode();
        if (CompsListingsForSale != null)
          hashCode = hashCode * 59 + CompsListingsForSale.GetHashCode();
        if (Links != null)
          hashCode = hashCode * 59 + Links.GetHashCode();
        return hashCode;
      }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(GETPropertiesRadarID200ResponseResultsInner left, GETPropertiesRadarID200ResponseResultsInner right)
    {
      return Equals(left, right);
    }

    public static bool operator !=(GETPropertiesRadarID200ResponseResultsInner left, GETPropertiesRadarID200ResponseResultsInner right)
    {
      return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
  }
}
