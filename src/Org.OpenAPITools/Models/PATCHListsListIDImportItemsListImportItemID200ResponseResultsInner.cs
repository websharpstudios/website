/*
 * PropertyRadar API
 *
 * # PropertyRadar API Reference PropertyRadar offers the most powerful property and owner data API ever. Access our full 250+ property search criteria, build lists, get owner information, append phones & emails, set up automations, and much more. While the API does not yet offer the full power of the PropertyRadar web and mobile applications, we are excited to make it available and see what you build!    Note that the PropertyRadar API is intended for end-users only - you can not use it to build applications you sell to others.  That said, we offer OAuth, so partner applications can access the API on behalf of our shared customers. Please <a href='https://www.propertyradar.com/support' target='_blank'>contact us</a> to learn more about our partner programs.    The PropertyRadar API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded data, and uses standard HTTP response codes, authentication, and verbs.    To begin using the PropertyRadar API, you can activate a <a href='https://help.propertyradar.com/en/articles/8309200-how-to-activate-30-day-api-trial' target='_blank'>30-Day Free Trial</a> (note that a paid PropertyRadar subscription is required). To do so, <a href='https://app.propertyradar.com/' target='_blank'>login</a>, click the profile icon, and choose Account Settings.    <image src='https://files.propertyradar.com/service/api-docs/Account_Settings_highlighted.png'>  Then click the \"Get API Free Trial\" link at the bottom to begin the trial.    <image src='https://files.propertyradar.com/service/api-docs/Get_API_Free_Trail.png'>  Once you complete that, go back into Account Settings and scroll to the bottom where you will find your API key. Click on its Integration Name to reveal your actual key to use.    <image src='https://files.propertyradar.com/service/api-docs/Integrations_Dialog.png'>  Then when you have your API token, click \"Try It\" next to any of the REST endpoints below. Paste your API token into the \"Bearer Token\" field under Security. Set your Parameters and/or Body in the fields provided.  If you've chosen a pay-per-record endpoint, each result returned will count as one export record or phone/email purchase or unlock against your monthly included items. Any overages will cost the same as any other export would.    As such, test with Purchase=0 as that will tell you how many records will be returned with no deduction. When you are ready to purchase the records, set Purchase=1, and be sure you request the return fields you want.   For exports, whether you request 1 field of data for that record, or 50, it will still count as an export. Again, It's important to test first because all purchases are non-refundable, and even during the API trial, each record will be deducted from your monthly included items.   Finally please note that this API is intended for experienced software developers as it requires custom code on your end. If you do not have a developer on your team and want to access the power of PropertyRadar, please consider using our <a href='https://help.propertyradar.com/en/articles/3314775-using-zapier-with-propertyradar' target='_blank'>Zapier integration</a> instead as no coding is required.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner : IEquatable<PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner>
    {
        /// <summary>
        /// Unique identifier for the list.
        /// </summary>
        /// <value>Unique identifier for the list.</value>
        [DataMember(Name="ListID", EmitDefaultValue=false)]
        public int ListID { get; set; }

        /// <summary>
        /// Unique identifier for the import list item.
        /// </summary>
        /// <value>Unique identifier for the import list item.</value>
        [DataMember(Name="ListImportItemID", EmitDefaultValue=false)]
        public int ListImportItemID { get; set; }

        /// <summary>
        /// Imported Owner Full Name.
        /// </summary>
        /// <value>Imported Owner Full Name.</value>
        [DataMember(Name="FullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Imported Email Address.
        /// </summary>
        /// <value>Imported Email Address.</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Imported Phone Number.
        /// </summary>
        /// <value>Imported Phone Number.</value>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Imported Address.
        /// </summary>
        /// <value>Imported Address.</value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Imported City.
        /// </summary>
        /// <value>Imported City.</value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Imported State.
        /// </summary>
        /// <value>Imported State.</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Imported Zip Code.
        /// </summary>
        /// <value>Imported Zip Code.</value>
        [DataMember(Name="ZipFive", EmitDefaultValue=false)]
        public int ZipFive { get; set; }

        /// <summary>
        /// Imported County.
        /// </summary>
        /// <value>Imported County.</value>
        [DataMember(Name="County", EmitDefaultValue=false)]
        public string County { get; set; }

        /// <summary>
        /// Imported APN.
        /// </summary>
        /// <value>Imported APN.</value>
        [DataMember(Name="APN", EmitDefaultValue=false)]
        public string APN { get; set; }


        /// <summary>
        /// Property import status between Selected, Matched, Pending, Not Found.
        /// </summary>
        /// <value>Property import status between Selected, Matched, Pending, Not Found.</value>
        [TypeConverter(typeof(CustomEnumConverter<PropertyStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PropertyStatusEnum
        {
            
            /// <summary>
            /// Enum SelectedEnum for Selected
            /// </summary>
            [EnumMember(Value = "Selected")]
            SelectedEnum = 1,
            
            /// <summary>
            /// Enum MatchedEnum for Matched
            /// </summary>
            [EnumMember(Value = "Matched")]
            MatchedEnum = 2,
            
            /// <summary>
            /// Enum PendingEnum for Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            PendingEnum = 3,
            
            /// <summary>
            /// Enum NotFoundEnum for Not Found
            /// </summary>
            [EnumMember(Value = "Not Found")]
            NotFoundEnum = 4
        }

        /// <summary>
        /// Property import status between Selected, Matched, Pending, Not Found.
        /// </summary>
        /// <value>Property import status between Selected, Matched, Pending, Not Found.</value>
        [DataMember(Name="PropertyStatus", EmitDefaultValue=false)]
        public PropertyStatusEnum PropertyStatus { get; set; }


        /// <summary>
        /// Person import status between Matched Primary, Matched Set as Primary, Added as Primary, Matched, Selected as Primary, Selected, Not Found, No Longer at Property.
        /// </summary>
        /// <value>Person import status between Matched Primary, Matched Set as Primary, Added as Primary, Matched, Selected as Primary, Selected, Not Found, No Longer at Property.</value>
        [TypeConverter(typeof(CustomEnumConverter<PersonStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PersonStatusEnum
        {
            
            /// <summary>
            /// Enum MatchedPrimaryEnum for Matched Primary
            /// </summary>
            [EnumMember(Value = "Matched Primary")]
            MatchedPrimaryEnum = 1,
            
            /// <summary>
            /// Enum MatchedSetAsPrimaryEnum for Matched Set as Primary
            /// </summary>
            [EnumMember(Value = "Matched Set as Primary")]
            MatchedSetAsPrimaryEnum = 2,
            
            /// <summary>
            /// Enum AddedAsPrimaryEnum for Added as Primary
            /// </summary>
            [EnumMember(Value = "Added as Primary")]
            AddedAsPrimaryEnum = 3,
            
            /// <summary>
            /// Enum MatchedEnum for Matched
            /// </summary>
            [EnumMember(Value = "Matched")]
            MatchedEnum = 4,
            
            /// <summary>
            /// Enum SelectedAsPrimaryEnum for Selected as Primary
            /// </summary>
            [EnumMember(Value = "Selected as Primary")]
            SelectedAsPrimaryEnum = 5,
            
            /// <summary>
            /// Enum SelectedEnum for Selected
            /// </summary>
            [EnumMember(Value = "Selected")]
            SelectedEnum = 6,
            
            /// <summary>
            /// Enum NotFoundEnum for Not Found
            /// </summary>
            [EnumMember(Value = "Not Found")]
            NotFoundEnum = 7,
            
            /// <summary>
            /// Enum NoLongerAtPropertyEnum for No Longer at Property
            /// </summary>
            [EnumMember(Value = "No Longer at Property")]
            NoLongerAtPropertyEnum = 8
        }

        /// <summary>
        /// Person import status between Matched Primary, Matched Set as Primary, Added as Primary, Matched, Selected as Primary, Selected, Not Found, No Longer at Property.
        /// </summary>
        /// <value>Person import status between Matched Primary, Matched Set as Primary, Added as Primary, Matched, Selected as Primary, Selected, Not Found, No Longer at Property.</value>
        [DataMember(Name="PersonStatus", EmitDefaultValue=false)]
        public PersonStatusEnum PersonStatus { get; set; }

        /// <summary>
        /// Matching score between 0 and 100.
        /// </summary>
        /// <value>Matching score between 0 and 100.</value>
        [DataMember(Name="MatchScore", EmitDefaultValue=false)]
        public int MatchScore { get; set; }

        /// <summary>
        /// Unique ID for locating properties within PropertyRadar. 
        /// </summary>
        /// <value>Unique ID for locating properties within PropertyRadar. </value>
        [DataMember(Name="RadarID", EmitDefaultValue=false)]
        public string RadarID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner {\n");
            sb.Append("  ListID: ").Append(ListID).Append("\n");
            sb.Append("  ListImportItemID: ").Append(ListImportItemID).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ZipFive: ").Append(ZipFive).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  APN: ").Append(APN).Append("\n");
            sb.Append("  PropertyStatus: ").Append(PropertyStatus).Append("\n");
            sb.Append("  PersonStatus: ").Append(PersonStatus).Append("\n");
            sb.Append("  MatchScore: ").Append(MatchScore).Append("\n");
            sb.Append("  RadarID: ").Append(RadarID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner)obj);
        }

        /// <summary>
        /// Returns true if PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ListID == other.ListID ||
                    
                    ListID.Equals(other.ListID)
                ) && 
                (
                    ListImportItemID == other.ListImportItemID ||
                    
                    ListImportItemID.Equals(other.ListImportItemID)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    ZipFive == other.ZipFive ||
                    
                    ZipFive.Equals(other.ZipFive)
                ) && 
                (
                    County == other.County ||
                    County != null &&
                    County.Equals(other.County)
                ) && 
                (
                    APN == other.APN ||
                    APN != null &&
                    APN.Equals(other.APN)
                ) && 
                (
                    PropertyStatus == other.PropertyStatus ||
                    
                    PropertyStatus.Equals(other.PropertyStatus)
                ) && 
                (
                    PersonStatus == other.PersonStatus ||
                    
                    PersonStatus.Equals(other.PersonStatus)
                ) && 
                (
                    MatchScore == other.MatchScore ||
                    
                    MatchScore.Equals(other.MatchScore)
                ) && 
                (
                    RadarID == other.RadarID ||
                    RadarID != null &&
                    RadarID.Equals(other.RadarID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ListID.GetHashCode();
                    
                    hashCode = hashCode * 59 + ListImportItemID.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    
                    hashCode = hashCode * 59 + ZipFive.GetHashCode();
                    if (County != null)
                    hashCode = hashCode * 59 + County.GetHashCode();
                    if (APN != null)
                    hashCode = hashCode * 59 + APN.GetHashCode();
                    
                    hashCode = hashCode * 59 + PropertyStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + PersonStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + MatchScore.GetHashCode();
                    if (RadarID != null)
                    hashCode = hashCode * 59 + RadarID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner left, PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner left, PATCHListsListIDImportItemsListImportItemID200ResponseResultsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
