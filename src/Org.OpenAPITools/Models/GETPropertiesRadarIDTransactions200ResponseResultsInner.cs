/*
 * PropertyRadar API
 *
 * # PropertyRadar API Reference PropertyRadar offers the most powerful property and owner data API ever. Access our full 250+ property search criteria, build lists, get owner information, append phones & emails, set up automations, and much more. While the API does not yet offer the full power of the PropertyRadar web and mobile applications, we are excited to make it available and see what you build!    Note that the PropertyRadar API is intended for end-users only - you can not use it to build applications you sell to others.  That said, we offer OAuth, so partner applications can access the API on behalf of our shared customers. Please <a href='https://www.propertyradar.com/support' target='_blank'>contact us</a> to learn more about our partner programs.    The PropertyRadar API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded data, and uses standard HTTP response codes, authentication, and verbs.    To begin using the PropertyRadar API, you can activate a <a href='https://help.propertyradar.com/en/articles/8309200-how-to-activate-30-day-api-trial' target='_blank'>30-Day Free Trial</a> (note that a paid PropertyRadar subscription is required). To do so, <a href='https://app.propertyradar.com/' target='_blank'>login</a>, click the profile icon, and choose Account Settings.    <image src='https://files.propertyradar.com/service/api-docs/Account_Settings_highlighted.png'>  Then click the \"Get API Free Trial\" link at the bottom to begin the trial.    <image src='https://files.propertyradar.com/service/api-docs/Get_API_Free_Trail.png'>  Once you complete that, go back into Account Settings and scroll to the bottom where you will find your API key. Click on its Integration Name to reveal your actual key to use.    <image src='https://files.propertyradar.com/service/api-docs/Integrations_Dialog.png'>  Then when you have your API token, click \"Try It\" next to any of the REST endpoints below. Paste your API token into the \"Bearer Token\" field under Security. Set your Parameters and/or Body in the fields provided.  If you've chosen a pay-per-record endpoint, each result returned will count as one export record or phone/email purchase or unlock against your monthly included items. Any overages will cost the same as any other export would.    As such, test with Purchase=0 as that will tell you how many records will be returned with no deduction. When you are ready to purchase the records, set Purchase=1, and be sure you request the return fields you want.   For exports, whether you request 1 field of data for that record, or 50, it will still count as an export. Again, It's important to test first because all purchases are non-refundable, and even during the API trial, each record will be deducted from your monthly included items.   Finally please note that this API is intended for experienced software developers as it requires custom code on your end. If you do not have a developer on your team and want to access the power of PropertyRadar, please consider using our <a href='https://help.propertyradar.com/en/articles/3314775-using-zapier-with-propertyradar' target='_blank'>Zapier integration</a> instead as no coding is required.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GETPropertiesRadarIDTransactions200ResponseResultsInner : IEquatable<GETPropertiesRadarIDTransactions200ResponseResultsInner>
    {
        /// <summary>
        /// Version of DocType formatted for display.  Child documents are indented, and long names are used (DOT becomes Loan, etc).
        /// </summary>
        /// <value>Version of DocType formatted for display.  Child documents are indented, and long names are used (DOT becomes Loan, etc).</value>
        [DataMember(Name="DocTypeUI", EmitDefaultValue=false)]
        public string DocTypeUI { get; set; }


        /// <summary>
        /// The status of the document in terms of user modifications.  Corresponds to the following stylings: * `edited` = italics (Updated) * `deleted` = strike-thru (Deleted) * `created` = bold (Added) * `original` = normal
        /// </summary>
        /// <value>The status of the document in terms of user modifications.  Corresponds to the following stylings: * `edited` = italics (Updated) * `deleted` = strike-thru (Deleted) * `created` = bold (Added) * `original` = normal</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OriginalEnum for original
            /// </summary>
            [EnumMember(Value = "original")]
            OriginalEnum = 1,
            
            /// <summary>
            /// Enum EditedEnum for edited
            /// </summary>
            [EnumMember(Value = "edited")]
            EditedEnum = 2,
            
            /// <summary>
            /// Enum DeletedEnum for deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            DeletedEnum = 3,
            
            /// <summary>
            /// Enum CreatedEnum for created
            /// </summary>
            [EnumMember(Value = "created")]
            CreatedEnum = 4
        }

        /// <summary>
        /// The status of the document in terms of user modifications.  Corresponds to the following stylings: * &#x60;edited&#x60; &#x3D; italics (Updated) * &#x60;deleted&#x60; &#x3D; strike-thru (Deleted) * &#x60;created&#x60; &#x3D; bold (Added) * &#x60;original&#x60; &#x3D; normal
        /// </summary>
        /// <value>The status of the document in terms of user modifications.  Corresponds to the following stylings: * &#x60;edited&#x60; &#x3D; italics (Updated) * &#x60;deleted&#x60; &#x3D; strike-thru (Deleted) * &#x60;created&#x60; &#x3D; bold (Added) * &#x60;original&#x60; &#x3D; normal</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// For DOT,ASL this is LoanPurpose, for GRT,WRT,QCL this is TransferType
        /// </summary>
        /// <value>For DOT,ASL this is LoanPurpose, for GRT,WRT,QCL this is TransferType</value>
        [DataMember(Name="Purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets or Sets LoanPosition
        /// </summary>
        [DataMember(Name="LoanPosition", EmitDefaultValue=false)]
        public string LoanPosition { get; set; }

        /// <summary>
        /// The document number assigned to the loan by the county recorder 
        /// </summary>
        /// <value>The document number assigned to the loan by the county recorder </value>
        [DataMember(Name="DocNumber", EmitDefaultValue=false)]
        public string DocNumber { get; set; }

        /// <summary>
        /// The date the transfer or sale was recorded at the county recorder&#39;s office. 
        /// </summary>
        /// <value>The date the transfer or sale was recorded at the county recorder&#39;s office. </value>
        [DataMember(Name="RecDate", EmitDefaultValue=false)]
        public string RecDate { get; set; }

        /// <summary>
        /// The person transferring title to or an interest in real property. 
        /// </summary>
        /// <value>The person transferring title to or an interest in real property. </value>
        [DataMember(Name="Grantor", EmitDefaultValue=false)]
        public string Grantor { get; set; }

        /// <summary>
        /// The party receiving title or interest in real property. 
        /// </summary>
        /// <value>The party receiving title or interest in real property. </value>
        [DataMember(Name="Grantee", EmitDefaultValue=false)]
        public string Grantee { get; set; }

        /// <summary>
        /// The amount of the transfer or sale recorded at the county recorder&#39;s office. 
        /// </summary>
        /// <value>The amount of the transfer or sale recorded at the county recorder&#39;s office. </value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// For DOT,ASL this is LTV, for GRT,WRT,QCL this is DownPaymentPercent
        /// </summary>
        /// <value>For DOT,ASL this is LTV, for GRT,WRT,QCL this is DownPaymentPercent</value>
        [DataMember(Name="LTVorDown", EmitDefaultValue=false)]
        public string LTVorDown { get; set; }

        /// <summary>
        /// Indicates if the current user has purchased or uploaded an image for this document.
        /// </summary>
        /// <value>Indicates if the current user has purchased or uploaded an image for this document.</value>
        [DataMember(Name="hasDocumentImage", EmitDefaultValue=false)]
        public string HasDocumentImage { get; set; }

        /// <summary>
        /// Indicates this record corresponds to the transfer of ownership to the current owner.
        /// </summary>
        /// <value>Indicates this record corresponds to the transfer of ownership to the current owner.</value>
        [DataMember(Name="isFirstCurrentOwnerRecord", EmitDefaultValue=false)]
        public string IsFirstCurrentOwnerRecord { get; set; }

        /// <summary>
        /// Based on DocType, lets the client know if a transaction is eligible to be a parent
        /// </summary>
        /// <value>Based on DocType, lets the client know if a transaction is eligible to be a parent</value>
        [DataMember(Name="isParentType", EmitDefaultValue=false)]
        public string IsParentType { get; set; }

        /// <summary>
        /// Unique identifier for a document (or notice, or user-created document)
        /// </summary>
        /// <value>Unique identifier for a document (or notice, or user-created document)</value>
        [DataMember(Name="DocumentID", EmitDefaultValue=false)]
        public string DocumentID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GETPropertiesRadarIDTransactions200ResponseResultsInner {\n");
            sb.Append("  DocTypeUI: ").Append(DocTypeUI).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  LoanPosition: ").Append(LoanPosition).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  RecDate: ").Append(RecDate).Append("\n");
            sb.Append("  Grantor: ").Append(Grantor).Append("\n");
            sb.Append("  Grantee: ").Append(Grantee).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  LTVorDown: ").Append(LTVorDown).Append("\n");
            sb.Append("  HasDocumentImage: ").Append(HasDocumentImage).Append("\n");
            sb.Append("  IsFirstCurrentOwnerRecord: ").Append(IsFirstCurrentOwnerRecord).Append("\n");
            sb.Append("  IsParentType: ").Append(IsParentType).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GETPropertiesRadarIDTransactions200ResponseResultsInner)obj);
        }

        /// <summary>
        /// Returns true if GETPropertiesRadarIDTransactions200ResponseResultsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GETPropertiesRadarIDTransactions200ResponseResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GETPropertiesRadarIDTransactions200ResponseResultsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocTypeUI == other.DocTypeUI ||
                    DocTypeUI != null &&
                    DocTypeUI.Equals(other.DocTypeUI)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                ) && 
                (
                    LoanPosition == other.LoanPosition ||
                    LoanPosition != null &&
                    LoanPosition.Equals(other.LoanPosition)
                ) && 
                (
                    DocNumber == other.DocNumber ||
                    DocNumber != null &&
                    DocNumber.Equals(other.DocNumber)
                ) && 
                (
                    RecDate == other.RecDate ||
                    RecDate != null &&
                    RecDate.Equals(other.RecDate)
                ) && 
                (
                    Grantor == other.Grantor ||
                    Grantor != null &&
                    Grantor.Equals(other.Grantor)
                ) && 
                (
                    Grantee == other.Grantee ||
                    Grantee != null &&
                    Grantee.Equals(other.Grantee)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    LTVorDown == other.LTVorDown ||
                    LTVorDown != null &&
                    LTVorDown.Equals(other.LTVorDown)
                ) && 
                (
                    HasDocumentImage == other.HasDocumentImage ||
                    HasDocumentImage != null &&
                    HasDocumentImage.Equals(other.HasDocumentImage)
                ) && 
                (
                    IsFirstCurrentOwnerRecord == other.IsFirstCurrentOwnerRecord ||
                    IsFirstCurrentOwnerRecord != null &&
                    IsFirstCurrentOwnerRecord.Equals(other.IsFirstCurrentOwnerRecord)
                ) && 
                (
                    IsParentType == other.IsParentType ||
                    IsParentType != null &&
                    IsParentType.Equals(other.IsParentType)
                ) && 
                (
                    DocumentID == other.DocumentID ||
                    DocumentID != null &&
                    DocumentID.Equals(other.DocumentID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocTypeUI != null)
                    hashCode = hashCode * 59 + DocTypeUI.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (LoanPosition != null)
                    hashCode = hashCode * 59 + LoanPosition.GetHashCode();
                    if (DocNumber != null)
                    hashCode = hashCode * 59 + DocNumber.GetHashCode();
                    if (RecDate != null)
                    hashCode = hashCode * 59 + RecDate.GetHashCode();
                    if (Grantor != null)
                    hashCode = hashCode * 59 + Grantor.GetHashCode();
                    if (Grantee != null)
                    hashCode = hashCode * 59 + Grantee.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (LTVorDown != null)
                    hashCode = hashCode * 59 + LTVorDown.GetHashCode();
                    if (HasDocumentImage != null)
                    hashCode = hashCode * 59 + HasDocumentImage.GetHashCode();
                    if (IsFirstCurrentOwnerRecord != null)
                    hashCode = hashCode * 59 + IsFirstCurrentOwnerRecord.GetHashCode();
                    if (IsParentType != null)
                    hashCode = hashCode * 59 + IsParentType.GetHashCode();
                    if (DocumentID != null)
                    hashCode = hashCode * 59 + DocumentID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GETPropertiesRadarIDTransactions200ResponseResultsInner left, GETPropertiesRadarIDTransactions200ResponseResultsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GETPropertiesRadarIDTransactions200ResponseResultsInner left, GETPropertiesRadarIDTransactions200ResponseResultsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
