/*
 * PropertyRadar API
 *
 * # PropertyRadar API Reference PropertyRadar offers the most powerful property and owner data API ever. Access our full 250+ property search criteria, build lists, get owner information, append phones & emails, set up automations, and much more. While the API does not yet offer the full power of the PropertyRadar web and mobile applications, we are excited to make it available and see what you build!    Note that the PropertyRadar API is intended for end-users only - you can not use it to build applications you sell to others.  That said, we offer OAuth, so partner applications can access the API on behalf of our shared customers. Please <a href='https://www.propertyradar.com/support' target='_blank'>contact us</a> to learn more about our partner programs.    The PropertyRadar API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded data, and uses standard HTTP response codes, authentication, and verbs.    To begin using the PropertyRadar API, you can activate a <a href='https://help.propertyradar.com/en/articles/8309200-how-to-activate-30-day-api-trial' target='_blank'>30-Day Free Trial</a> (note that a paid PropertyRadar subscription is required). To do so, <a href='https://app.propertyradar.com/' target='_blank'>login</a>, click the profile icon, and choose Account Settings.    <image src='https://files.propertyradar.com/service/api-docs/Account_Settings_highlighted.png'>  Then click the \"Get API Free Trial\" link at the bottom to begin the trial.    <image src='https://files.propertyradar.com/service/api-docs/Get_API_Free_Trail.png'>  Once you complete that, go back into Account Settings and scroll to the bottom where you will find your API key. Click on its Integration Name to reveal your actual key to use.    <image src='https://files.propertyradar.com/service/api-docs/Integrations_Dialog.png'>  Then when you have your API token, click \"Try It\" next to any of the REST endpoints below. Paste your API token into the \"Bearer Token\" field under Security. Set your Parameters and/or Body in the fields provided.  If you've chosen a pay-per-record endpoint, each result returned will count as one export record or phone/email purchase or unlock against your monthly included items. Any overages will cost the same as any other export would.    As such, test with Purchase=0 as that will tell you how many records will be returned with no deduction. When you are ready to purchase the records, set Purchase=1, and be sure you request the return fields you want.   For exports, whether you request 1 field of data for that record, or 50, it will still count as an export. Again, It's important to test first because all purchases are non-refundable, and even during the API trial, each record will be deducted from your monthly included items.   Finally please note that this API is intended for experienced software developers as it requires custom code on your end. If you do not have a developer on your team and want to access the power of PropertyRadar, please consider using our <a href='https://help.propertyradar.com/en/articles/3314775-using-zapier-with-propertyradar' target='_blank'>Zapier integration</a> instead as no coding is required.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{
  /// <summary>
  ///
  /// </summary>
  [DataContract]
  public partial class GETListsListID200ResponseResultsInner : IEquatable<GETListsListID200ResponseResultsInner>
  {
    /// <summary>
    /// For **dynamic** lists specifies the search criteria we use to fill and update the list.                 For **static** lists specifies the search that initially fills the list, but is not used after creation.                  Do not send for **static** lists.
    /// </summary>
    /// <value>For **dynamic** lists specifies the search criteria we use to fill and update the list.                 For **static** lists specifies the search that initially fills the list, but is not used after creation.                  Do not send for **static** lists.</value>
    [DataMember(Name = "Criteria", EmitDefaultValue = false)]
    public List<GETListsListID200ResponseResultsInnerCriteriaInner> Criteria { get; set; }

    /// <summary>
    /// Unique identifier for the list.
    /// </summary>
    /// <value>Unique identifier for the list.</value>
    [DataMember(Name = "ListID", EmitDefaultValue = false)]
    public int ListID { get; set; }

    /// <summary>
    /// Name displayed and identifier for the list.  Will be truncated to 50 chars
    /// </summary>
    /// <value>Name displayed and identifier for the list.  Will be truncated to 50 chars</value>
    [MaxLength(50)]
    [DataMember(Name = "ListName", EmitDefaultValue = false)]
    public string ListName { get; set; }


    /// <summary>
    /// [Type of list](#tag/Lists) between dynamic, static and import.
    /// </summary>
    /// <value>[Type of list](#tag/Lists) between dynamic, static and import.</value>
    [TypeConverter(typeof(CustomEnumConverter<ListTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ListTypeEnum
    {

      /// <summary>
      /// Enum DynamicEnum for dynamic
      /// </summary>
      [EnumMember(Value = "dynamic")]
      DynamicEnum = 1,

      /// <summary>
      /// Enum StaticEnum for static
      /// </summary>
      [EnumMember(Value = "static")]
      StaticEnum = 2,

      /// <summary>
      /// Enum ImportEnum for import
      /// </summary>
      [EnumMember(Value = "import")]
      ImportEnum = 3
    }

    /// <summary>
    /// [Type of list](#tag/Lists) between dynamic, static and import.
    /// </summary>
    /// <value>[Type of list](#tag/Lists) between dynamic, static and import.</value>
    [DataMember(Name = "ListType", EmitDefaultValue = false)]
    public ListTypeEnum ListType { get; set; }

    /// <summary>
    /// The number of items in the list.
    /// </summary>
    /// <value>The number of items in the list.</value>
    [DataMember(Name = "TotalCount", EmitDefaultValue = false)]
    public string TotalCount { get; set; }

    /// <summary>
    /// The datetime of the last count
    /// </summary>
    /// <value>The datetime of the last count</value>
    [DataMember(Name = "LastViewedRaw", EmitDefaultValue = false)]
    public string LastViewedRaw { get; set; }

    /// <summary>
    /// The datetime of the last count user friendly formatted and applying user&#39;s timezone.
    /// </summary>
    /// <value>The datetime of the last count user friendly formatted and applying user&#39;s timezone.</value>
    [DataMember(Name = "LastViewed", EmitDefaultValue = false)]
    public string LastViewed { get; set; }


    /// <summary>
    /// Whether monitoring, insights & automations are turned on or off.
    /// </summary>
    /// <value>Whether monitoring, insights & automations are turned on or off.</value>

    public enum IsMonitoredEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Whether monitoring, insights &amp; automations are turned on or off.
    /// </summary>
    /// <value>Whether monitoring, insights &amp; automations are turned on or off.</value>
    [DataMember(Name = "isMonitored", EmitDefaultValue = false)]
    public IsMonitoredEnum IsMonitored { get; set; }

    /// <summary>
    /// New properties added to the list after the user&#39;s last view.
    /// </summary>
    /// <value>New properties added to the list after the user&#39;s last view.</value>
    [DataMember(Name = "NewSinceLastViewedCount", EmitDefaultValue = false)]
    public string NewSinceLastViewedCount { get; set; }

    /// <summary>
    /// The datetime when monitoring was turned on for a list.
    /// </summary>
    /// <value>The datetime when monitoring was turned on for a list.</value>
    [DataMember(Name = "MonitoringStartedOn", EmitDefaultValue = false)]
    public string MonitoringStartedOn { get; set; }


    /// <summary>
    /// For **Import** lists indicates the source of the import between file, zapier and api.
    /// </summary>
    /// <value>For **Import** lists indicates the source of the import between file, zapier and api.</value>
    [TypeConverter(typeof(CustomEnumConverter<ImportSourceEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ImportSourceEnum
    {

      /// <summary>
      /// Enum FileEnum for file
      /// </summary>
      [EnumMember(Value = "file")]
      FileEnum = 1,

      /// <summary>
      /// Enum ZapierEnum for zapier
      /// </summary>
      [EnumMember(Value = "zapier")]
      ZapierEnum = 2,

      /// <summary>
      /// Enum ApiEnum for api
      /// </summary>
      [EnumMember(Value = "api")]
      ApiEnum = 3
    }

    /// <summary>
    /// For **Import** lists indicates the source of the import between file, zapier and api.
    /// </summary>
    /// <value>For **Import** lists indicates the source of the import between file, zapier and api.</value>
    [DataMember(Name = "ImportSource", EmitDefaultValue = false)]
    public ImportSourceEnum ImportSource { get; set; }

    /// <summary>
    /// For **Import** lists indicates the threshold to match against a property.
    /// </summary>
    /// <value>For **Import** lists indicates the threshold to match against a property.</value>
    [DataMember(Name = "ImportMatchThreshold", EmitDefaultValue = false)]
    public int ImportMatchThreshold { get; set; }


    /// <summary>
    /// For **Import** lists indicates if the list is focused on matching by property or by person.
    /// </summary>
    /// <value>For **Import** lists indicates if the list is focused on matching by property or by person.</value>
    [TypeConverter(typeof(CustomEnumConverter<ImportTypeEnum>))]
    [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ImportTypeEnum
    {

      /// <summary>
      /// Enum PropertyEnum for property
      /// </summary>
      [EnumMember(Value = "property")]
      PropertyEnum = 1,

      /// <summary>
      /// Enum PersonEnum for person
      /// </summary>
      [EnumMember(Value = "person")]
      PersonEnum = 2
    }

    /// <summary>
    /// For **Import** lists indicates if the list is focused on matching by property or by person.
    /// </summary>
    /// <value>For **Import** lists indicates if the list is focused on matching by property or by person.</value>
    [DataMember(Name = "ImportType", EmitDefaultValue = false)]
    public ImportTypeEnum ImportType { get; set; }

    /// <summary>
    /// Gets or Sets ImportContactOptions
    /// </summary>
    [DataMember(Name = "ImportContactOptions", EmitDefaultValue = false)]
    public POSTListsRequestImportContactOptions ImportContactOptions { get; set; }

    /// <summary>
    /// For Import Type lists shows the quantity of Import Items
    /// </summary>
    /// <value>For Import Type lists shows the quantity of Import Items</value>
    [DataMember(Name = "TotalImportItems", EmitDefaultValue = false)]
    public string TotalImportItems { get; set; }

    /// <summary>
    /// For Import Type lists shows the quantity of processed Import Items
    /// </summary>
    /// <value>For Import Type lists shows the quantity of processed Import Items</value>
    [DataMember(Name = "TotalProcessedImportItems", EmitDefaultValue = false)]
    public string TotalProcessedImportItems { get; set; }

    /// <summary>
    /// Indicate the date that the list is locked to be modified
    /// </summary>
    /// <value>Indicate the date that the list is locked to be modified</value>
    [DataMember(Name = "MonitoringLockedUntil", EmitDefaultValue = false)]
    public string MonitoringLockedUntil { get; set; }


    /// <summary>
    /// Flag boolean indicates if the list is locked for monitoring update
    /// </summary>
    /// <value>Flag boolean indicates if the list is locked for monitoring update</value>

    public enum IsMonitoringLockedEnum
    {

      /// <summary>
      /// Enum _0Enum for 0
      /// </summary>

      _0Enum = 0,

      /// <summary>
      /// Enum _1Enum for 1
      /// </summary>

      _1Enum = 1
    }

    /// <summary>
    /// Flag boolean indicates if the list is locked for monitoring update
    /// </summary>
    /// <value>Flag boolean indicates if the list is locked for monitoring update</value>
    [DataMember(Name = "isMonitoringLocked", EmitDefaultValue = false)]
    public IsMonitoringLockedEnum IsMonitoringLocked { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class GETListsListID200ResponseResultsInner {\n");
      sb.Append("  Criteria: ").Append(Criteria).Append("\n");
      sb.Append("  ListID: ").Append(ListID).Append("\n");
      sb.Append("  ListName: ").Append(ListName).Append("\n");
      sb.Append("  ListType: ").Append(ListType).Append("\n");
      sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
      sb.Append("  LastViewedRaw: ").Append(LastViewedRaw).Append("\n");
      sb.Append("  LastViewed: ").Append(LastViewed).Append("\n");
      sb.Append("  IsMonitored: ").Append(IsMonitored).Append("\n");
      sb.Append("  NewSinceLastViewedCount: ").Append(NewSinceLastViewedCount).Append("\n");
      sb.Append("  MonitoringStartedOn: ").Append(MonitoringStartedOn).Append("\n");
      sb.Append("  ImportSource: ").Append(ImportSource).Append("\n");
      sb.Append("  ImportMatchThreshold: ").Append(ImportMatchThreshold).Append("\n");
      sb.Append("  ImportType: ").Append(ImportType).Append("\n");
      sb.Append("  ImportContactOptions: ").Append(ImportContactOptions).Append("\n");
      sb.Append("  TotalImportItems: ").Append(TotalImportItems).Append("\n");
      sb.Append("  TotalProcessedImportItems: ").Append(TotalProcessedImportItems).Append("\n");
      sb.Append("  MonitoringLockedUntil: ").Append(MonitoringLockedUntil).Append("\n");
      sb.Append("  IsMonitoringLocked: ").Append(IsMonitoringLocked).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      if (obj is null) return false;
      if (ReferenceEquals(this, obj)) return true;
      return obj.GetType() == GetType() && Equals((GETListsListID200ResponseResultsInner)obj);
    }

    /// <summary>
    /// Returns true if GETListsListID200ResponseResultsInner instances are equal
    /// </summary>
    /// <param name="other">Instance of GETListsListID200ResponseResultsInner to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(GETListsListID200ResponseResultsInner other)
    {
      if (other is null) return false;
      if (ReferenceEquals(this, other)) return true;

      return
          (
              Criteria == other.Criteria ||
              Criteria != null &&
              other.Criteria != null &&
              Criteria.SequenceEqual(other.Criteria)
          ) &&
          (
              ListID == other.ListID ||

              ListID.Equals(other.ListID)
          ) &&
          (
              ListName == other.ListName ||
              ListName != null &&
              ListName.Equals(other.ListName)
          ) &&
          (
              ListType == other.ListType ||

              ListType.Equals(other.ListType)
          ) &&
          (
              TotalCount == other.TotalCount ||
              TotalCount != null &&
              TotalCount.Equals(other.TotalCount)
          ) &&
          (
              LastViewedRaw == other.LastViewedRaw ||
              LastViewedRaw != null &&
              LastViewedRaw.Equals(other.LastViewedRaw)
          ) &&
          (
              LastViewed == other.LastViewed ||
              LastViewed != null &&
              LastViewed.Equals(other.LastViewed)
          ) &&
          (
              IsMonitored == other.IsMonitored ||

              IsMonitored.Equals(other.IsMonitored)
          ) &&
          (
              NewSinceLastViewedCount == other.NewSinceLastViewedCount ||
              NewSinceLastViewedCount != null &&
              NewSinceLastViewedCount.Equals(other.NewSinceLastViewedCount)
          ) &&
          (
              MonitoringStartedOn == other.MonitoringStartedOn ||
              MonitoringStartedOn != null &&
              MonitoringStartedOn.Equals(other.MonitoringStartedOn)
          ) &&
          (
              ImportSource == other.ImportSource ||

              ImportSource.Equals(other.ImportSource)
          ) &&
          (
              ImportMatchThreshold == other.ImportMatchThreshold ||

              ImportMatchThreshold.Equals(other.ImportMatchThreshold)
          ) &&
          (
              ImportType == other.ImportType ||

              ImportType.Equals(other.ImportType)
          ) &&
          (
              ImportContactOptions == other.ImportContactOptions ||
              ImportContactOptions != null &&
              ImportContactOptions.Equals(other.ImportContactOptions)
          ) &&
          (
              TotalImportItems == other.TotalImportItems ||
              TotalImportItems != null &&
              TotalImportItems.Equals(other.TotalImportItems)
          ) &&
          (
              TotalProcessedImportItems == other.TotalProcessedImportItems ||
              TotalProcessedImportItems != null &&
              TotalProcessedImportItems.Equals(other.TotalProcessedImportItems)
          ) &&
          (
              MonitoringLockedUntil == other.MonitoringLockedUntil ||
              MonitoringLockedUntil != null &&
              MonitoringLockedUntil.Equals(other.MonitoringLockedUntil)
          ) &&
          (
              IsMonitoringLocked == other.IsMonitoringLocked ||

              IsMonitoringLocked.Equals(other.IsMonitoringLocked)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        var hashCode = 41;
        // Suitable nullity checks etc, of course :)
        if (Criteria != null)
          hashCode = hashCode * 59 + Criteria.GetHashCode();

        hashCode = hashCode * 59 + ListID.GetHashCode();
        if (ListName != null)
          hashCode = hashCode * 59 + ListName.GetHashCode();

        hashCode = hashCode * 59 + ListType.GetHashCode();
        if (TotalCount != null)
          hashCode = hashCode * 59 + TotalCount.GetHashCode();
        if (LastViewedRaw != null)
          hashCode = hashCode * 59 + LastViewedRaw.GetHashCode();
        if (LastViewed != null)
          hashCode = hashCode * 59 + LastViewed.GetHashCode();

        hashCode = hashCode * 59 + IsMonitored.GetHashCode();
        if (NewSinceLastViewedCount != null)
          hashCode = hashCode * 59 + NewSinceLastViewedCount.GetHashCode();
        if (MonitoringStartedOn != null)
          hashCode = hashCode * 59 + MonitoringStartedOn.GetHashCode();

        hashCode = hashCode * 59 + ImportSource.GetHashCode();

        hashCode = hashCode * 59 + ImportMatchThreshold.GetHashCode();

        hashCode = hashCode * 59 + ImportType.GetHashCode();
        if (ImportContactOptions != null)
          hashCode = hashCode * 59 + ImportContactOptions.GetHashCode();
        if (TotalImportItems != null)
          hashCode = hashCode * 59 + TotalImportItems.GetHashCode();
        if (TotalProcessedImportItems != null)
          hashCode = hashCode * 59 + TotalProcessedImportItems.GetHashCode();
        if (MonitoringLockedUntil != null)
          hashCode = hashCode * 59 + MonitoringLockedUntil.GetHashCode();

        hashCode = hashCode * 59 + IsMonitoringLocked.GetHashCode();
        return hashCode;
      }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(GETListsListID200ResponseResultsInner left, GETListsListID200ResponseResultsInner right)
    {
      return Equals(left, right);
    }

    public static bool operator !=(GETListsListID200ResponseResultsInner left, GETListsListID200ResponseResultsInner right)
    {
      return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
  }
}
