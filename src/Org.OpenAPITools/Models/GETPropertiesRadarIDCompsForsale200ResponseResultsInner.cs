/*
 * PropertyRadar API
 *
 * # PropertyRadar API Reference PropertyRadar offers the most powerful property and owner data API ever. Access our full 250+ property search criteria, build lists, get owner information, append phones & emails, set up automations, and much more. While the API does not yet offer the full power of the PropertyRadar web and mobile applications, we are excited to make it available and see what you build!    Note that the PropertyRadar API is intended for end-users only - you can not use it to build applications you sell to others.  That said, we offer OAuth, so partner applications can access the API on behalf of our shared customers. Please <a href='https://www.propertyradar.com/support' target='_blank'>contact us</a> to learn more about our partner programs.    The PropertyRadar API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded data, and uses standard HTTP response codes, authentication, and verbs.    To begin using the PropertyRadar API, you can activate a <a href='https://help.propertyradar.com/en/articles/8309200-how-to-activate-30-day-api-trial' target='_blank'>30-Day Free Trial</a> (note that a paid PropertyRadar subscription is required). To do so, <a href='https://app.propertyradar.com/' target='_blank'>login</a>, click the profile icon, and choose Account Settings.    <image src='https://files.propertyradar.com/service/api-docs/Account_Settings_highlighted.png'>  Then click the \"Get API Free Trial\" link at the bottom to begin the trial.    <image src='https://files.propertyradar.com/service/api-docs/Get_API_Free_Trail.png'>  Once you complete that, go back into Account Settings and scroll to the bottom where you will find your API key. Click on its Integration Name to reveal your actual key to use.    <image src='https://files.propertyradar.com/service/api-docs/Integrations_Dialog.png'>  Then when you have your API token, click \"Try It\" next to any of the REST endpoints below. Paste your API token into the \"Bearer Token\" field under Security. Set your Parameters and/or Body in the fields provided.  If you've chosen a pay-per-record endpoint, each result returned will count as one export record or phone/email purchase or unlock against your monthly included items. Any overages will cost the same as any other export would.    As such, test with Purchase=0 as that will tell you how many records will be returned with no deduction. When you are ready to purchase the records, set Purchase=1, and be sure you request the return fields you want.   For exports, whether you request 1 field of data for that record, or 50, it will still count as an export. Again, It's important to test first because all purchases are non-refundable, and even during the API trial, each record will be deducted from your monthly included items.   Finally please note that this API is intended for experienced software developers as it requires custom code on your end. If you do not have a developer on your team and want to access the power of PropertyRadar, please consider using our <a href='https://help.propertyradar.com/en/articles/3314775-using-zapier-with-propertyradar' target='_blank'>Zapier integration</a> instead as no coding is required.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GETPropertiesRadarIDCompsForsale200ResponseResultsInner : IEquatable<GETPropertiesRadarIDCompsForsale200ResponseResultsInner>
    {
        /// <summary>
        /// A number to display in the list and on corresponding map icons.
        /// </summary>
        /// <value>A number to display in the list and on corresponding map icons.</value>
        [DataMember(Name="ItemNumber", EmitDefaultValue=false)]
        public string ItemNumber { get; set; }

        /// <summary>
        /// Unique ID for locating properties within PropertyRadar. 
        /// </summary>
        /// <value>Unique ID for locating properties within PropertyRadar. </value>
        [DataMember(Name="RadarID", EmitDefaultValue=false)]
        public string RadarID { get; set; }

        /// <summary>
        /// The geographic coordinate in decimal degrees that specifies the north-south position of the center of the property. 
        /// </summary>
        /// <value>The geographic coordinate in decimal degrees that specifies the north-south position of the center of the property. </value>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// The geographic coordinate in decimal degrees that specifies the east-west position of the center of the property. 
        /// </summary>
        /// <value>The geographic coordinate in decimal degrees that specifies the east-west position of the center of the property. </value>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public decimal Longitude { get; set; }

        /// <summary>
        /// Street address at which the property is located. 
        /// </summary>
        /// <value>Street address at which the property is located. </value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// City in which the property is located. 
        /// </summary>
        /// <value>City in which the property is located. </value>
        [DataMember(Name="City", EmitDefaultValue=false)]
        public string City { get; set; }


        /// <summary>
        /// Override the basic property type of the subject propertyOverride the basic property type of the subject propertyBasic property types, derived and standardized across counties from county Use Codes. 
        /// </summary>
        /// <value>Override the basic property type of the subject propertyOverride the basic property type of the subject propertyBasic property types, derived and standardized across counties from county Use Codes. </value>
        [TypeConverter(typeof(CustomEnumConverter<PTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PTypeEnum
        {
            
            /// <summary>
            /// Enum SingleFamilyEnum for Single Family
            /// </summary>
            [EnumMember(Value = "Single Family")]
            SingleFamilyEnum = 1,
            
            /// <summary>
            /// Enum CondominiumEnum for Condominium
            /// </summary>
            [EnumMember(Value = "Condominium")]
            CondominiumEnum = 2,
            
            /// <summary>
            /// Enum MultiFamily24Enum for Multi-Family 2-4
            /// </summary>
            [EnumMember(Value = "Multi-Family 2-4")]
            MultiFamily24Enum = 3,
            
            /// <summary>
            /// Enum MultiFamily5Enum for Multi-Family 5+
            /// </summary>
            [EnumMember(Value = "Multi-Family 5+")]
            MultiFamily5Enum = 4,
            
            /// <summary>
            /// Enum OtherResEnum for Other Res.
            /// </summary>
            [EnumMember(Value = "Other Res.")]
            OtherResEnum = 5,
            
            /// <summary>
            /// Enum CommercialEnum for Commercial
            /// </summary>
            [EnumMember(Value = "Commercial")]
            CommercialEnum = 6,
            
            /// <summary>
            /// Enum IndustrialEnum for Industrial
            /// </summary>
            [EnumMember(Value = "Industrial")]
            IndustrialEnum = 7,
            
            /// <summary>
            /// Enum AgriculturalEnum for Agricultural
            /// </summary>
            [EnumMember(Value = "Agricultural")]
            AgriculturalEnum = 8,
            
            /// <summary>
            /// Enum LandEnum for Land
            /// </summary>
            [EnumMember(Value = "Land")]
            LandEnum = 9,
            
            /// <summary>
            /// Enum GovernmentEnum for Government
            /// </summary>
            [EnumMember(Value = "Government")]
            GovernmentEnum = 10,
            
            /// <summary>
            /// Enum RecreationEnum for Recreation
            /// </summary>
            [EnumMember(Value = "Recreation")]
            RecreationEnum = 11,
            
            /// <summary>
            /// Enum TransportEnum for Transport
            /// </summary>
            [EnumMember(Value = "Transport")]
            TransportEnum = 12,
            
            /// <summary>
            /// Enum UtilityEnum for Utility
            /// </summary>
            [EnumMember(Value = "Utility")]
            UtilityEnum = 13,
            
            /// <summary>
            /// Enum OtherEnum for Other
            /// </summary>
            [EnumMember(Value = "Other")]
            OtherEnum = 14,
            
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 15
        }

        /// <summary>
        /// Override the basic property type of the subject propertyOverride the basic property type of the subject propertyBasic property types, derived and standardized across counties from county Use Codes. 
        /// </summary>
        /// <value>Override the basic property type of the subject propertyOverride the basic property type of the subject propertyBasic property types, derived and standardized across counties from county Use Codes. </value>
        [DataMember(Name="PType", EmitDefaultValue=false)]
        public PTypeEnum PType { get; set; }


        /// <summary>
        /// State in which the property is located. 
        /// </summary>
        /// <value>State in which the property is located. </value>
        [TypeConverter(typeof(CustomEnumConverter<StateEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum AlabamaEnum for Alabama
            /// </summary>
            [EnumMember(Value = "Alabama")]
            AlabamaEnum = 1,
            
            /// <summary>
            /// Enum AlaskaEnum for Alaska
            /// </summary>
            [EnumMember(Value = "Alaska")]
            AlaskaEnum = 2,
            
            /// <summary>
            /// Enum ArizonaEnum for Arizona
            /// </summary>
            [EnumMember(Value = "Arizona")]
            ArizonaEnum = 3,
            
            /// <summary>
            /// Enum ArkansasEnum for Arkansas
            /// </summary>
            [EnumMember(Value = "Arkansas")]
            ArkansasEnum = 4,
            
            /// <summary>
            /// Enum CaliforniaEnum for California
            /// </summary>
            [EnumMember(Value = "California")]
            CaliforniaEnum = 5,
            
            /// <summary>
            /// Enum ColoradoEnum for Colorado
            /// </summary>
            [EnumMember(Value = "Colorado")]
            ColoradoEnum = 6,
            
            /// <summary>
            /// Enum ConnecticutEnum for Connecticut
            /// </summary>
            [EnumMember(Value = "Connecticut")]
            ConnecticutEnum = 7,
            
            /// <summary>
            /// Enum DelawareEnum for Delaware
            /// </summary>
            [EnumMember(Value = "Delaware")]
            DelawareEnum = 8,
            
            /// <summary>
            /// Enum DistrictOfColumbiaEnum for District of Columbia
            /// </summary>
            [EnumMember(Value = "District of Columbia")]
            DistrictOfColumbiaEnum = 9,
            
            /// <summary>
            /// Enum FloridaEnum for Florida
            /// </summary>
            [EnumMember(Value = "Florida")]
            FloridaEnum = 10,
            
            /// <summary>
            /// Enum GeorgiaEnum for Georgia
            /// </summary>
            [EnumMember(Value = "Georgia")]
            GeorgiaEnum = 11,
            
            /// <summary>
            /// Enum HawaiiEnum for Hawaii
            /// </summary>
            [EnumMember(Value = "Hawaii")]
            HawaiiEnum = 12,
            
            /// <summary>
            /// Enum IdahoEnum for Idaho
            /// </summary>
            [EnumMember(Value = "Idaho")]
            IdahoEnum = 13,
            
            /// <summary>
            /// Enum IllinoisEnum for Illinois
            /// </summary>
            [EnumMember(Value = "Illinois")]
            IllinoisEnum = 14,
            
            /// <summary>
            /// Enum IndianaEnum for Indiana
            /// </summary>
            [EnumMember(Value = "Indiana")]
            IndianaEnum = 15,
            
            /// <summary>
            /// Enum IowaEnum for Iowa
            /// </summary>
            [EnumMember(Value = "Iowa")]
            IowaEnum = 16,
            
            /// <summary>
            /// Enum KansasEnum for Kansas
            /// </summary>
            [EnumMember(Value = "Kansas")]
            KansasEnum = 17,
            
            /// <summary>
            /// Enum KentuckyEnum for Kentucky
            /// </summary>
            [EnumMember(Value = "Kentucky")]
            KentuckyEnum = 18,
            
            /// <summary>
            /// Enum LouisianaEnum for Louisiana
            /// </summary>
            [EnumMember(Value = "Louisiana")]
            LouisianaEnum = 19,
            
            /// <summary>
            /// Enum MaineEnum for Maine
            /// </summary>
            [EnumMember(Value = "Maine")]
            MaineEnum = 20,
            
            /// <summary>
            /// Enum MarylandEnum for Maryland
            /// </summary>
            [EnumMember(Value = "Maryland")]
            MarylandEnum = 21,
            
            /// <summary>
            /// Enum MassachusettsEnum for Massachusetts
            /// </summary>
            [EnumMember(Value = "Massachusetts")]
            MassachusettsEnum = 22,
            
            /// <summary>
            /// Enum MichiganEnum for Michigan
            /// </summary>
            [EnumMember(Value = "Michigan")]
            MichiganEnum = 23,
            
            /// <summary>
            /// Enum MinnesotaEnum for Minnesota
            /// </summary>
            [EnumMember(Value = "Minnesota")]
            MinnesotaEnum = 24,
            
            /// <summary>
            /// Enum MississippiEnum for Mississippi
            /// </summary>
            [EnumMember(Value = "Mississippi")]
            MississippiEnum = 25,
            
            /// <summary>
            /// Enum MissouriEnum for Missouri
            /// </summary>
            [EnumMember(Value = "Missouri")]
            MissouriEnum = 26,
            
            /// <summary>
            /// Enum MontanaEnum for Montana
            /// </summary>
            [EnumMember(Value = "Montana")]
            MontanaEnum = 27,
            
            /// <summary>
            /// Enum NebraskaEnum for Nebraska
            /// </summary>
            [EnumMember(Value = "Nebraska")]
            NebraskaEnum = 28,
            
            /// <summary>
            /// Enum NevadaEnum for Nevada
            /// </summary>
            [EnumMember(Value = "Nevada")]
            NevadaEnum = 29,
            
            /// <summary>
            /// Enum NewHampshireEnum for New Hampshire
            /// </summary>
            [EnumMember(Value = "New Hampshire")]
            NewHampshireEnum = 30,
            
            /// <summary>
            /// Enum NewJerseyEnum for New Jersey
            /// </summary>
            [EnumMember(Value = "New Jersey")]
            NewJerseyEnum = 31,
            
            /// <summary>
            /// Enum NewMexicoEnum for New Mexico
            /// </summary>
            [EnumMember(Value = "New Mexico")]
            NewMexicoEnum = 32,
            
            /// <summary>
            /// Enum NewYorkEnum for New York
            /// </summary>
            [EnumMember(Value = "New York")]
            NewYorkEnum = 33,
            
            /// <summary>
            /// Enum NorthCarolinaEnum for North Carolina
            /// </summary>
            [EnumMember(Value = "North Carolina")]
            NorthCarolinaEnum = 34,
            
            /// <summary>
            /// Enum NorthDakotaEnum for North Dakota
            /// </summary>
            [EnumMember(Value = "North Dakota")]
            NorthDakotaEnum = 35,
            
            /// <summary>
            /// Enum OhioEnum for Ohio
            /// </summary>
            [EnumMember(Value = "Ohio")]
            OhioEnum = 36,
            
            /// <summary>
            /// Enum OklahomaEnum for Oklahoma
            /// </summary>
            [EnumMember(Value = "Oklahoma")]
            OklahomaEnum = 37,
            
            /// <summary>
            /// Enum OregonEnum for Oregon
            /// </summary>
            [EnumMember(Value = "Oregon")]
            OregonEnum = 38,
            
            /// <summary>
            /// Enum PennsylvaniaEnum for Pennsylvania
            /// </summary>
            [EnumMember(Value = "Pennsylvania")]
            PennsylvaniaEnum = 39,
            
            /// <summary>
            /// Enum RhodeIslandEnum for Rhode Island
            /// </summary>
            [EnumMember(Value = "Rhode Island")]
            RhodeIslandEnum = 40,
            
            /// <summary>
            /// Enum SouthCarolinaEnum for South Carolina
            /// </summary>
            [EnumMember(Value = "South Carolina")]
            SouthCarolinaEnum = 41,
            
            /// <summary>
            /// Enum SouthDakotaEnum for South Dakota
            /// </summary>
            [EnumMember(Value = "South Dakota")]
            SouthDakotaEnum = 42,
            
            /// <summary>
            /// Enum TennesseeEnum for Tennessee
            /// </summary>
            [EnumMember(Value = "Tennessee")]
            TennesseeEnum = 43,
            
            /// <summary>
            /// Enum TexasEnum for Texas
            /// </summary>
            [EnumMember(Value = "Texas")]
            TexasEnum = 44,
            
            /// <summary>
            /// Enum UtahEnum for Utah
            /// </summary>
            [EnumMember(Value = "Utah")]
            UtahEnum = 45,
            
            /// <summary>
            /// Enum VirginiaEnum for Virginia
            /// </summary>
            [EnumMember(Value = "Virginia")]
            VirginiaEnum = 46,
            
            /// <summary>
            /// Enum VermontEnum for Vermont
            /// </summary>
            [EnumMember(Value = "Vermont")]
            VermontEnum = 47,
            
            /// <summary>
            /// Enum WashingtonEnum for Washington
            /// </summary>
            [EnumMember(Value = "Washington")]
            WashingtonEnum = 48,
            
            /// <summary>
            /// Enum WestVirginiaEnum for West Virginia
            /// </summary>
            [EnumMember(Value = "West Virginia")]
            WestVirginiaEnum = 49,
            
            /// <summary>
            /// Enum WisconsinEnum for Wisconsin
            /// </summary>
            [EnumMember(Value = "Wisconsin")]
            WisconsinEnum = 50,
            
            /// <summary>
            /// Enum WyomingEnum for Wyoming
            /// </summary>
            [EnumMember(Value = "Wyoming")]
            WyomingEnum = 51
        }

        /// <summary>
        /// State in which the property is located. 
        /// </summary>
        /// <value>State in which the property is located. </value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public StateEnum State { get; set; }

        /// <summary>
        /// The number of bedrooms in the primary structure. 
        /// </summary>
        /// <value>The number of bedrooms in the primary structure. </value>
        [DataMember(Name="Beds", EmitDefaultValue=false)]
        public int Beds { get; set; }

        /// <summary>
        /// The number of bathrooms in the primary structure (.5 is toilet and sink only, .75 adds shower but no tub). 
        /// </summary>
        /// <value>The number of bathrooms in the primary structure (.5 is toilet and sink only, .75 adds shower but no tub). </value>
        [DataMember(Name="Baths", EmitDefaultValue=false)]
        public string Baths { get; set; }

        /// <summary>
        /// The square footage of the primary structure. 
        /// </summary>
        /// <value>The square footage of the primary structure. </value>
        [DataMember(Name="SqFt", EmitDefaultValue=false)]
        public int SqFt { get; set; }

        /// <summary>
        /// The number of units, if the property contains more than one. 
        /// </summary>
        /// <value>The number of units, if the property contains more than one. </value>
        [DataMember(Name="Units", EmitDefaultValue=false)]
        public int Units { get; set; }

        /// <summary>
        /// The size of the lot in square feet. 
        /// </summary>
        /// <value>The size of the lot in square feet. </value>
        [DataMember(Name="LotSize", EmitDefaultValue=false)]
        public int LotSize { get; set; }

        /// <summary>
        /// The year the property was built. Note that many counties will only have this data for newer properties after whatever date they began tracking it. 
        /// </summary>
        /// <value>The year the property was built. Note that many counties will only have this data for newer properties after whatever date they began tracking it. </value>
        [DataMember(Name="YearBuilt", EmitDefaultValue=false)]
        public string YearBuilt { get; set; }

        /// <summary>
        /// A number to indicate how closely the property matches the subject property, from 100 for a great match down to 1
        /// </summary>
        /// <value>A number to indicate how closely the property matches the subject property, from 100 for a great match down to 1</value>
        [DataMember(Name="Score", EmitDefaultValue=false)]
        public decimal Score { get; set; }

        /// <summary>
        /// The asking price of the property listed for sale. 
        /// </summary>
        /// <value>The asking price of the property listed for sale. </value>
        [DataMember(Name="ListingPrice", EmitDefaultValue=false)]
        public string ListingPrice { get; set; }

        /// <summary>
        /// The date the property was listed for sale. 
        /// </summary>
        /// <value>The date the property was listed for sale. </value>
        [DataMember(Name="ListedOn", EmitDefaultValue=false)]
        public string ListedOn { get; set; }

        /// <summary>
        /// The current status of the most recent listing on the property. Listing data is from 3rd parties and may be incomplete. 
        /// </summary>
        /// <value>The current status of the most recent listing on the property. Listing data is from 3rd parties and may be incomplete. </value>
        [DataMember(Name="ListingStatus", EmitDefaultValue=false)]
        public string ListingStatus { get; set; }


        /// <summary>
        /// The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required. 
        /// </summary>
        /// <value>The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required. </value>
        [TypeConverter(typeof(CustomEnumConverter<ListingTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ListingTypeEnum
        {
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,
            
            /// <summary>
            /// Enum MarketEnum for Market
            /// </summary>
            [EnumMember(Value = "Market")]
            MarketEnum = 2,
            
            /// <summary>
            /// Enum ShortSaleEnum for Short Sale
            /// </summary>
            [EnumMember(Value = "Short Sale")]
            ShortSaleEnum = 3,
            
            /// <summary>
            /// Enum REOEnum for REO
            /// </summary>
            [EnumMember(Value = "REO")]
            REOEnum = 4,
            
            /// <summary>
            /// Enum TrusteeSaleEnum for TrusteeSale
            /// </summary>
            [EnumMember(Value = "TrusteeSale")]
            TrusteeSaleEnum = 5
        }

        /// <summary>
        /// The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required. 
        /// </summary>
        /// <value>The type of listing, which can be one or more of Market, REO, or Shortsale. REO stands for Real Estate Owned and is an industry term for properties which are owned by the bank after foreclosure. Shortsales are properties that are listed for sale by the owner, but on which the mortgage debt exceeds the asking price and therefore typically require lender approval. Market listings are normal for sale listings, typically by private properties, and with no lender approval required. </value>
        [DataMember(Name="ListingType", EmitDefaultValue=false)]
        public ListingTypeEnum ListingType { get; set; }

        /// <summary>
        /// The listing price divided by the square footage of the property. 
        /// </summary>
        /// <value>The listing price divided by the square footage of the property. </value>
        [DataMember(Name="ListingPricePerSqFt", EmitDefaultValue=false)]
        public string ListingPricePerSqFt { get; set; }

        /// <summary>
        /// Number of days since the property was listed for sale. For properties that are no longer active, this is the number of days between the date the property was originally listed, and its final status (sold, expired, etc). 
        /// </summary>
        /// <value>Number of days since the property was listed for sale. For properties that are no longer active, this is the number of days between the date the property was originally listed, and its final status (sold, expired, etc). </value>
        [DataMember(Name="DaysOnMarket", EmitDefaultValue=false)]
        public int DaysOnMarket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GETPropertiesRadarIDCompsForsale200ResponseResultsInner {\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  RadarID: ").Append(RadarID).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PType: ").Append(PType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Beds: ").Append(Beds).Append("\n");
            sb.Append("  Baths: ").Append(Baths).Append("\n");
            sb.Append("  SqFt: ").Append(SqFt).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  LotSize: ").Append(LotSize).Append("\n");
            sb.Append("  YearBuilt: ").Append(YearBuilt).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ListingPrice: ").Append(ListingPrice).Append("\n");
            sb.Append("  ListedOn: ").Append(ListedOn).Append("\n");
            sb.Append("  ListingStatus: ").Append(ListingStatus).Append("\n");
            sb.Append("  ListingType: ").Append(ListingType).Append("\n");
            sb.Append("  ListingPricePerSqFt: ").Append(ListingPricePerSqFt).Append("\n");
            sb.Append("  DaysOnMarket: ").Append(DaysOnMarket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GETPropertiesRadarIDCompsForsale200ResponseResultsInner)obj);
        }

        /// <summary>
        /// Returns true if GETPropertiesRadarIDCompsForsale200ResponseResultsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GETPropertiesRadarIDCompsForsale200ResponseResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GETPropertiesRadarIDCompsForsale200ResponseResultsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemNumber == other.ItemNumber ||
                    ItemNumber != null &&
                    ItemNumber.Equals(other.ItemNumber)
                ) && 
                (
                    RadarID == other.RadarID ||
                    RadarID != null &&
                    RadarID.Equals(other.RadarID)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    PType == other.PType ||
                    
                    PType.Equals(other.PType)
                ) && 
                (
                    State == other.State ||
                    
                    State.Equals(other.State)
                ) && 
                (
                    Beds == other.Beds ||
                    
                    Beds.Equals(other.Beds)
                ) && 
                (
                    Baths == other.Baths ||
                    Baths != null &&
                    Baths.Equals(other.Baths)
                ) && 
                (
                    SqFt == other.SqFt ||
                    
                    SqFt.Equals(other.SqFt)
                ) && 
                (
                    Units == other.Units ||
                    
                    Units.Equals(other.Units)
                ) && 
                (
                    LotSize == other.LotSize ||
                    
                    LotSize.Equals(other.LotSize)
                ) && 
                (
                    YearBuilt == other.YearBuilt ||
                    YearBuilt != null &&
                    YearBuilt.Equals(other.YearBuilt)
                ) && 
                (
                    Score == other.Score ||
                    
                    Score.Equals(other.Score)
                ) && 
                (
                    ListingPrice == other.ListingPrice ||
                    ListingPrice != null &&
                    ListingPrice.Equals(other.ListingPrice)
                ) && 
                (
                    ListedOn == other.ListedOn ||
                    ListedOn != null &&
                    ListedOn.Equals(other.ListedOn)
                ) && 
                (
                    ListingStatus == other.ListingStatus ||
                    ListingStatus != null &&
                    ListingStatus.Equals(other.ListingStatus)
                ) && 
                (
                    ListingType == other.ListingType ||
                    
                    ListingType.Equals(other.ListingType)
                ) && 
                (
                    ListingPricePerSqFt == other.ListingPricePerSqFt ||
                    ListingPricePerSqFt != null &&
                    ListingPricePerSqFt.Equals(other.ListingPricePerSqFt)
                ) && 
                (
                    DaysOnMarket == other.DaysOnMarket ||
                    
                    DaysOnMarket.Equals(other.DaysOnMarket)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemNumber != null)
                    hashCode = hashCode * 59 + ItemNumber.GetHashCode();
                    if (RadarID != null)
                    hashCode = hashCode * 59 + RadarID.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    
                    hashCode = hashCode * 59 + PType.GetHashCode();
                    
                    hashCode = hashCode * 59 + State.GetHashCode();
                    
                    hashCode = hashCode * 59 + Beds.GetHashCode();
                    if (Baths != null)
                    hashCode = hashCode * 59 + Baths.GetHashCode();
                    
                    hashCode = hashCode * 59 + SqFt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Units.GetHashCode();
                    
                    hashCode = hashCode * 59 + LotSize.GetHashCode();
                    if (YearBuilt != null)
                    hashCode = hashCode * 59 + YearBuilt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (ListingPrice != null)
                    hashCode = hashCode * 59 + ListingPrice.GetHashCode();
                    if (ListedOn != null)
                    hashCode = hashCode * 59 + ListedOn.GetHashCode();
                    if (ListingStatus != null)
                    hashCode = hashCode * 59 + ListingStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + ListingType.GetHashCode();
                    if (ListingPricePerSqFt != null)
                    hashCode = hashCode * 59 + ListingPricePerSqFt.GetHashCode();
                    
                    hashCode = hashCode * 59 + DaysOnMarket.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GETPropertiesRadarIDCompsForsale200ResponseResultsInner left, GETPropertiesRadarIDCompsForsale200ResponseResultsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GETPropertiesRadarIDCompsForsale200ResponseResultsInner left, GETPropertiesRadarIDCompsForsale200ResponseResultsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
